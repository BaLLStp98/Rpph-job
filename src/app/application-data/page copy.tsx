'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import flatpickr from 'flatpickr';
import 'flatpickr/dist/flatpickr.css';
import { Thai } from 'flatpickr/dist/l10n/th.js';
import {
  Card,
  CardBody,
  CardHeader, 
  Button,
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  useDisclosure,
  Spinner,
  Chip
} from '@nextui-org/react';
import {
  UserIcon,
  AcademicCapIcon,
  BriefcaseIcon,
  DocumentTextIcon,
  EyeIcon,
  PrinterIcon,
  ArrowLeftIcon,
  CloudArrowUpIcon,
} from '@heroicons/react/24/outline';

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô
interface ApplicationData {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  appliedPosition: string;
  department: string;
  status: string;
  createdAt: string;
  source?: string; // 'ResumeDeposit' ‡∏´‡∏£‡∏∑‡∏≠ 'ApplicationForm'
  profileImage?: string;
  profileImageUrl?: string;
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
  prefix?: string;
  birthDate?: string;
  age?: string;
  race?: string;
  placeOfBirth?: string;
  placeOfBirthProvince?: string;
  gender?: string;
  nationality?: string;
  religion?: string;
  maritalStatus?: string;
  currentAddress?: string;
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
  idNumber?: string;
  idCardIssuedAt?: string;
  idCardIssueDate?: string;
  idCardExpiryDate?: string;
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
  emergencyContact?: string;
  emergencyPhone?: string;
  emergencyRelationship?: string;
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  registeredAddress?: {
    houseNumber?: string;
    villageNumber?: string;
    alley?: string;
    road?: string;
    subDistrict?: string;
    district?: string;
    province?: string;
    postalCode?: string;
    phone?: string;
    mobile?: string;
  };
  currentAddressDetail?: {
    houseNumber?: string;
    villageNumber?: string;
    alley?: string;
    road?: string;
    subDistrict?: string;
    district?: string;
    province?: string;
    postalCode?: string;
    homePhone?: string;
    mobilePhone?: string;
  };
  emergencyAddress?: {
    houseNumber?: string;
    villageNumber?: string;
    alley?: string;
    road?: string;
    subDistrict?: string;
    district?: string;
    province?: string;
    postalCode?: string;
    phone?: string;
  };
  emergencyWorkplace?: {
    name?: string;
    district?: string;
    province?: string;
    phone?: string;
  };
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™
  spouseInfo?: {
    firstName?: string;
    lastName?: string;
  };
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
  medicalRights?: {
    hasUniversalHealthcare?: boolean;
    universalHealthcareHospital?: string;
    hasSocialSecurity?: boolean;
    socialSecurityHospital?: string;
    dontWantToChangeHospital?: boolean;
    wantToChangeHospital?: boolean;
    newHospital?: string;
    hasCivilServantRights?: boolean;
    otherRights?: string;
  };
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô
  expectedSalary?: string;
  availableDate?: string;
  currentWork?: boolean;
  unit?: string;
  skills?: string;
  languages?: string;
  computerSkills?: string;
  certificates?: string;
  references?: string;
  applicantSignature?: string;
  applicationDate?: string;
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê
  previousGovernmentService?: Array<{
    position?: string;
    department?: string;
    reason?: string;
    date?: string;
  }>;
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢
  multipleEmployers?: string[];
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  education: Array<{
    level?: string;
    institution?: string;
    school?: string;
    major?: string;
    year?: string;
    graduationYear?: string;
    gpa?: string;
  }>;
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  workExperience: Array<{
    position?: string;
    company?: string;
    startDate?: string;
    endDate?: string;
    salary?: string;
    reason?: string;
  }>;
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  documents?: {
    idCard?: string;
    houseRegistration?: string;
    militaryCertificate?: string;
    educationCertificate?: string;
    medicalCertificate?: string;
    drivingLicense?: string;
    nameChangeCertificate?: string;
  };
}

// Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ register
const ApplicationFormView = ({ 
  application, 
  isEditing = false,
  onInputChange,
  uploadingFiles = {},
  onFileSelect
}: { 
  application: ApplicationData;
  isEditing?: boolean;
  onInputChange?: (field: string, value: any) => void;
  uploadingFiles?: {[key: string]: boolean};
  onFileSelect?: (event: React.ChangeEvent<HTMLInputElement>, documentType: string, applicationId: string) => void;
}) => {
  // Refs for flatpickr
  const birthDateRef = useRef<HTMLInputElement>(null);
  const idCardIssueDateRef = useRef<HTMLInputElement>(null);
  const idCardExpiryDateRef = useRef<HTMLInputElement>(null);
  const applicationDateRef = useRef<HTMLInputElement>(null);
  const availableDateRef = useRef<HTMLInputElement>(null);

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏° fallback ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
  const resolveAppliedPosition = (appLike: any, isApplicationForm?: boolean): string => {
    console.log('üîç resolveAppliedPosition called with:', {
      appLike: appLike,
      isApplicationForm,
      appliedPosition: appLike?.appliedPosition,
      expectedPosition: appLike?.expectedPosition,
      staff_position: appLike?.staff_position,
      jobPosition: appLike?.jobPosition
    });

    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ fallback ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ field ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢
    const candidates = [
      isApplicationForm ? appLike?.appliedPosition : appLike?.expectedPosition,
      // fallbacks ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤
      appLike?.appliedPosition,
      appLike?.expectedPosition,
      appLike?.staff_position,
      appLike?.jobPosition,
    ].filter(Boolean) as string[];

    console.log('üîç candidates:', candidates);

    if (candidates.length === 0) {
      console.log('üîç No candidates found, returning ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    }
    
    const raw = candidates.find((v) => {
      if (typeof v !== 'string') return false;
      const t = v.trim();
      return t.length > 0 && t.toLowerCase() !== 'null' && t.toLowerCase() !== 'undefined';
    }) || '';

    console.log('üîç raw value found:', raw);

    if (!raw) {
      console.log('üîç No valid raw value, returning ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    }
    
    const normalized = raw.replace(/\+/g, ' ').trim();
    try {
      const result = decodeURIComponent(normalized);
      console.log('üîç Final result:', result);
      return result;
    } catch {
      console.log('üîç Decode failed, returning normalized:', normalized);
      return normalized;
    }
  };

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ flatpickr ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡πÜ
  useEffect(() => {
    // ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
    if (birthDateRef.current) {
      const inst = (birthDateRef.current as HTMLInputElement & { _flatpickr?: any })._flatpickr;
      if (inst) inst.destroy();
      flatpickr(birthDateRef.current, {
        locale: Thai,
        dateFormat: 'd/m/Y',
        allowInput: true,
        onChange: function(selectedDates, dateStr, instance) {
          if (onInputChange) {
            onInputChange('birthDate', dateStr);
          }
        }
      });
    }

    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£
    if (idCardIssueDateRef.current) {
      const inst = (idCardIssueDateRef.current as HTMLInputElement & { _flatpickr?: any })._flatpickr;
      if (inst) inst.destroy();
      flatpickr(idCardIssueDateRef.current, {
        locale: Thai,
        dateFormat: 'd/m/Y',
        allowInput: true,
        onChange: function(selectedDates, dateStr, instance) {
          if (onInputChange) {
            onInputChange('idCardIssueDate', dateStr);
          }
        }
      });
    }

    // ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ï‡∏£
    if (idCardExpiryDateRef.current) {
      const inst = (idCardExpiryDateRef.current as HTMLInputElement & { _flatpickr?: any })._flatpickr;
      if (inst) inst.destroy();
      flatpickr(idCardExpiryDateRef.current, {
        locale: Thai,
        dateFormat: 'd/m/Y',
        allowInput: true,
        onChange: function(selectedDates, dateStr, instance) {
          if (onInputChange) {
            onInputChange('idCardExpiryDate', dateStr);
          }
        }
      });
    }

    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    if (applicationDateRef.current) {
      const inst = (applicationDateRef.current as HTMLInputElement & { _flatpickr?: any })._flatpickr;
      if (inst) inst.destroy();
      flatpickr(applicationDateRef.current, {
        locale: Thai,
        dateFormat: 'd/m/Y',
        allowInput: true,
        onChange: function(selectedDates, dateStr, instance) {
          if (onInputChange) {
            onInputChange('applicationDate', dateStr);
          }
        }
      });
    }

    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
    if (availableDateRef.current) {
      const inst = (availableDateRef.current as HTMLInputElement & { _flatpickr?: any })._flatpickr;
      if (inst) inst.destroy();
      flatpickr(availableDateRef.current, {
        locale: Thai,
        dateFormat: 'd/m/Y',
        allowInput: true,
        onChange: function(selectedDates, dateStr, instance) {
          if (onInputChange) {
            onInputChange('availableDate', dateStr);
          }
        }
      });
    }
  }, [isEditing, application, onInputChange]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  const formatDate = (dateString: string) => {
    if (!dateString) return '';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch {
      return dateString;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å ISO format ‡πÄ‡∏õ‡πá‡∏ô d/m/Y ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flatpickr
  const formatDateForFlatpickr = (dateString: string) => {
    if (!dateString) return '';
    try {
      const date = new Date(dateString);
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();
      return `${day}/${month}/${year}`;
    } catch {
      return dateString;
    }
  };

  return (
    <div className="space-y-8">
      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */}
      <Card className="shadow-xl border-0">
        <CardHeader className="bg-gradient-to-r from-blue-500 via-indigo-500 to-blue-600 text-white relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 to-indigo-400/20"></div>
          <div className="relative flex items-center gap-3">
               <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                 <UserIcon className="w-6 h-6" />
               </div>
               <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
           </div>
         </CardHeader>
        <CardBody className="p-8">
          {/* ‡πë. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */}
          <div className="mb-8">
            <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
              ‡πë. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
              </h3>
            
            {/* ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
            <div className="mb-6">
              <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
              </h4>
              
              <div className="flex justify-center mb-6">
                <div className="relative">
                  {application.profileImageUrl ? (
                    <img
                      src={application.profileImageUrl.startsWith('http') ?
                        application.profileImageUrl :
                        `/api/image?file=${encodeURIComponent(application.profileImageUrl)}`}
                      alt="‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                      className="w-32 h-32 rounded-full object-cover border-4 border-gray-200 shadow-lg"
                      onError={(e) => {
                        console.log('‚ùå Large profile image load error:', application.profileImageUrl);
                        e.currentTarget.style.display = 'none';
                        e.currentTarget.nextElementSibling?.classList.remove('hidden');
                      }}
                      onLoad={() => {
                        console.log('‚úÖ Large profile image loaded:', application.profileImageUrl);
                      }}
                    />
                  ) : null}
                  <div className={`w-32 h-32 rounded-full bg-gray-200 border-4 border-gray-300 shadow-lg flex items-center justify-center ${application.profileImageUrl ? 'hidden' : ''}`}>
                      <UserIcon className="w-16 h-16 text-gray-400" />
                    </div>
                  </div>
                  </div>
                </div>

            {/* ‡πë.‡πë ‡∏ä‡∏∑‡πà‡∏≠ (‡∏ô‡∏≤‡∏¢/‡∏ô‡∏≤‡∏á/‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß) */}
            <div className="mb-6">
              <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                ‡πë.‡πë ‡∏ä‡∏∑‡πà‡∏≠ (‡∏ô‡∏≤‡∏¢/‡∏ô‡∏≤‡∏á/‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß)
              </h4>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</label>
                   {isEditing ? (
                     <select
                       value={application.prefix || ''}
                       onChange={(e) => onInputChange?.('prefix', e.target.value)}
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     >
                       <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</option>
                       <option value="‡∏ô‡∏≤‡∏¢">‡∏ô‡∏≤‡∏¢</option>
                       <option value="‡∏ô‡∏≤‡∏á">‡∏ô‡∏≤‡∏á</option>
                       <option value="‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß">‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß</option>
                       <option value="‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢">‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢</option>
                       <option value="‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á">‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á</option>
                       <option value="‡∏î.‡∏ä.">‡∏î.‡∏ä.</option>
                       <option value="‡∏î.‡∏ç.">‡∏î.‡∏ç.</option>
                       <option value="‡∏ú‡∏®.">‡∏ú‡∏®.</option>
                       <option value="‡∏£‡∏®.">‡∏£‡∏®.</option>
                       <option value="‡∏®.">‡∏®.</option>
                     </select>
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.prefix || '-'}
                    </div>
                   )}
                </div>
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.firstName || ''}
                       onChange={(e) => onInputChange?.('firstName', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.firstName || '-'}
                     </div>
               )}
             </div>
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.lastName || ''}
                       onChange={(e) => onInputChange?.('lastName', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.lastName || '-'}
                     </div>
                   )}
                 </div>
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î</label>
                   {isEditing ? (
                     <input
                       ref={birthDateRef}
                       type="text"
                       value={formatDateForFlatpickr(application.birthDate || '')}
                       onChange={(e) => onInputChange?.('birthDate', e.target.value)}
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="dd/mm/yyyy"
                     />
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {formatDate(application.birthDate || '') || '-'}
                     </div>
                   )}
                 </div>
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≤‡∏¢‡∏∏</label>
                   {isEditing ? (
                     <input
                       type="number"
                       value={application.age || ''}
                       onChange={(e) => onInputChange?.('age', e.target.value)}
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.age || '-'}
                     </div>
                   )}
                 </div>
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡πÄ‡∏û‡∏®</label>
                   {isEditing ? (
                     <div className="flex gap-4">
                       <label className="flex items-center gap-2">
                         <input 
                           type="radio" 
                           name="gender" 
                           value="‡∏ä‡∏≤‡∏¢"
                           checked={application.gender === '‡∏ä‡∏≤‡∏¢'}
                           onChange={(e) => onInputChange?.('gender', e.target.value)}
                           className="w-4 h-4" 
                         />
                         <span>‡∏ä‡∏≤‡∏¢</span>
                       </label>
                       <label className="flex items-center gap-2">
                         <input 
                           type="radio" 
                           name="gender" 
                           value="‡∏´‡∏ç‡∏¥‡∏á"
                           checked={application.gender === '‡∏´‡∏ç‡∏¥‡∏á'}
                           onChange={(e) => onInputChange?.('gender', e.target.value)}
                           className="w-4 h-4" 
                         />
                         <span>‡∏´‡∏ç‡∏¥‡∏á</span>
                       </label>
                     </div>
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.gender || '-'}
                     </div>
                   )}
                 </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.nationality || ''}
                       onChange={(e) => onInputChange?.('nationality', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.nationality || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏®‡∏≤‡∏™‡∏ô‡∏≤</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.religion || ''}
                       onChange={(e) => onInputChange?.('religion', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏®‡∏≤‡∏™‡∏ô‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.religion || '-'}
                    </div>
                  )}
                </div>
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏™‡∏°‡∏£‡∏™</label>
                   {isEditing ? (
                     <div className="flex gap-6">
                       <label className="flex items-center gap-2">
                         <input 
                           type="radio" 
                           name="maritalStatus" 
                           value="‡πÇ‡∏™‡∏î"
                           checked={application.maritalStatus === '‡πÇ‡∏™‡∏î'}
                           onChange={(e) => onInputChange?.('maritalStatus', e.target.value)}
                           className="w-4 h-4" 
                         />
                         <span>‡πÇ‡∏™‡∏î</span>
                       </label>
                       <label className="flex items-center gap-2">
                         <input 
                           type="radio" 
                           name="maritalStatus" 
                           value="‡∏™‡∏°‡∏£‡∏™"
                           checked={application.maritalStatus === '‡∏™‡∏°‡∏£‡∏™'}
                           onChange={(e) => onInputChange?.('maritalStatus', e.target.value)}
                           className="w-4 h-4" 
                         />
                         <span>‡∏™‡∏°‡∏£‡∏™</span>
                       </label>
                       <label className="flex items-center gap-2">
                         <input 
                           type="radio" 
                           name="maritalStatus" 
                           value="‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á"
                           checked={application.maritalStatus === '‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á'}
                           onChange={(e) => onInputChange?.('maritalStatus', e.target.value)}
                           className="w-4 h-4" 
                         />
                         <span>‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á</span>
                       </label>
                       <label className="flex items-center gap-2">
                         <input 
                           type="radio" 
                           name="maritalStatus" 
                           value="‡∏´‡∏°‡πâ‡∏≤‡∏¢"
                           checked={application.maritalStatus === '‡∏´‡∏°‡πâ‡∏≤‡∏¢'}
                           onChange={(e) => onInputChange?.('maritalStatus', e.target.value)}
                           className="w-4 h-4" 
                         />
                         <span>‡∏´‡∏°‡πâ‡∏≤‡∏¢</span>
                       </label>
                     </div>
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.maritalStatus || '-'}
                     </div>
                   )}
                 </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.race || ''}
                       onChange={(e) => onInputChange?.('race', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.race || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.placeOfBirth || ''}
                       onChange={(e) => onInputChange?.('placeOfBirth', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.placeOfBirth || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.placeOfBirthProvince || ''}
                       onChange={(e) => onInputChange?.('placeOfBirthProvince', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.placeOfBirthProvince || '-'}
                    </div>
                  )}
                </div>
              </div>
            </div>
             </div>
             
          {/* ‡πí. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô */}
          <div className="mb-8">
            <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
              ‡πí. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
            </h3>
            
             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.idNumber || ''}
                       onChange={(e) => onInputChange?.('idNumber', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {application.idNumber || '-'}
                   </div>
                 )}
               </div>
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≠‡∏Å‡πÇ‡∏î‡∏¢</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.idCardIssuedAt || ''}
                       onChange={(e) => onInputChange?.('idCardIssuedAt', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≠‡∏Å‡πÇ‡∏î‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {application.idCardIssuedAt || '-'}
                   </div>
                 )}
               </div>
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£</label>
                 {isEditing ? (
                   <input
                       ref={idCardIssueDateRef}
                       type="text"
                       value={formatDateForFlatpickr(application.idCardIssueDate || '')}
                     onChange={(e) => onInputChange?.('idCardIssueDate', e.target.value)}
                     className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="dd/mm/yyyy"
                   />
                 ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {formatDate(application.idCardIssueDate || '') || '-'}
                   </div>
                 )}
               </div>
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</label>
                 {isEditing ? (
                   <input
                       ref={idCardExpiryDateRef}
                       type="text"
                       value={formatDateForFlatpickr(application.idCardExpiryDate || '')}
                     onChange={(e) => onInputChange?.('idCardExpiryDate', e.target.value)}
                     className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="dd/mm/yyyy"
                   />
                 ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {formatDate(application.idCardExpiryDate || '') || '-'}
                   </div>
                 )}
               </div>
             </div>
          </div>

          {/* ‡πì. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ */}
          <div className="mb-8">
            <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
              ‡πì. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
            </h3>
            
            {/* ‡πì.‡πë ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô */}
            <div className="mb-6">
              <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                ‡πì.‡πë ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.houseNumber || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.houseNumber', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.houseNumber || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.villageNumber || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.villageNumber', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.villageNumber || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.alley || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.alley', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.alley || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ñ‡∏ô‡∏ô</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.road || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.road', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.road || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.subDistrict || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.subDistrict', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.subDistrict || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.district || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.district', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.district || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.province || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.province', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.province || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.postalCode || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.postalCode', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.postalCode || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.phone || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.phone', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.phone || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.registeredAddress?.mobile || ''}
                      onChange={(e) => onInputChange?.('registeredAddress.mobile', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.registeredAddress?.mobile || '-'}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* ‡πì.‡πí ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
            <div className="mb-6">
              <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                ‡πì.‡πí ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.houseNumber || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.houseNumber', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.houseNumber || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.villageNumber || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.villageNumber', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.villageNumber || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.alley || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.alley', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.alley || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ñ‡∏ô‡∏ô</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.road || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.road', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.road || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.subDistrict || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.subDistrict', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.subDistrict || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.district || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.district', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.district || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.province || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.province', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.province || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.postalCode || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.postalCode', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.postalCode || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.homePhone || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.homePhone', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.homePhone || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.currentAddressDetail?.mobilePhone || ''}
                      onChange={(e) => onInputChange?.('currentAddressDetail.mobilePhone', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.currentAddressDetail?.mobilePhone || '-'}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* ‡πì.‡πì ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ */}
            <div className="mb-6">
              <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                ‡πì.‡πì ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.phone || ''}
                       onChange={(e) => onInputChange?.('phone', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.phone || '-'}
                     </div>
               )}
             </div>
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
                   {isEditing ? (
                     <input
                       type="email"
                       value={application.email || ''}
                       onChange={(e) => onInputChange?.('email', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.email || '-'}
                     </div>
                   )}
                 </div>
              </div>
            </div>
             </div>
             
          {/* ‡πî. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô */}
          <div className="mb-8">
            <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
              ‡πî. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
            </h3>
            
            {/* ‡πî.‡πë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô */}
            <div className="mb-6">
              <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                ‡πî.‡πë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
              </h4>
               <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.emergencyContact || ''}
                       onChange={(e) => onInputChange?.('emergencyContact', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.emergencyContact || '-'}
                     </div>
                   )}
                 </div>
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.emergencyPhone || ''}
                       onChange={(e) => onInputChange?.('emergencyPhone', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.emergencyPhone || '-'}
                     </div>
                   )}
                 </div>
                 <div className="space-y-2">
                   <label className="text-sm font-medium text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.emergencyRelationship || ''}
                       onChange={(e) => onInputChange?.('emergencyRelationship', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                     <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                       {application.emergencyRelationship || '-'}
                     </div>
                   )}
                 </div>
               </div>
             </div>
             
            {/* ‡πî.‡πí ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô */}
            <div className="mb-6">
              <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                ‡πî.‡πí ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyAddress?.houseNumber || ''}
                      onChange={(e) => onInputChange?.('emergencyAddress.houseNumber', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyAddress?.houseNumber || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyAddress?.villageNumber || ''}
                      onChange={(e) => onInputChange?.('emergencyAddress.villageNumber', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyAddress?.villageNumber || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyAddress?.alley || ''}
                      onChange={(e) => onInputChange?.('emergencyAddress.alley', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyAddress?.alley || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ñ‡∏ô‡∏ô</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyAddress?.road || ''}
                      onChange={(e) => onInputChange?.('emergencyAddress.road', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyAddress?.road || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyAddress?.subDistrict || ''}
                      onChange={(e) => onInputChange?.('emergencyAddress.subDistrict', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyAddress?.subDistrict || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyAddress?.district || ''}
                      onChange={(e) => onInputChange?.('emergencyAddress.district', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyAddress?.district || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyAddress?.province || ''}
                      onChange={(e) => onInputChange?.('emergencyAddress.province', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyAddress?.province || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyAddress?.postalCode || ''}
                      onChange={(e) => onInputChange?.('emergencyAddress.postalCode', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyAddress?.postalCode || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyAddress?.phone || ''}
                      onChange={(e) => onInputChange?.('emergencyAddress.phone', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyAddress?.phone || '-'}
                    </div>
                  )}
                </div>
              </div>
             </div>
             
            {/* ‡πî.‡πì ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô */}
            <div className="mb-6">
              <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                ‡πî.‡πì ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyWorkplace?.name || ''}
                      onChange={(e) => onInputChange?.('emergencyWorkplace.name', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyWorkplace?.name || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyWorkplace?.district || ''}
                      onChange={(e) => onInputChange?.('emergencyWorkplace.district', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyWorkplace?.district || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyWorkplace?.province || ''}
                      onChange={(e) => onInputChange?.('emergencyWorkplace.province', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyWorkplace?.province || '-'}
                    </div>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={application.emergencyWorkplace?.phone || ''}
                      onChange={(e) => onInputChange?.('emergencyWorkplace.phone', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  ) : (
                    <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                      {application.emergencyWorkplace?.phone || '-'}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </CardBody>
      </Card>

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™ */}
      {(application.spouseInfo?.firstName || application.spouseInfo?.lastName) && (
        <Card className="shadow-xl border-0">
          <CardHeader className="bg-gradient-to-r from-pink-500 via-rose-500 to-pink-600 text-white relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-pink-400/20 to-rose-400/20"></div>
            <div className="relative flex items-center gap-3">
              <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                <UserIcon className="w-6 h-6" />
              </div>
              <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™</h2>
            </div>
          </CardHeader>
          <CardBody className="p-8">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠</label>
                {isEditing ? (
                  <input
                    type="text"
                    value={application.spouseInfo?.firstName || ''}
                    onChange={(e) => onInputChange?.('spouseInfo.firstName', e.target.value)}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                ) : (
                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                    {application.spouseInfo?.firstName || '-'}
                  </div>
                )}
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                {isEditing ? (
                  <input
                    type="text"
                    value={application.spouseInfo?.lastName || ''}
                    onChange={(e) => onInputChange?.('spouseInfo.lastName', e.target.value)}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                ) : (
                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                    {application.spouseInfo?.lastName || '-'}
                  </div>
                )}
              </div>
            </div>
          </CardBody>
        </Card>
      )}

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ */}
      {(application.medicalRights?.hasUniversalHealthcare || application.medicalRights?.hasSocialSecurity || application.medicalRights?.hasCivilServantRights) && (
        <Card className="shadow-xl border-0">
          <CardHeader className="bg-gradient-to-r from-teal-500 via-cyan-500 to-teal-600 text-white relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-teal-400/20 to-cyan-400/20"></div>
            <div className="relative flex items-center gap-3">
              <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                <DocumentTextIcon className="w-6 h-6" />
             </div>
              <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤</h2>
           </div>
          </CardHeader>
          <CardBody className="p-8">
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤</label>
                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                    {application.medicalRights?.hasUniversalHealthcare ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
                  </div>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</label>
                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                    {application.medicalRights?.universalHealthcareHospital || '-'}
                  </div>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°</label>
                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                    {application.medicalRights?.hasSocialSecurity ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
                  </div>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°</label>
                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                    {application.medicalRights?.socialSecurityHospital || '-'}
                  </div>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£</label>
                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                    {application.medicalRights?.hasCivilServantRights ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
                  </div>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ</label>
                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                    {application.medicalRights?.otherRights || '-'}
                  </div>
                </div>
              </div>
            </div>
          </CardBody>
        </Card>
      )}

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê */}
      {application.previousGovernmentService && application.previousGovernmentService.length > 0 && (
        <Card className="shadow-xl border-0">
          <CardHeader className="bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-600 text-white relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-indigo-400/20 to-purple-400/20"></div>
            <div className="relative flex items-center gap-3">
              <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                <BriefcaseIcon className="w-6 h-6" />
              </div>
              <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê</h2>
            </div>
          </CardHeader>
          <CardBody className="p-8">
            <div className="space-y-6">
              {application.previousGovernmentService.map((gov, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <h4 className="text-md font-semibold text-gray-700 mb-4">‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê {index + 1}</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</label>
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {gov.position || '-'}
                      </div>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô</label>
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {gov.department || '-'}
                      </div>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å</label>
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {gov.reason || '-'}
                      </div>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å</label>
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {formatDate(gov.date || '') || '-'}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardBody>
        </Card>
      )}

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢ */}
      {application.multipleEmployers && application.multipleEmployers.length > 0 && (
        <Card className="shadow-xl border-0">
          <CardHeader className="bg-gradient-to-r from-amber-500 via-yellow-500 to-amber-600 text-white relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-amber-400/20 to-yellow-400/20"></div>
            <div className="relative flex items-center gap-3">
              <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                <BriefcaseIcon className="w-6 h-6" />
              </div>
              <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢</h2>
            </div>
          </CardHeader>
          <CardBody className="p-8">
            <div className="space-y-4">
              {application.multipleEmployers.map((employer, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                    {employer || '-'}
                  </div>
                </div>
              ))}
           </div>
        </CardBody>
      </Card>
      )}

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ */}
      {application.education && application.education.length > 0 && (
      <Card className="shadow-xl border-0">
        <CardHeader className="bg-gradient-to-r from-green-500 via-emerald-500 to-green-600 text-white relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-green-400/20 to-emerald-400/20"></div>
          <div className="relative flex items-center gap-3">
            <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
              <AcademicCapIcon className="w-6 h-6" />
            </div>
            <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h2>
          </div>
        </CardHeader>
        <CardBody className="p-8">
            <div className="space-y-6">
              {application.education.map((edu, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <h4 className="text-md font-semibold text-gray-700 mb-4">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ {index + 1}</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</label>
                      {isEditing ? (
                        <select
                          value={edu.level || ''}
                          onChange={(e) => onInputChange?.(`education[${index}].level`, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
                          <option value="‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤">‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
                          <option value="‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏ï‡πâ‡∏ô">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏ï‡πâ‡∏ô</option>
                          <option value="‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢</option>
                          <option value="‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û (‡∏õ‡∏ß‡∏ä.)">‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û (‡∏õ‡∏ß‡∏ä.)</option>
                          <option value="‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (‡∏õ‡∏ß‡∏™.)">‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (‡∏õ‡∏ß‡∏™.)</option>
                          <option value="‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ">‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ</option>
                          <option value="‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó">‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó</option>
                          <option value="‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å">‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å</option>
                        </select>
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {edu.level || '-'}
                     </div>
                      )}
                     </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô</label>
                      {isEditing ? (
                        <input
                          type="text"
                          value={edu.institution || edu.school || ''}
                          onChange={(e) => onInputChange?.(`education[${index}].institution`, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {edu.institution || edu.school || '-'}
                     </div>
                      )}
                     </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤</label>
                      {isEditing ? (
                        <input
                          type="text"
                          value={edu.major || ''}
                          onChange={(e) => onInputChange?.(`education[${index}].major`, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {edu.major || '-'}
                     </div>
                      )}
                   </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö</label>
                      {isEditing ? (
                        <input
                          type="text"
                          value={edu.year || edu.graduationYear || ''}
                          onChange={(e) => onInputChange?.(`education[${index}].year`, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö (‡πÄ‡∏ä‡πà‡∏ô 2565)"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {edu.year || edu.graduationYear || '-'}
                </div>
                      )}
            </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</label>
                      {isEditing ? (
                        <input
                          type="text"
                          value={edu.gpa || ''}
                          onChange={(e) => onInputChange?.(`education[${index}].gpa`, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô 3.50)"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {edu.gpa || '-'}
            </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
        </CardBody>
      </Card>
      )}

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
      {application.workExperience && application.workExperience.length > 0 && (
      <Card className="shadow-xl border-0">
          <CardHeader className="bg-gradient-to-r from-purple-500 via-violet-500 to-purple-600 text-white relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-purple-400/20 to-violet-400/20"></div>
          <div className="relative flex items-center gap-3">
            <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
              <BriefcaseIcon className="w-6 h-6" />
            </div>
              <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</h2>
          </div>
        </CardHeader>
        <CardBody className="p-8">
            <div className="space-y-6">
              {isEditing && (
                <div className="flex justify-end mb-4">
                  <Button
                    color="primary"
                    size="sm"
                    onClick={() => {
                      const newWork = {
                        position: '',
                        company: '',
                        startDate: '',
                        endDate: '',
                        salary: '',
                        reason: ''
                      };
                      onInputChange?.('workExperience', [...(application.workExperience || []), newWork]);
                    }}
                    className="bg-purple-600 hover:bg-purple-700 text-white"
                  >
                    + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                  </Button>
                </div>
              )}
              {application.workExperience.map((work, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex justify-between items-center mb-4">
                    <h4 className="text-md font-semibold text-gray-700">‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô {index + 1}</h4>
                    {isEditing && application.workExperience.length > 1 && (
                      <Button
                        color="danger"
                        size="sm"
                        onClick={() => {
                          const updatedWorkExperience = application.workExperience.filter((_, i) => i !== index);
                          onInputChange?.('workExperience', updatedWorkExperience);
                        }}
                        className="bg-red-500 hover:bg-red-600 text-white"
                      >
                        ‡∏•‡∏ö
                      </Button>
                    )}
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</label>
                      {isEditing ? (
                        <input
                          type="text"
                          value={work.position || ''}
                          onChange={(e) => onInputChange?.(`workExperience[${index}].position`, e.target.value)}
                          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {work.position || '-'}
                      </div>
                      )}
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</label>
                      {isEditing ? (
                        <input
                          type="text"
                          value={work.company || ''}
                          onChange={(e) => onInputChange?.(`workExperience[${index}].company`, e.target.value)}
                          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {work.company || '-'}
                      </div>
                      )}
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô</label>
                      {isEditing ? (
                        <input
                          type="text"
                          value={formatDateForFlatpickr(work.startDate || '')}
                          onChange={(e) => onInputChange?.(`workExperience[${index}].startDate`, e.target.value)}
                          placeholder="dd/mm/yyyy"
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {formatDate(work.startDate || '') || '-'}
                      </div>
                      )}
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                      {isEditing ? (
                        <input
                          type="text"
                          value={formatDateForFlatpickr(work.endDate || '')}
                          onChange={(e) => onInputChange?.(`workExperience[${index}].endDate`, e.target.value)}
                          placeholder="dd/mm/yyyy"
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {formatDate(work.endDate || '') || '-'}
                      </div>
                      )}
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</label>
                      {isEditing ? (
                        <input
                          type="text"
                          value={work.salary || ''}
                          onChange={(e) => onInputChange?.(`workExperience[${index}].salary`, e.target.value)}
                          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {work.salary || '-'}
                      </div>
                      )}
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å</label>
                      {isEditing ? (
                        <textarea
                          value={work.reason || ''}
                          onChange={(e) => onInputChange?.(`workExperience[${index}].reason`, e.target.value)}
                          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å"
                          rows={3}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      ) : (
                      <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                        {work.reason || '-'}
                      </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardBody>
        </Card>
      )}

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô */}
      <Card className="shadow-xl border-0">
        <CardHeader className="bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 text-white relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-orange-400/20 to-amber-400/20"></div>
          <div className="relative flex items-center gap-3">
            <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
              <DocumentTextIcon className="w-6 h-6" />
            </div>
            <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô</h2>
          </div>
        </CardHeader>
        <CardBody className="p-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
             <div className="space-y-2">
               <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={resolveAppliedPosition(application, true) || ''}
                       onChange={(e) => onInputChange?.('appliedPosition', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                 <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                   {resolveAppliedPosition(application, true) || '-'}
                 </div>
                       )}
                     </div>
             {/* <div className="space-y-2">
               <label className="text-sm font-medium text-gray-700">‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.expectedSalary || ''}
                       onChange={(e) => onInputChange?.('expectedSalary', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                 <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                   {application.expectedSalary || '-'}
                     </div>
               )}
             </div> */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô</label>
              {isEditing ? (
                <input
                  ref={availableDateRef}
                  type="text"
                  value={formatDateForFlatpickr(application.availableDate || '')}
                  onChange={(e) => onInputChange?.('availableDate', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="dd/mm/yyyy"
                />
              ) : (
              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                {formatDate(application.availableDate || '') || '-'}
              </div>
              )}
            </div>
            {/* <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">‡∏ù‡πà‡∏≤‡∏¢</label>
              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                {application.department || '-'}
              </div>
            </div> */}
            {/* <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô</label>
              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                {application.unit || '-'}
              </div>
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</label>
              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                {application.currentWork ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}
              </div>
            </div> */}
                     </div>
                     
          {/* ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ */}
          <div className="mt-8 space-y-4">
            <h4 className="text-md font-semibold text-gray-700">‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ</h4>
             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡∏ó‡∏±‡∏Å‡∏©‡∏∞</label>
                   {isEditing ? (
                     <textarea
                       value={application.skills || ''}
                       onChange={(e) => onInputChange?.('skills', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô"
                       rows={3}
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                     />
                   ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {application.skills || '-'}
                   </div>
                 )}
               </div>
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡∏†‡∏≤‡∏©‡∏≤</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.languages || ''}
                       onChange={(e) => onInputChange?.('languages', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {application.languages || '-'}
                   </div>
                 )}
               </div>
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.computerSkills || ''}
                       onChange={(e) => onInputChange?.('computerSkills', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {application.computerSkills || '-'}
                   </div>
                 )}
               </div>
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.certificates || ''}
                       onChange={(e) => onInputChange?.('certificates', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {application.certificates || '-'}
                   </div>
                 )}
               </div>
             </div>
                     </div>
                     
          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */}
          {/* <div className="mt-8 space-y-4">
            <h4 className="text-md font-semibold text-gray-700">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á</h4>
             <div className="space-y-2">
               <label className="text-sm font-medium text-gray-700">‡∏ú‡∏π‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á</label>
                   {isEditing ? (
                     <textarea
                       value={application.references || ''}
                       onChange={(e) => onInputChange?.('references', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"
                       rows={3}
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                     />
                   ) : (
                 <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                   {application.references || '-'}
                 </div>
               )}
             </div>
                   </div> */}
                  
          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£ */}
          {/* <div className="mt-8 space-y-4">
            <h4 className="text-md font-semibold text-gray-700">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h4>
             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</label>
                 {isEditing ? (
                   <input
                   ref={applicationDateRef}
                   type="text"
                   value={formatDateForFlatpickr(application.applicationDate || '')}
                     onChange={(e) => onInputChange?.('applicationDate', e.target.value)}
                     className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                   placeholder="dd/mm/yyyy"
                   />
                 ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {formatDate(application.applicationDate || '') || '-'}
                   </div>
                 )}
               </div>
               <div className="space-y-2">
                 <label className="text-sm font-medium text-gray-700">‡∏•‡∏≤‡∏¢‡∏°‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£</label>
                   {isEditing ? (
                     <input
                       type="text"
                       value={application.applicantSignature || ''}
                       onChange={(e) => onInputChange?.('applicantSignature', e.target.value)}
                       placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏≤‡∏¢‡∏°‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£"
                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                     />
                   ) : (
                   <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                     {application.applicantSignature || '-'}
                   </div>
                 )}
               </div>
             </div>
          </div> */}
        </CardBody>
      </Card>

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
      <Card className="shadow-xl border-0">
        <CardHeader className="bg-gradient-to-r from-gray-500 via-slate-500 to-gray-600 text-white relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-gray-400/20 to-slate-400/20"></div>
          <div className="relative flex items-center gap-3">
            <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
              <DocumentTextIcon className="w-6 h-6" />
            </div>
            <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h2>
          </div>
        </CardHeader>
        <CardBody className="p-8">
          {/* ‡πî. ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö */}
          <div className="mb-6">
            <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
              ‡πî. ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô */}
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                <div className="mb-2">
                  <span className="inline-block px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full">
                    ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                  </span>
                </div>
                <h4 className="font-semibold text-gray-700 mb-2">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</h4>
                <p className="text-sm text-gray-500 mb-3">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</p>
                <div className="space-y-2">
                  {application.documents?.idCard ? (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <DocumentTextIcon className="w-5 h-5 text-green-600" />
                          <div className="flex flex-col">
                            <span className="text-sm text-green-700 font-medium">
                              {application.documents.idCard.split('/').pop() || '‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'}
                            </span>
                          </div>
                        </div>
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                        </span>
                      </div>
                      <div className="flex gap-2">
                <Button
                          color="secondary"
                          variant="bordered"
                  size="sm"
                          className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={() => window.open(application.documents?.idCard, '_blank')}
                >
                          ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                </Button>
                        <Button
                          color="danger"
                          variant="bordered"
                          size="sm"
                          className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={async () => {
                            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                              try {
                                const response = await fetch(`/api/resume-documents`, {
                                  method: 'DELETE',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    resumeDepositId: application.id,
                                    documentType: 'idCard'
                                  }),
                                });

                                if (response.ok) {
                                  alert('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                                  window.location.reload();
                                } else {
                                  try {
                                    const contentType = response.headers.get('content-type');
                                    if (contentType && contentType.includes('application/json')) {
                                      const errorData = await response.json();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
                                    } else {
                                      const errorText = await response.text();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorText || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'} (Status: ${response.status})`);
                                    }
                                  } catch (parseError) {
                                    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ (Status: ${response.status})`);
                                  }
                                }
                              } catch (error) {
                                console.error('Error deleting file:', error);
                                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå');
                              }
                            }
                          }}
                        >
                          ‡∏•‡∏ö
                        </Button>
                    </div>
                    </div>
                  ) : (
                    <div className="p-3 bg-gray-50 border border-gray-200 rounded-lg">
                      <div className="text-center">
                        <span className="text-sm text-gray-500 block mb-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</span>
                        <div className="flex flex-col gap-2">
                          <input
                            type="file"
                            id={`idCard-${application.id}`}
                            accept=".pdf,.jpg,.jpeg,.png"
                            onChange={(e) => onFileSelect?.(e, 'idCard', application.id)}
                            className="hidden"
                          />
                          <Button
                            color="primary"
                            variant="bordered"
                            size="sm"
                            startContent={<CloudArrowUpIcon className="w-4 h-4" />}
                            onClick={() => document.getElementById(`idCard-${application.id}`)?.click()}
                            disabled={uploadingFiles[`${application.id}-idCard`]}
                            className="bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                          >
                            {uploadingFiles[`${application.id}-idCard`] ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'}
                          </Button>
                        </div>
                      </div>
                  </div>
                )}
                </div>
              </div>

              {/* ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô */}
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                <div className="mb-2">
                  <span className="inline-block px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full">
                    ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                  </span>
                </div>
                <h4 className="font-semibold text-gray-700 mb-2">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô</h4>
                <p className="text-sm text-gray-500 mb-3">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô</p>
                <div className="space-y-2">
                  {application.documents?.houseRegistration ? (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <DocumentTextIcon className="w-5 h-5 text-green-600" />
                          <div className="flex flex-col">
                            <span className="text-sm text-green-700 font-medium">
                              {application.documents.houseRegistration.split('/').pop() || '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô'}
                            </span>
                          </div>
                        </div>
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                        </span>
                      </div>
                      <div className="flex gap-2">
                <Button
                          color="secondary"
                          variant="bordered"
                  size="sm"
                          className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={() => window.open(application.documents?.houseRegistration, '_blank')}
                >
                          ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                </Button>
                        <Button
                          color="danger"
                          variant="bordered"
                          size="sm"
                          className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={async () => {
                            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                              try {
                                const response = await fetch(`/api/resume-documents`, {
                                  method: 'DELETE',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    resumeDepositId: application.id,
                                    documentType: 'idCard'
                                  }),
                                });

                                if (response.ok) {
                                  alert('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                                  window.location.reload();
                                } else {
                                  try {
                                    const contentType = response.headers.get('content-type');
                                    if (contentType && contentType.includes('application/json')) {
                                      const errorData = await response.json();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
                                    } else {
                                      const errorText = await response.text();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorText || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'} (Status: ${response.status})`);
                                    }
                                  } catch (parseError) {
                                    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ (Status: ${response.status})`);
                                  }
                                }
                              } catch (error) {
                                console.error('Error deleting file:', error);
                                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå');
                              }
                            }
                          }}
                        >
                          ‡∏•‡∏ö
                        </Button>
                    </div>
                    </div>
                  ) : (
                    <div className="p-3 bg-gray-50 border border-gray-200 rounded-lg">
                      <div className="text-center">
                        <span className="text-sm text-gray-500 block mb-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</span>
                        <div className="flex flex-col gap-2">
                          <input
                            type="file"
                            id={`houseRegistration-${application.id}`}
                            accept=".pdf,.jpg,.jpeg,.png"
                            onChange={(e) => onFileSelect?.(e, 'houseRegistration', application.id)}
                            className="hidden"
                          />
                          <Button
                            color="primary"
                            variant="bordered"
                            size="sm"
                            startContent={<CloudArrowUpIcon className="w-4 h-4" />}
                            onClick={() => document.getElementById(`houseRegistration-${application.id}`)?.click()}
                            disabled={uploadingFiles[`${application.id}-houseRegistration`]}
                            className="bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                          >
                            {uploadingFiles[`${application.id}-houseRegistration`] ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'}
                          </Button>
                        </div>
                      </div>
                  </div>
                )}
                </div>
              </div>

              {/* ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ */}
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                <div className="mb-2">
                  <span className="inline-block px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">
                    ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                  </span>
                </div>
                <h4 className="font-semibold text-gray-700 mb-2">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h4>
                <p className="text-sm text-gray-500 mb-3">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</p>
                <div className="space-y-2">
                  {application.documents?.educationCertificate ? (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <DocumentTextIcon className="w-5 h-5 text-green-600" />
                          <div className="flex flex-col">
                            <span className="text-sm text-green-700 font-medium">
                              {application.documents.educationCertificate.split('/').pop() || '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'}
                            </span>
                          </div>
                        </div>
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                        </span>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          color="secondary"
                          variant="bordered"
                          size="sm"
                          className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={() => window.open(application.documents?.educationCertificate, '_blank')}
                        >
                          ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        </Button>
                        <Button
                          color="danger"
                          variant="bordered"
                          size="sm"
                          className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={async () => {
                            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                              try {
                                const response = await fetch(`/api/resume-documents`, {
                                  method: 'DELETE',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    resumeDepositId: application.id,
                                    documentType: 'idCard'
                                  }),
                                });

                                if (response.ok) {
                                  alert('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                                  window.location.reload();
                                } else {
                                  try {
                                    const contentType = response.headers.get('content-type');
                                    if (contentType && contentType.includes('application/json')) {
                                      const errorData = await response.json();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
                                    } else {
                                      const errorText = await response.text();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorText || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'} (Status: ${response.status})`);
                                    }
                                  } catch (parseError) {
                                    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ (Status: ${response.status})`);
                                  }
                                }
                              } catch (error) {
                                console.error('Error deleting file:', error);
                                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå');
                              }
                            }
                          }}
                        >
                          ‡∏•‡∏ö
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <div className="p-3 bg-gray-50 border border-gray-200 rounded-lg">
                      <div className="text-center">
                        <span className="text-sm text-gray-500 block mb-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</span>
                        <div className="flex flex-col gap-2">
                          <input
                            type="file"
                            id={`educationCertificate-${application.id}`}
                            accept=".pdf,.jpg,.jpeg,.png"
                            onChange={(e) => onFileSelect?.(e, 'educationCertificate', application.id)}
                            className="hidden"
                          />
                          <Button
                            color="primary"
                            variant="bordered"
                            size="sm"
                            startContent={<CloudArrowUpIcon className="w-4 h-4" />}
                            onClick={() => document.getElementById(`educationCertificate-${application.id}`)?.click()}
                            disabled={uploadingFiles[`${application.id}-educationCertificate`]}
                            className="bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                          >
                            {uploadingFiles[`${application.id}-educationCertificate`] ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'}
                          </Button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏´‡∏≤‡∏£ */}
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                <div className="mb-2">
                  <span className="inline-block px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">
                    ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                  </span>
                </div>
                <h4 className="font-semibold text-gray-700 mb-2">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏´‡∏≤‡∏£</h4>
                <p className="text-sm text-gray-500 mb-3">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏´‡∏≤‡∏£</p>
                <div className="space-y-2">
                  {application.documents?.militaryCertificate ? (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <DocumentTextIcon className="w-5 h-5 text-green-600" />
                          <div className="flex flex-col">
                            <span className="text-sm text-green-700 font-medium">
                              {application.documents.militaryCertificate.split('/').pop() || '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏´‡∏≤‡∏£'}
                            </span>
                          </div>
                        </div>
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                        </span>
                      </div>
                      <div className="flex gap-2">
                <Button
                          color="secondary"
                          variant="bordered"
                  size="sm"
                          className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={() => window.open(application.documents?.militaryCertificate, '_blank')}
                >
                          ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                </Button>
                        <Button
                          color="danger"
                          variant="bordered"
                          size="sm"
                          className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={async () => {
                            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                              try {
                                const response = await fetch(`/api/resume-documents`, {
                                  method: 'DELETE',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    resumeDepositId: application.id,
                                    documentType: 'idCard'
                                  }),
                                });

                                if (response.ok) {
                                  alert('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                                  window.location.reload();
                                } else {
                                  try {
                                    const contentType = response.headers.get('content-type');
                                    if (contentType && contentType.includes('application/json')) {
                                      const errorData = await response.json();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
                                    } else {
                                      const errorText = await response.text();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorText || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'} (Status: ${response.status})`);
                                    }
                                  } catch (parseError) {
                                    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ (Status: ${response.status})`);
                                  }
                                }
                              } catch (error) {
                                console.error('Error deleting file:', error);
                                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå');
                              }
                            }
                          }}
                        >
                          ‡∏•‡∏ö
                        </Button>
                    </div>
                    </div>
                  ) : (
                    <div className="p-3 bg-gray-50 border border-gray-200 rounded-lg">
                      <div className="text-center">
                        <span className="text-sm text-gray-500 block mb-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</span>
                        <div className="flex flex-col gap-2">
                          <input
                            type="file"
                            id={`militaryCertificate-${application.id}`}
                            accept=".pdf,.jpg,.jpeg,.png"
                            onChange={(e) => onFileSelect?.(e, 'militaryCertificate', application.id)}
                            className="hidden"
                          />
                          <Button
                            color="primary"
                            variant="bordered"
                            size="sm"
                            startContent={<CloudArrowUpIcon className="w-4 h-4" />}
                            onClick={() => document.getElementById(`militaryCertificate-${application.id}`)?.click()}
                            disabled={uploadingFiles[`${application.id}-militaryCertificate`]}
                            className="bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                          >
                            {uploadingFiles[`${application.id}-militaryCertificate`] ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'}
                          </Button>
                        </div>
                      </div>
                  </div>
                )}
                </div>
              </div>

              {/* ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå */}
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                <div className="mb-2">
                  <span className="inline-block px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">
                    ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                  </span>
                </div>
                <h4 className="font-semibold text-gray-700 mb-2">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå</h4>
                <p className="text-sm text-gray-500 mb-3">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå</p>
                <div className="space-y-2">
                  {application.documents?.medicalCertificate ? (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <DocumentTextIcon className="w-5 h-5 text-green-600" />
                          <div className="flex flex-col">
                            <span className="text-sm text-green-700 font-medium">
                              {application.documents.medicalCertificate.split('/').pop() || '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå'}
                            </span>
                          </div>
                        </div>
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                        </span>
                      </div>
                      <div className="flex gap-2">
                <Button
                          color="secondary"
                          variant="bordered"
                  size="sm"
                          className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={() => window.open(application.documents?.medicalCertificate, '_blank')}
                >
                          ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                </Button>
                        <Button
                          color="danger"
                          variant="bordered"
                          size="sm"
                          className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={async () => {
                            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                              try {
                                const response = await fetch(`/api/resume-documents`, {
                                  method: 'DELETE',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    resumeDepositId: application.id,
                                    documentType: 'idCard'
                                  }),
                                });

                                if (response.ok) {
                                  alert('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                                  window.location.reload();
                                } else {
                                  try {
                                    const contentType = response.headers.get('content-type');
                                    if (contentType && contentType.includes('application/json')) {
                                      const errorData = await response.json();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
                                    } else {
                                      const errorText = await response.text();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorText || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'} (Status: ${response.status})`);
                                    }
                                  } catch (parseError) {
                                    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ (Status: ${response.status})`);
                                  }
                                }
                              } catch (error) {
                                console.error('Error deleting file:', error);
                                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå');
                              }
                            }
                          }}
                        >
                          ‡∏•‡∏ö
                        </Button>
                    </div>
                    </div>
                  ) : (
                    <div className="p-3 bg-gray-50 border border-gray-200 rounded-lg">
                      <div className="text-center">
                        <span className="text-sm text-gray-500 block mb-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</span>
                        <div className="flex flex-col gap-2">
                          <input
                            type="file"
                            id={`medicalCertificate-${application.id}`}
                            accept=".pdf,.jpg,.jpeg,.png"
                            onChange={(e) => onFileSelect?.(e, 'medicalCertificate', application.id)}
                            className="hidden"
                          />
                          <Button
                            color="primary"
                            variant="bordered"
                            size="sm"
                            startContent={<CloudArrowUpIcon className="w-4 h-4" />}
                            onClick={() => document.getElementById(`medicalCertificate-${application.id}`)?.click()}
                            disabled={uploadingFiles[`${application.id}-medicalCertificate`]}
                            className="bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                          >
                            {uploadingFiles[`${application.id}-medicalCertificate`] ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'}
                          </Button>
                        </div>
                      </div>
                  </div>
                )}
            </div>
          </div>

              {/* ‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà */}
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                <div className="mb-2">
                  <span className="inline-block px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">
                    ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                  </span>
                </div>
                <h4 className="font-semibold text-gray-700 mb-2">‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà</h4>
                <p className="text-sm text-gray-500 mb-3">‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà</p>
                <div className="space-y-2">
                  {application.documents?.drivingLicense ? (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <DocumentTextIcon className="w-5 h-5 text-green-600" />
                          <div className="flex flex-col">
                            <span className="text-sm text-green-700 font-medium">
                              {application.documents.drivingLicense.split('/').pop() || '‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà'}
                            </span>
                          </div>
                        </div>
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                        </span>
                    </div>
                    <div className="flex gap-2">
                      <Button 
                          color="secondary"
                          variant="bordered"
                        size="sm" 
                          className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={() => window.open(application.documents?.drivingLicense, '_blank')}
                        >
                          ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                      </Button>
                      <Button 
                          color="danger"
                          variant="bordered"
                        size="sm" 
                          className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={async () => {
                            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                              try {
                                const response = await fetch(`/api/resume-documents`, {
                                  method: 'DELETE',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    resumeDepositId: application.id,
                                    documentType: 'idCard'
                                  }),
                                });

                                if (response.ok) {
                                  alert('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                                  window.location.reload();
                                } else {
                                  try {
                                    const contentType = response.headers.get('content-type');
                                    if (contentType && contentType.includes('application/json')) {
                                      const errorData = await response.json();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
                                    } else {
                                      const errorText = await response.text();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorText || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'} (Status: ${response.status})`);
                                    }
                                  } catch (parseError) {
                                    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ (Status: ${response.status})`);
                                  }
                                }
                              } catch (error) {
                                console.error('Error deleting file:', error);
                                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå');
                              }
                            }
                          }}
                        >
                          ‡∏•‡∏ö
                      </Button>
                    </div>
                  </div>
                  ) : (
                    <div className="p-3 bg-gray-50 border border-gray-200 rounded-lg">
                      <div className="text-center">
                        <span className="text-sm text-gray-500 block mb-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</span>
                        <div className="flex flex-col gap-2">
                          <input
                            type="file"
                            id={`drivingLicense-${application.id}`}
                            accept=".pdf,.jpg,.jpeg,.png"
                            onChange={(e) => onFileSelect?.(e, 'drivingLicense', application.id)}
                            className="hidden"
                          />
                          <Button
                            color="primary"
                            variant="bordered"
                            size="sm"
                            startContent={<CloudArrowUpIcon className="w-4 h-4" />}
                            onClick={() => document.getElementById(`drivingLicense-${application.id}`)?.click()}
                            disabled={uploadingFiles[`${application.id}-drivingLicense`]}
                            className="bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                          >
                            {uploadingFiles[`${application.id}-drivingLicense`] ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'}
                          </Button>
                        </div>
                      </div>
            </div>
          )}
                </div>
              </div>

              {/* ‡πÉ‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ */}
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                <div className="mb-2">
                  <span className="inline-block px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">
                    ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                  </span>
                </div>
                <h4 className="font-semibold text-gray-700 mb-2">‡πÉ‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠</h4>
                <p className="text-sm text-gray-500 mb-3">‡πÉ‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠</p>
                <div className="space-y-2">
                  {application.documents?.nameChangeCertificate ? (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <DocumentTextIcon className="w-5 h-5 text-green-600" />
                          <div className="flex flex-col">
                            <span className="text-sm text-green-700 font-medium">
                              {application.documents.nameChangeCertificate.split('/').pop() || '‡πÉ‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠'}
                            </span>
                          </div>
                        </div>
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                        </span>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          color="secondary"
                          variant="bordered"
                          size="sm"
                          className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={() => window.open(application.documents?.nameChangeCertificate, '_blank')}
                        >
                          ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        </Button>
              <Button
                          color="danger"
                          variant="bordered"
                          size="sm"
                          className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                          onClick={async () => {
                            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                              try {
                                const response = await fetch(`/api/resume-documents`, {
                                  method: 'DELETE',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    resumeDepositId: application.id,
                                    documentType: 'idCard'
                                  }),
                                });

                                if (response.ok) {
                                  alert('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                                  window.location.reload();
                                } else {
                                  try {
                                    const contentType = response.headers.get('content-type');
                                    if (contentType && contentType.includes('application/json')) {
                                      const errorData = await response.json();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
                                    } else {
                                      const errorText = await response.text();
                                      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorText || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'} (Status: ${response.status})`);
                                    }
                                  } catch (parseError) {
                                    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ (Status: ${response.status})`);
                                  }
                                }
                              } catch (error) {
                                console.error('Error deleting file:', error);
                                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå');
                              }
                            }
                          }}
                        >
                          ‡∏•‡∏ö
              </Button>
            </div>
                    </div>
                  ) : (
                    <div className="p-3 bg-gray-50 border border-gray-200 rounded-lg">
                      <div className="text-center">
                        <span className="text-sm text-gray-500 block mb-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</span>
                        <div className="flex flex-col gap-2">
                          <input
                            type="file"
                            id={`nameChangeCertificate-${application.id}`}
                            accept=".pdf,.jpg,.jpeg,.png"
                            onChange={(e) => onFileSelect?.(e, 'nameChangeCertificate', application.id)}
                            className="hidden"
                          />
                          <Button
                            color="primary"
                            variant="bordered"
                            size="sm"
                            startContent={<CloudArrowUpIcon className="w-4 h-4" />}
                            onClick={() => document.getElementById(`nameChangeCertificate-${application.id}`)?.click()}
                            disabled={uploadingFiles[`${application.id}-nameChangeCertificate`]}
                            className="bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                          >
                            {uploadingFiles[`${application.id}-nameChangeCertificate`] ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'}
                          </Button>
                        </div>
                      </div>
              </div>
            )}
                </div>
              </div>
            </div>
          </div>
        </CardBody>
      </Card>
    </div>
  );
};

export default function ApplicationData() {
  const { data: session } = useSession();
  const [applications, setApplications] = useState<ApplicationData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [statusUpdateNotification, setStatusUpdateNotification] = useState<string | null>(null);
  const [newApplicationNotification, setNewApplicationNotification] = useState<string | null>(null);
  
  // Upload states
  const [uploadingFiles, setUploadingFiles] = useState<{[key: string]: boolean}>({});
  const [uploadProgress, setUploadProgress] = useState<{[key: string]: number}>({});
  const searchParams = useSearchParams();
  const router = useRouter();
  const departmentName = searchParams.get('department');
  const resumeUserIdParam = searchParams.get('resumeUserId');
  const userIdParam = searchParams.get('userId');
  const adminParam = searchParams.get('admin');
  const limitParam = searchParams.get('limit');
  
  // Modal states
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [selectedApplication, setSelectedApplication] = useState<ApplicationData | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editingApplication, setEditingApplication] = useState<ApplicationData | null>(null);


  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô
  const addNewApplication = async (applicationData: ApplicationData) => {
    try {
      console.log('üÜï Adding new application from different department:', applicationData);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô state
      setApplications(prev => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const exists = prev.some(app => app.id === applicationData.id);
        if (exists) {
          console.log('‚ö†Ô∏è Application already exists, skipping...');
          return prev;
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        const newApplications = [applicationData, ...prev];
        console.log('‚úÖ New application added to state');
        return newApplications;
      });
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      setNewApplicationNotification(`‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢ ${applicationData.department} - ${applicationData.firstName} ${applicationData.lastName}`);
      
      // ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        setNewApplicationNotification(null);
      }, 5000);
      
    } catch (error) {
      console.error('‚ùå Error adding new application:', error);
    }
  };

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô percent-encoded
  const resolveDepartment = (appLike: any): string => {
    const candidates = [
      appLike?.department,
      appLike?.staff_department,
      appLike?.departmentName,
      appLike?.department_name,
      appLike?.department?.name,
      // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å query string ‡∏´‡∏≤‡∏Å‡∏°‡∏µ (‡πÄ‡∏ä‡πà‡∏ô‡∏î‡∏π‡∏ï‡∏≤‡∏°‡∏ù‡πà‡∏≤‡∏¢)
      typeof departmentName === 'string' && departmentName ? departmentName : null,
    ].filter(Boolean) as string[];

    if (candidates.length === 0) return '';

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'null' ‡∏´‡∏£‡∏∑‡∏≠ 'undefined'
    const raw = candidates.find((v) => {
      if (typeof v !== 'string') return false;
      const t = v.trim();
      return t.length > 0 && t.toLowerCase() !== 'null' && t.toLowerCase() !== 'undefined';
    }) || '';

    if (!raw) return '';

    // ‡πÅ‡∏Å‡πâ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ '+' ‡πÅ‡∏ó‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ URL
    const normalized = raw.replace(/\+/g, ' ').trim();
    try {
      return decodeURIComponent(normalized);
    } catch {
      return normalized;
    }
  };

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏° fallback ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
  const resolveAppliedPosition = (appLike: any, isApplicationForm?: boolean): string => {
    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ fallback ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ field ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢
    const candidates = [
      isApplicationForm ? appLike?.appliedPosition : appLike?.expectedPosition,
      // fallbacks ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤
      appLike?.appliedPosition,
      appLike?.expectedPosition,
      appLike?.staff_position,
      appLike?.jobPosition,
    ].filter(Boolean) as string[];

    if (candidates.length === 0) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const raw = candidates.find((v) => {
      if (typeof v !== 'string') return false;
      const t = v.trim();
      return t.length > 0 && t.toLowerCase() !== 'null' && t.toLowerCase() !== 'undefined';
    }) || '';

    if (!raw) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const normalized = raw.replace(/\+/g, ' ').trim();
    try {
      return decodeURIComponent(normalized);
    } catch {
      return normalized;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á ResumeDeposit ‡πÅ‡∏•‡∏∞ ApplicationForm)
  const fetchApplications = async () => {
    try {
      setLoading(true);
      
      // üîí Security: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• userId ‡πÅ‡∏•‡∏∞ lineId ‡∏à‡∏≤‡∏Å session
      const userId = (session?.user as any)?.id || '';
      const userEmail = (session?.user as any)?.email || '';
      const userLineId = (session?.user as any)?.lineId || '';
      
      console.log('üîç Fetching applications from both ResumeDeposit and ApplicationForm...');
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ResumeDeposit (‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ö‡πÅ‡∏£‡∏Å)
      const resumeUrl = new URL('/api/resume-deposit', window.location.origin);
      if (userIdParam) {
        resumeUrl.searchParams.set('userId', userIdParam);
        if (limitParam) resumeUrl.searchParams.set('limit', limitParam);
        if (adminParam === 'true') resumeUrl.searchParams.set('admin', 'true');
      } else if (resumeUserIdParam) {
        resumeUrl.searchParams.set('userId', resumeUserIdParam);
        resumeUrl.searchParams.set('limit', '100');
      } else if (userId) {
        resumeUrl.searchParams.set('userId', userId);
      } else if (userLineId) {
        resumeUrl.searchParams.set('lineId', userLineId);
      } else if (userEmail) {
        resumeUrl.searchParams.set('email', userEmail);
      } else {
        if (departmentName) {
          resumeUrl.searchParams.set('department', departmentName);
          resumeUrl.searchParams.set('admin', 'true');
        } else {
          resumeUrl.searchParams.set('admin', 'true');
          resumeUrl.searchParams.set('limit', '100');
        }
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ApplicationForm (‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
      const applicationUrl = new URL('/api/prisma/applications', window.location.origin);
      if (userIdParam) {
        applicationUrl.searchParams.set('userId', userIdParam);
        if (limitParam) applicationUrl.searchParams.set('limit', limitParam);
        if (adminParam === 'true') applicationUrl.searchParams.set('admin', 'true');
      } else if (resumeUserIdParam) {
        applicationUrl.searchParams.set('userId', resumeUserIdParam);
        applicationUrl.searchParams.set('limit', '100');
      } else if (userId) {
        applicationUrl.searchParams.set('userId', userId);
      } else if (userLineId) {
        applicationUrl.searchParams.set('lineId', userLineId);
      } else if (userEmail) {
        applicationUrl.searchParams.set('email', userEmail);
      } else {
      if (departmentName) {
          applicationUrl.searchParams.set('department', departmentName);
          applicationUrl.searchParams.set('admin', 'true');
        } else {
          applicationUrl.searchParams.set('admin', 'true');
          applicationUrl.searchParams.set('limit', '100');
        }
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° department parameter ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (departmentName) {
        applicationUrl.searchParams.set('department', departmentName);
        applicationUrl.searchParams.set('limit', '100');
        applicationUrl.searchParams.set('admin', 'true');
      }
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
      console.log('üîç Fetching from ResumeDeposit:', resumeUrl.toString());
      console.log('üîç Fetching from ApplicationForm:', applicationUrl.toString());
      
      const [resumeResponse, applicationResponse] = await Promise.all([
        fetch(resumeUrl.toString()),
        fetch(applicationUrl.toString())
      ]);
      
      if (!resumeResponse.ok && !applicationResponse.ok) {
        throw new Error('Failed to fetch applications from both sources');
      }
      
      let resumeData = [];
      let applicationData = [];
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ResumeDeposit
      if (resumeResponse.ok) {
        const resumeJson = await resumeResponse.json();
        if (resumeJson.success && Array.isArray(resumeJson.data)) {
          resumeData = resumeJson.data;
          console.log('üîç ResumeDeposit data:', resumeData.length, 'records');
        }
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ApplicationForm
      if (applicationResponse.ok) {
        const applicationJson = await applicationResponse.json();
        if (applicationJson.success && Array.isArray(applicationJson.data)) {
          applicationData = applicationJson.data;
          console.log('üîç ApplicationForm data:', applicationData.length, 'records');
        }
      }
      
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á
      const combinedData = [...resumeData, ...applicationData];
      console.log('üîç Combined data:', combinedData.length, 'records');
      console.log('üîç Session data:', { userId, userEmail, userLineId });
      console.log('üîç URL params:', { userIdParam, resumeUserIdParam, departmentName, adminParam, limitParam });

      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß
      let data = combinedData;
      
      // Final fallback: ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ fuzzy matching
      if (Array.isArray(data) && data.length === 0) {
        console.log('üîÑ Application-data - Final fallback: trying to fetch all data with fuzzy matching');
        try {
          const finalUrl = new URL('/api/resume-deposit', window.location.origin);
          finalUrl.searchParams.set('admin', 'true');
          finalUrl.searchParams.set('limit', '10');
          const finalRes = await fetch(finalUrl.toString());
          if (finalRes.ok) {
            const finalJson = await finalRes.json();
            const allData = finalJson.data || [];
            console.log('üîç Application-data - Final fallback data:', allData.length, 'records');
            
            // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ fuzzy matching
            const filtered = allData.filter((r: any) => {
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId
              if (r?.userId && r.userId === userId) {
                console.log('üîç Application-data fallback: Found by userId:', r.id);
                return true;
              }
              
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö lineId
              if (r?.lineId && r.lineId === userLineId) {
                console.log('üîç Application-data fallback: Found by lineId:', r.id);
                return true;
              }
              
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email (fuzzy matching)
              if (r?.email && userEmail) {
                const dbEmail = r.email.toLowerCase();
                const sessionEmail = userEmail.toLowerCase();
                
                // Exact match
                if (dbEmail === sessionEmail) {
                  console.log('üîç Application-data fallback: Found by exact email match:', r.id);
                  return true;
                }
                
                // Partial match (contains)
                if (dbEmail.includes(sessionEmail.split('@')[0]) || sessionEmail.includes(dbEmail.split('@')[0])) {
                  console.log('üîç Application-data fallback: Found by partial email match:', r.id);
                  return true;
                }
              }
              
              return false;
            });
            
            if (filtered.length > 0) {
              data = filtered;
              console.log('‚úÖ Application-data fallback: Found', filtered.length, 'matching records');
            } else {
              console.log('‚ùå Application-data fallback: No matching records found');
            }
          }
        } catch (finalError) {
          console.error('‚ùå Application-data final fallback error:', finalError);
        }
      }
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á ResumeDeposit ‡πÅ‡∏•‡∏∞ ApplicationForm ‡πÄ‡∏õ‡πá‡∏ô ApplicationData
      const applicationsData: ApplicationData[] = data.map((app: any) => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ResumeDeposit ‡∏´‡∏£‡∏∑‡∏≠ ApplicationForm
        const isResumeDeposit = app.expectedPosition !== undefined;
        const isApplicationForm = app.appliedPosition !== undefined;
        
        console.log('üîç Processing record:', { 
          id: app.id, 
          isResumeDeposit, 
          isApplicationForm,
          source: isResumeDeposit ? 'ResumeDeposit' : isApplicationForm ? 'ApplicationForm' : 'Unknown',
          profileImageUrl: app.profileImageUrl,
          hasProfileImage: !!app.profileImageUrl
        });
        
        return {
          id: app.id,
          firstName: app.firstName || '',
          lastName: app.lastName || '',
          // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
          appliedPosition: resolveAppliedPosition(app, isApplicationForm),
          email: app.email || '',
          phone: app.phone || '',
          currentAddress: isApplicationForm ? (app.currentAddress || '') : (app.address || ''),
          birthDate: app.birthDate || '',
        gender: app.gender === 'MALE' ? '‡∏ä‡∏≤‡∏¢' : app.gender === 'FEMALE' ? '‡∏´‡∏ç‡∏¥‡∏á' : app.gender || '',
        education: (app.education || []).map((edu: any) => ({
          level: edu.level || '',
            institution: isApplicationForm ? (edu.institution || '') : (edu.school || ''),
            school: isApplicationForm ? (edu.institution || '') : (edu.school || ''),
          major: edu.major || '',
          startYear: edu.startYear || '',
            endYear: isApplicationForm ? (edu.year || '') : (edu.endYear || ''),
            year: isApplicationForm ? (edu.year || '') : (edu.endYear || ''), // Keep for backward compatibility
            graduationYear: isApplicationForm ? (edu.year || '') : (edu.endYear || ''),
          gpa: edu.gpa?.toString() || ''
        })),
        workExperience: (app.workExperience || []).map((work: any) => ({
          position: work.position || '',
          company: work.company || '',
          startDate: work.startDate || '',
          endDate: work.endDate || '',
          salary: work.salary || '',
            reason: isApplicationForm ? (work.reason || '') : (work.description || '')
        })),
        profileImage: app.profileImageUrl ? `/api/image?file=${encodeURIComponent(app.profileImageUrl)}` : '',
          profileImageUrl: app.profileImageUrl || '',
        documents: (app.documents || []).reduce((acc: any, doc: any) => {
          acc[doc.documentType] = doc.filePath;
          return acc;
        }, {}),
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        prefix: app.prefix || '',
        age: app.age?.toString() || '',
        race: app.race || '',
        placeOfBirth: app.placeOfBirth || '',
        placeOfBirthProvince: app.placeOfBirthProvince || '',
        nationality: app.nationality || '',
        religion: app.religion || '',
        maritalStatus: app.maritalStatus === 'SINGLE' ? '‡πÇ‡∏™‡∏î' : 
                      app.maritalStatus === 'MARRIED' ? '‡∏™‡∏°‡∏£‡∏™' : 
                      app.maritalStatus === 'DIVORCED' ? '‡∏´‡∏¢‡πà‡∏≤' : 
                      app.maritalStatus === 'WIDOWED' ? '‡∏´‡∏°‡πâ‡∏≤‡∏¢' : app.maritalStatus || '',
        idNumber: app.idNumber || '',
        idCardIssuedAt: app.idCardIssuedAt || '',
        idCardIssueDate: app.idCardIssueDate || '',
        idCardExpiryDate: app.idCardExpiryDate || '',
        emergencyContact: app.emergencyContact || '',
        emergencyPhone: app.emergencyPhone || '',
        emergencyRelationship: app.emergencyRelationship || '',
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        registeredAddress: {
          houseNumber: app.house_registration_house_number || '',
          villageNumber: app.house_registration_village_number || '',
          alley: app.house_registration_alley || '',
          road: app.house_registration_road || '',
          subDistrict: app.house_registration_sub_district || '',
          district: app.house_registration_district || '',
          province: app.house_registration_province || '',
          postalCode: app.house_registration_postal_code || '',
          phone: app.house_registration_phone || '',
          mobile: app.house_registration_mobile || ''
        },
        currentAddressDetail: {
          houseNumber: app.current_address_house_number || '',
          villageNumber: app.current_address_village_number || '',
          alley: app.current_address_alley || '',
          road: app.current_address_road || '',
          subDistrict: app.current_address_sub_district || '',
          district: app.current_address_district || '',
          province: app.current_address_province || '',
          postalCode: app.current_address_postal_code || '',
          homePhone: app.current_address_phone || '',
          mobilePhone: app.current_address_mobile || ''
        },
        emergencyAddress: {
          houseNumber: app.emergency_address_house_number || '',
          villageNumber: app.emergency_address_village_number || '',
          alley: app.emergency_address_alley || '',
          road: app.emergency_address_road || '',
          subDistrict: app.emergency_address_sub_district || '',
          district: app.emergency_address_district || '',
          province: app.emergency_address_province || '',
          postalCode: app.emergency_address_postal_code || '',
          phone: app.emergency_address_phone || ''
        },
        emergencyWorkplace: {
          name: app.emergency_workplace_name || '',
          district: app.emergency_workplace_district || '',
          province: app.emergency_workplace_province || '',
          phone: app.emergency_workplace_phone || ''
        },
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™
        spouseInfo: {
          firstName: app.spouse_first_name || '',
          lastName: app.spouse_last_name || ''
        },
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
        medicalRights: {
          hasUniversalHealthcare: app.medical_rights_has_universal_healthcare || false,
          universalHealthcareHospital: app.medical_rights_universal_healthcare_hospital || '',
          hasSocialSecurity: app.medical_rights_has_social_security || false,
          socialSecurityHospital: app.medical_rights_social_security_hospital || '',
          dontWantToChangeHospital: app.medical_rights_dont_want_to_change_hospital || false,
          wantToChangeHospital: app.medical_rights_want_to_change_hospital || false,
          newHospital: app.medical_rights_new_hospital || '',
          hasCivilServantRights: app.medical_rights_has_civil_servant_rights || false,
          otherRights: app.medical_rights_other_rights || ''
        },
        expectedSalary: app.expectedSalary || '',
        availableDate: app.availableDate || '',
        currentWork: false, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô API
        department: resolveDepartment(app),
        unit: app.unit || '',
        skills: app.skills || '',
        languages: app.languages || '',
        computerSkills: app.computerSkills || '',
        certificates: app.certificates || '',
        references: app.references || '',
        applicantSignature: app.applicantSignature || '',
        applicationDate: app.applicationDate || '',
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê
        previousGovernmentService: (app.previousGovernmentService || []).map((gov: any) => ({
          position: gov.position || '',
          department: gov.department || '',
          reason: gov.reason || '',
          date: gov.date || ''
        })),
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢
        multipleEmployers: app.multiple_employers ? JSON.parse(app.multiple_employers) : [],
        status: (() => {
          const rawStatus = app.status || 'PENDING';
          const normalizedStatus = rawStatus.toLowerCase();
          console.log('üîç Status conversion:', { raw: rawStatus, normalized: normalizedStatus });
          return normalizedStatus;
        })(),
        createdAt: app.createdAt || new Date().toISOString(),
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
        source: isResumeDeposit ? 'ResumeDeposit' : isApplicationForm ? 'ApplicationForm' : 'Unknown'
        };
      });
        
        setApplications(applicationsData);
    } catch (err) {
      console.error('Error fetching applications:', err);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const handleViewDetails = (application: ApplicationData) => {
    setSelectedApplication(application);
    onOpen();
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î modal
  const handleCloseDetails = () => {
    setSelectedApplication(null);
    setIsEditing(false);
    setEditingApplication(null);
    onClose();
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const getStatusInfo = (status: string) => {
    const lowerCaseStatus = status.toLowerCase();
    console.log('üîç getStatusInfo - Input status:', status, 'Lowercase:', lowerCaseStatus);
    
    if (lowerCaseStatus === 'hired' || lowerCaseStatus === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') {
      return {
        text: '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤',
        color: 'success' as const,
        bgColor: 'bg-green-100',
        textColor: 'text-green-800',
        borderColor: 'border-green-300'
      };
    } else if (lowerCaseStatus === 'pending' || lowerCaseStatus === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤') {
      return {
        text: '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤',
        color: 'warning' as const,
        bgColor: 'bg-yellow-100',
        textColor: 'text-yellow-800',
        borderColor: 'border-yellow-300'
      };
    } else {
      console.log('üîç getStatusInfo - Unknown status, using default:', status);
      return {
        text: status,
        color: 'default' as const,
        bgColor: 'bg-gray-100',
        textColor: 'text-gray-800',
        borderColor: 'border-gray-300'
      };
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleEditApplication = () => {
    if (selectedApplication) {
      console.log('üîç Starting edit mode for application:', selectedApplication.id);
      console.log('üîç Selected application data:', selectedApplication);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á deep copy ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
      const deepCopy = JSON.parse(JSON.stringify(selectedApplication));
      setEditingApplication(deepCopy);
      setIsEditing(true);
      
      console.log('üîç Editing application set:', deepCopy);
    } else {
      console.error('‚ùå No selected application to edit');
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const handleCancelEdit = () => {
    setIsEditing(false);
    setEditingApplication(null);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleSaveApplication = async () => {
    if (!editingApplication) {
      console.error('‚ùå No editing application found');
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
      return;
    }

    try {
      setIsSaving(true);
      
      console.log('üîç Saving application:', editingApplication.id);
      console.log('üîç Data being sent:', JSON.stringify(editingApplication, null, 2));
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      if (!editingApplication.id) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
      }
      
      if (!editingApplication.firstName || !editingApplication.lastName) {
        throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•');
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
      const dataToSend = {
        ...editingApplication,
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        idCardIssueDate: editingApplication.idCardIssueDate ? new Date(editingApplication.idCardIssueDate) : null,
        idCardExpiryDate: editingApplication.idCardExpiryDate ? new Date(editingApplication.idCardExpiryDate) : null,
        birthDate: editingApplication.birthDate ? new Date(editingApplication.birthDate) : null,
        availableDate: editingApplication.availableDate ? new Date(editingApplication.availableDate) : null,
        age: editingApplication.age ? parseInt(editingApplication.age.toString()) : null
      };
      
      console.log('üîç Processed data for API:', JSON.stringify(dataToSend, null, 2));
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• education ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
      if (dataToSend.education && Array.isArray(dataToSend.education)) {
        console.log('üîç Education data being sent:', dataToSend.education);
        dataToSend.education.forEach((edu: any, index: number) => {
          console.log(`üîç Education ${index}:`, {
            level: edu.level,
            school: edu.school,
            major: edu.major,
            startYear: edu.startYear,
            endYear: edu.endYear,
            gpa: edu.gpa
          });
        });
      }
      
      const response = await fetch(`/api/resume-deposit/${editingApplication.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSend),
      });

      console.log('üîç API Response received:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      });

      console.log('üîç Response status:', response.status);
      console.log('üîç Response ok:', response.ok);

      if (!response.ok) {
        let errorMessage = `HTTP error! status: ${response.status}`;
        try {
          const errorData = await response.json();
          try {
            console.warn('‚ùó API Error Response:', {
              status: response.status,
              statusText: response.statusText,
              data: errorData
            });
          } catch (logError) {
            console.log('‚ùå Error logging failed:', logError);
          }
          errorMessage = errorData?.message || errorMessage;
        } catch (parseError) {
          try {
            console.warn('‚ùó Failed to parse error response:', parseError);
          } catch (logError) {
            console.log('‚ùå Error logging failed:', logError);
          }
          errorMessage = `HTTP error! status: ${response.status} - ${response.statusText}`;
        }
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á overlay
        try {
          window.alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n${errorMessage}`);
        } catch {}
        setIsSaving(false);
        return;
      }

      const result = await response.json();
      console.log('‚úÖ Save successful:', result);

      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      const updatedData = result.data;
      if (updatedData) {
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô frontend
        const formattedData = {
          id: updatedData.id,
          firstName: updatedData.firstName || '',
          lastName: updatedData.lastName || '',
          email: updatedData.email || '',
          phone: updatedData.phone || '',
          appliedPosition: resolveAppliedPosition(updatedData, Array.isArray((updatedData as any)?.education) ? false : false),
          department: updatedData.department || '',
          status: updatedData.status || '',
          createdAt: updatedData.createdAt || '',
          profileImage: updatedData.profileImageUrl || '',
          profileImageUrl: updatedData.profileImageUrl || '',
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
          prefix: updatedData.prefix || '',
          birthDate: updatedData.birthDate || '',
          age: updatedData.age?.toString() || '',
          race: updatedData.race || '',
          placeOfBirth: updatedData.placeOfBirth || '',
          placeOfBirthProvince: updatedData.placeOfBirthProvince || '',
          gender: updatedData.gender === 'MALE' ? '‡∏ä‡∏≤‡∏¢' : updatedData.gender === 'FEMALE' ? '‡∏´‡∏ç‡∏¥‡∏á' : updatedData.gender || '',
          nationality: updatedData.nationality || '',
          religion: updatedData.religion || '',
          maritalStatus: updatedData.maritalStatus === 'SINGLE' ? '‡πÇ‡∏™‡∏î' : 
                        updatedData.maritalStatus === 'MARRIED' ? '‡∏™‡∏°‡∏£‡∏™' : 
                        updatedData.maritalStatus === 'DIVORCED' ? '‡∏´‡∏¢‡πà‡∏≤' : 
                        updatedData.maritalStatus === 'WIDOWED' ? '‡∏´‡∏°‡πâ‡∏≤‡∏¢' : updatedData.maritalStatus || '',
          currentAddress: updatedData.address || '',
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
          idNumber: updatedData.idNumber || '',
          idCardIssuedAt: updatedData.idCardIssuedAt || '',
          idCardIssueDate: updatedData.idCardIssueDate || '',
          idCardExpiryDate: updatedData.idCardExpiryDate || '',
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
          emergencyContact: updatedData.emergencyContact || '',
          emergencyPhone: updatedData.emergencyPhone || '',
          emergencyRelationship: updatedData.emergencyRelationship || '',
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
          education: (updatedData.education || []).map((edu: any) => ({
            level: edu.level || '',
            institution: edu.school || '',
            school: edu.school || '',
            major: edu.major || '',
            startYear: edu.startYear || '',
            endYear: edu.endYear || '',
            year: edu.endYear || '',
            graduationYear: edu.endYear || '',
            gpa: edu.gpa?.toString() || ''
          })),
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
          workExperience: (updatedData.workExperience || []).map((work: any) => ({
            position: work.position || '',
            company: work.company || '',
            startDate: work.startDate || '',
            endDate: work.endDate || '',
            salary: work.salary || '',
            reason: work.reason || ''
          })),
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
          previousGovernmentService: (updatedData.previousGovernmentService || []).map((gov: any) => ({
            position: gov.position || '',
            department: gov.department || '',
            reason: gov.reason || '',
            date: gov.date || '',
            type: gov.type || 'civilServant'
          })),
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ
          skills: updatedData.skills || '',
          languages: updatedData.languages || '',
          computerSkills: updatedData.computerSkills || '',
          certificates: updatedData.certificates || '',
          references: updatedData.references || '',
          expectedPosition: updatedData.expectedPosition || '',
          expectedSalary: updatedData.expectedSalary || '',
          availableDate: updatedData.availableDate || '',
          currentWork: updatedData.currentWork || false,
          unit: updatedData.unit || '',
          additionalInfo: updatedData.additionalInfo || '',
          notes: updatedData.notes || '',
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™
          spouse_first_name: updatedData.spouse_first_name || '',
          spouse_last_name: updatedData.spouse_last_name || '',
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
          staff_position: updatedData.staff_position || '',
          staff_department: updatedData.staff_department || '',
          staff_start_work: updatedData.staff_start_work || ''
        };

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
      setApplications(prev => 
        prev.map(app => 
            app.id === updatedData.id ? formattedData : app
        )
      );

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï selectedApplication
        setSelectedApplication(formattedData);
        
        console.log('‚úÖ Updated application data with API response:', formattedData);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        setApplications(prev => 
          prev.map(app => 
            app.id === editingApplication.id ? editingApplication : app
          )
        );
      setSelectedApplication(editingApplication);
      }

      setIsEditing(false);
      setEditingApplication(null);
      
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      try {
        console.log('üîÑ Refreshing data from database...');
        await fetchApplications();
        console.log('‚úÖ Data refreshed successfully');
      } catch (refreshError) {
        console.warn('‚ö†Ô∏è Failed to refresh data, but save was successful:', refreshError);
      }
      
      window.alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
      try {
        console.warn('‚ùó Error saving application:', error);
      } catch (logError) {
        console.log('‚ùå Error logging failed:', logError);
      }
      
      let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏';
      
      if (error instanceof Error) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      try {
        console.warn('‚ùó Final error message:', errorMessage);
        window.alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n${errorMessage}`);
      } catch (logError) {
        console.log('‚ùå Error logging failed:', logError);
        window.alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } finally {
      setIsSaving(false);
    }
  };

  // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö: ‡πÑ‡∏°‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô
  const handleDeleteApplication = async (applicationId: string) => {
    if (!applicationId) return;
    const confirmed = window.confirm('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ');
    if (!confirmed) return;

    try {
      setIsSaving(true);

      // ‡πÉ‡∏ä‡πâ API ‡∏•‡∏ö‡∏à‡∏≤‡∏Å resume-deposit ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏à‡∏≤‡∏Å resume-deposit)
      const res = await fetch(`/api/resume-deposit/${applicationId}`, { method: 'DELETE' });

      if (!res.ok) {
        let message = `HTTP ${res.status}`;
        try {
          const err = await res.json();
          message = err?.message || message;
        } catch {}
        window.alert(`‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${message}`);
        return;
      }

      // ‡πÄ‡∏≠‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î modal
      setApplications(prev => prev.filter(app => app.id !== applicationId));
      if (selectedApplication?.id === applicationId) {
        setSelectedApplication(null);
        setIsEditing(false);
        setEditingApplication(null);
        onClose();
      }
      window.alert('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (e) {
      console.error('‚ùå Error deleting application:', e);
      window.alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setIsSaving(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const handleInputChange = (field: string, value: any) => {
    if (!editingApplication) {
      console.error('‚ùå No editing application found for input change');
      return;
    }

    console.log('üîç Input change:', { field, value, editingApplicationId: editingApplication.id });

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ path ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö parent[index].child ‡πÄ‡∏ä‡πà‡∏ô education[0].level
    const arrayPathMatch = field.match(/^(\w+)\[(\d+)\]\.([\w.]+)$/);
    if (arrayPathMatch) {
      const parentKey = arrayPathMatch[1];
      const index = parseInt(arrayPathMatch[2], 10);
      const childKey = arrayPathMatch[3];

      console.log('üîç Array path match:', { parentKey, index, childKey });

      setEditingApplication(prev => {
        if (!prev) return prev;
        
        const newData = { ...prev };
        if (!newData[parentKey as keyof ApplicationData]) {
          (newData as any)[parentKey] = [];
        }
        
        const array = [...(newData[parentKey as keyof ApplicationData] as any[])];
        if (!array[index]) {
          array[index] = {};
        }
        
        const newItem = { ...array[index] };
        setNestedValue(newItem, childKey, value);
        array[index] = newItem;
        
        (newData as any)[parentKey] = array;
        
        console.log('üîç Updated array data:', { parentKey, array });
        console.log('üîç Final education data:', newData.education);
        return newData;
      });
    } else {
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ path ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      console.log('üîç Simple path update:', { field, value });
      
      setEditingApplication(prev => {
        if (!prev) return prev;
        const newData = { ...prev };
        setNestedValue(newData, field, value);
        
        console.log('üîç Updated simple data:', { field, value, newData });
        return newData;
      });
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö set nested value
  const setNestedValue = (obj: any, path: string, value: any) => {
    console.log('üîç setNestedValue called:', { path, value, obj });
    
    const keys = path.split('.');
    const lastKey = keys.pop()!;
    
    console.log('üîç Path keys:', keys, 'Last key:', lastKey);
    
    const target = keys.reduce((current, key) => {
      if (!current[key]) {
        console.log('üîç Creating new object for key:', key);
        current[key] = {};
      }
      return current[key];
    }, obj);
    
    console.log('üîç Target object before setting:', target);
    target[lastKey] = value;
    console.log('üîç Target object after setting:', target);
  };


  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
  const handleFileUpload = async (file: File, documentType: string, applicationId: string) => {
    const uploadKey = `${applicationId}-${documentType}`;
    
    try {
      setUploadingFiles(prev => ({ ...prev, [uploadKey]: true }));
      setUploadProgress(prev => ({ ...prev, [uploadKey]: 0 }));

      const formData = new FormData();
      formData.append('file', file);
      formData.append('resumeDepositId', applicationId);
      formData.append('documentType', documentType);

      const response = await fetch('/api/resume-documents', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        alert('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        fetchApplications();
      } else {
        const errorData = await response.json();
        alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
      }
    } catch (error) {
      console.error('Error uploading file:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå');
    } finally {
      setUploadingFiles(prev => ({ ...prev, [uploadKey]: false }));
      setUploadProgress(prev => ({ ...prev, [uploadKey]: 0 }));
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>, documentType: string, applicationId: string) => {
    const file = event.target.files?.[0];
    if (file) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (10MB)
      if (file.size > 10 * 1024 * 1024) {
        alert('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB');
        return;
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
      const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];
      if (!allowedTypes.includes(file.type)) {
        alert('‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå PDF, JPG, JPEG, PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        return;
      }

      handleFileUpload(file, documentType, applicationId);
    }
  };






  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
  const handleDeleteFile = async (documentType: string, applicationId: string) => {
    try {
      if (!applicationId) {
        alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£');
        return;
      }

      const response = await fetch(`/api/resume-documents`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          resumeDepositId: applicationId,
          documentType: documentType
        }),
      });

      if (response.ok) {
        alert('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        window.location.reload();
      } else {
        const errorData = await response.json();
        alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
      }
    } catch (error) {
      console.error('Error deleting file:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  const handlePrintDocument = (application: ApplicationData) => {
    // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ID ‡πÑ‡∏õ‡∏¢‡∏±‡∏á print-all ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
    const printUrl = `/official-documents/print-all?id=${application.id}`;
    window.open(printUrl, '_blank');
  };

  useEffect(() => {
    fetchApplications();
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏°‡∏∑‡πà‡∏≠ session ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ô URL
  }, [session, departmentName, resumeUserIdParam]);

  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addNewApplication ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
  useEffect(() => {
    (window as any).addNewApplicationToApplicationData = addNewApplication;
    return () => {
      delete (window as any).addNewApplicationToApplicationData;
    };
  }, []);


  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  useEffect(() => {
    const interval = setInterval(() => {
      checkForNewApplications();
    }, 10000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval);
  }, [applications]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
  const checkForNewApplications = async () => {
    try {
      console.log('üîç Checking for new applications...');
      
      // üîí Security: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• userId ‡πÅ‡∏•‡∏∞ lineId ‡∏à‡∏≤‡∏Å session
      const userId = (session?.user as any)?.id || '';
      const userEmail = (session?.user as any)?.email || '';
      const userLineId = (session?.user as any)?.lineId || '';
      
      if (!userId && !userLineId && !userEmail) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö userId, lineId ‡∏´‡∏£‡∏∑‡∏≠ userEmail - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà');
        return;
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏û‡∏£‡πâ‡∏≠‡∏° parameters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      const url = new URL('/api/resume-deposit', window.location.origin);
      if (userId) {
        url.searchParams.set('userId', userId);
      } else if (userLineId) {
        url.searchParams.set('lineId', userLineId);
      } else if (userEmail) {
        url.searchParams.set('email', userEmail);
      }
      
      const response = await fetch(url.toString());
      
      if (response.ok) {
        const responseData = await response.json();
        const data = responseData.data || [];
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const currentApplicationIds = applications.map(app => app.id);
        const newApplications = data.filter((app: any) => !currentApplicationIds.includes(app.id));
        
        if (newApplications.length > 0) {
          console.log(`üÜï Found ${newApplications.length} new applications`);
          
          // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô ApplicationData format
          const newApplicationsData: ApplicationData[] = newApplications.map((app: any) => ({
            id: app.id,
            firstName: app.firstName || '',
            lastName: app.lastName || '',
            appliedPosition: resolveAppliedPosition(app, false),
            email: app.email || '',
            phone: app.phone || '',
            department: resolveDepartment(app),
            status: app.status || 'PENDING',
            createdAt: app.createdAt || new Date().toISOString(),
            profileImageUrl: app.profileImageUrl || '',
            prefix: app.prefix || '',
            birthDate: app.birthDate || '',
            age: app.age?.toString() || '',
            race: app.race || '',
            placeOfBirth: app.placeOfBirth || '',
            placeOfBirthProvince: app.placeOfBirthProvince || '',
            gender: app.gender === 'MALE' ? '‡∏ä‡∏≤‡∏¢' : app.gender === 'FEMALE' ? '‡∏´‡∏ç‡∏¥‡∏á' : app.gender || '',
            nationality: app.nationality || '',
            religion: app.religion || '',
            maritalStatus: app.maritalStatus === 'SINGLE' ? '‡πÇ‡∏™‡∏î' : 
                          app.maritalStatus === 'MARRIED' ? '‡∏™‡∏°‡∏£‡∏™' : 
                          app.maritalStatus === 'DIVORCED' ? '‡∏´‡∏¢‡πà‡∏≤' : 
                          app.maritalStatus === 'WIDOWED' ? '‡∏´‡∏°‡πâ‡∏≤‡∏¢' : app.maritalStatus || '',
            currentAddress: app.address || '',
            education: (app.education || []).map((edu: any) => ({
              level: edu.level || '',
              institution: edu.school || '',
              school: edu.school || '',
              major: edu.major || '',
              startYear: edu.startYear || '',
              endYear: edu.endYear || '',
              year: edu.endYear || '',
              graduationYear: edu.endYear || '',
              gpa: edu.gpa?.toString() || ''
            })),
            workExperience: (app.workExperience || []).map((work: any) => ({
              position: work.position || '',
              company: work.company || '',
              startDate: work.startDate || '',
              endDate: work.endDate || '',
              salary: work.salary || '',
              reason: work.description || ''
            })),
            documents: (app.documents || []).reduce((acc: any, doc: any) => {
              acc[doc.documentType] = doc.filePath;
              return acc;
            }, {})
          }));
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
          for (const newApp of newApplicationsData) {
            await addNewApplication(newApp);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Error checking for new applications:', error);
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö real-time
  useEffect(() => {
    if (applications.length === 0) return;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const interval = setInterval(async () => {
      try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö fetchApplications
        const url = new URL('/api/resume-deposit', window.location.origin);
        const userId = (session?.user as any)?.id || '';
        const userEmail = (session?.user as any)?.email || '';
        const userLineId = (session?.user as any)?.lineId || '';

        if (userIdParam) {
          url.searchParams.set('userId', userIdParam);
          if (limitParam) url.searchParams.set('limit', limitParam);
          if (adminParam === 'true') url.searchParams.set('admin', 'true');
        } else if (resumeUserIdParam) {
          url.searchParams.set('userId', resumeUserIdParam);
        } else if (userId) {
          url.searchParams.set('userId', userId);
        } else if (userLineId) {
          url.searchParams.set('lineId', userLineId);
        } else if (userEmail) {
          url.searchParams.set('email', userEmail);
        } else if (departmentName) {
          url.searchParams.set('department', departmentName);
          url.searchParams.set('admin', 'true');
        } else {
          // ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ department
          url.searchParams.set('admin', 'true');
          url.searchParams.set('limit', '100');
        }

        // Override ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏±‡∏ö query string ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
        if (adminParam === 'true') url.searchParams.set('admin', 'true');
        if (limitParam) url.searchParams.set('limit', limitParam);

        const response = await fetch(url.toString());
        if (response.ok) {
          const responseData = await response.json();
          if (responseData.success && responseData.data) {
            const newData = responseData.data;
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            let hasStatusChanged = false;
            
            for (let i = 0; i < applications.length; i++) {
              const currentApp = applications[i];
              const newApp = newData.find((app: any) => app.id === currentApp.id);
              
              if (newApp) {
                const newStatus = newApp.status?.toLowerCase() || 'pending';
                console.log(`üîç Status comparison for ${currentApp.firstName} ${currentApp.lastName}:`, {
                  current: currentApp.status,
                  new: newApp.status,
                  newNormalized: newStatus,
                  changed: currentApp.status !== newStatus
                });
                
                if (currentApp.status !== newStatus) {
                  hasStatusChanged = true;
                  console.log(`üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${currentApp.firstName} ${currentApp.lastName}: ${currentApp.status} -> ${newStatus}`);
                  break;
                }
              }
            }
            
            if (hasStatusChanged) {
              console.log('üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á - ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
              setStatusUpdateNotification('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
              await fetchApplications();
              setStatusUpdateNotification(null);
            }
          }
        }
      } catch (error) {
          console.log('‚ùå Error checking status updates:', error);
        }
    }, 30000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    return () => clearInterval(interval);
  }, [applications]);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Spinner size="lg" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <p className="text-red-500 text-lg">{error}</p>
                <Button
                  color="primary"
                  onClick={fetchApplications}
            className="mt-4"
                >
                  ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                </Button>
        </div>
      </div>
    );
  }

  return (
    <div className={`container mx-auto px-4 py-8 ${isOpen ? 'backdrop-blur-sm' : ''}`}>
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
        <h1 className="text-3xl font-bold text-gray-800 mb-2">
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô
                </h1>
        <p className="text-gray-600">
                {departmentName ? `‡∏ù‡πà‡∏≤‡∏¢: ${departmentName}` : '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}
              </p>
              
              {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
              {statusUpdateNotification && (
                <div className="mt-4 p-3 bg-blue-100 border border-blue-300 rounded-lg">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                    <span className="text-blue-800 text-sm font-medium">
                      {statusUpdateNotification}
                    </span>
                  </div>
                </div>
              )}

              {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà */}
              {newApplicationNotification && (
                <div className="mt-4 p-3 bg-green-100 border border-green-300 rounded-lg">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                    <span className="text-green-800 text-sm font-medium">
                      {newApplicationNotification}
                    </span>
                  </div>
                </div>
              )}
            </div>
            <Button
              color="primary"
              variant="bordered"
              startContent={<ArrowLeftIcon className="w-4 h-4" />}
              onClick={() => router.push('/dashboard')}
              className="bg-white hover:bg-gray-50 border-gray-300 text-gray-700"
            >
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Dashboard
            </Button>
          </div>
          </div>
          
      {applications.length === 0 ? (
        <Card className="p-8 text-center">
          <div className="text-gray-500">
            <DocumentTextIcon className="w-16 h-16 mx-auto mb-4" />
            <p className="text-lg">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô</p>
            <div className="mt-4 text-sm text-gray-400">
              <p>Session: {JSON.stringify({
                userId: (session?.user as any)?.id || '',
                userEmail: (session?.user as any)?.email || '',
                userLineId: (session?.user as any)?.lineId || ''
              })}</p>
              <p>URL Params: {JSON.stringify({ userIdParam, resumeUserIdParam, departmentName, adminParam, limitParam })}</p>
            </div>
          </div>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {applications.map((application) => (
            <Card key={application.id} className="shadow-lg hover:shadow-xl transition-shadow relative">
                <CardHeader className="pb-3">
                    <div className="flex items-center gap-3">
                  <div className="w-12 h-12 rounded-full overflow-hidden flex items-center justify-center">
                    {application.profileImage || application.profileImageUrl ? (
                      <img
                        src={(application.profileImageUrl || application.profileImage)!.startsWith('http') ? 
                          (application.profileImageUrl || application.profileImage)! : 
                          `/api/image?file=${encodeURIComponent(application.profileImageUrl || application.profileImage || '')}`}
                        alt={`${application.firstName} ${application.lastName}`}
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          e.currentTarget.style.display = 'none';
                          e.currentTarget.nextElementSibling?.classList.remove('hidden');
                        }}
                      />
                    ) : null}
                    <div className={`w-full h-full bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold ${(application.profileImage || application.profileImageUrl) ? 'hidden' : ''}`}>
                    {application.firstName?.charAt(0)}{application.lastName?.charAt(0)}
                    </div>
                            </div>
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold text-gray-800">
                      {application.prefix} {application.firstName} {application.lastName}
                        </h3>
                          </div>
                  </div>
                  
                  {/* Status Chip */}
                  <div className="absolute top-3 right-3">
                    <Chip
                      color={getStatusInfo(application.status).color}
                      variant="flat"
                      size="sm"
                      className={`${getStatusInfo(application.status).bgColor} ${getStatusInfo(application.status).textColor} ${getStatusInfo(application.status).borderColor} border font-medium`}
                    >
                      {getStatusInfo(application.status).text}
                    </Chip>
                  </div>
                </CardHeader>
                <CardBody className="pt-0">
                <div className="space-y-2 mb-4">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</span>
                    <span className="text-sm font-medium">{resolveAppliedPosition(application, true)}</span>
                      </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏ù‡πà‡∏≤‡∏¢:</span>
                    <span className="text-sm font-medium">{application.department || '-'}</span>
                      </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</span>
                    <span className="text-sm font-medium">{application.phone}</span>
                    </div>
                  {/* <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</span>
                    <span className="text-sm font-medium">
                      {application.source === 'ResumeDeposit' ? '‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ö‡πÅ‡∏£‡∏Å' : 
                       application.source === 'ApplicationForm' ? '‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°' : 
                       '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                    </span>
                    </div> */}
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</span>
                    <span className="text-sm font-medium">
                      {new Date(application.createdAt).toLocaleDateString('th-TH')}
                    </span>
                    </div>
                    </div>

                      <div className="flex gap-2">
                    {/* ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö: ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ */}
                        <Button
                          color="primary"
                     variant="flat"
                     size="sm"
                          startContent={<EyeIcon className="w-4 h-4" />}
                          onClick={() => handleViewDetails(application)}
                     className="flex-1"
                        >
                          ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                        </Button>
                   <Button
                     color="secondary"
                     variant="flat"
                     size="sm"
                     startContent={<PrinterIcon className="w-4 h-4" />}
                     onClick={() => handlePrintDocument(application)}
                   >
                     ‡∏û‡∏¥‡∏°‡∏û‡πå
                        </Button>
                  </div>
                </CardBody>
              </Card>
            ))}
          </div>
        )}

      {/* Modal ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
        <Modal 
          isOpen={isOpen} 
          onClose={handleCloseDetails} 
          size="5xl"
          scrollBehavior="inside"
          backdrop="blur"
          classNames={{
            base: "max-h-[90vh] bg-white/95 backdrop-blur-md",
            body: "overflow-y-auto max-h-[calc(90vh-120px)] bg-white/95 backdrop-blur-md",
            header: "bg-white/95 backdrop-blur-md",
            footer: "bg-white/95 backdrop-blur-md",
            backdrop: "backdrop-blur-md bg-black/20"
          }}
        >
        <ModalContent>
          <ModalHeader className="flex items-center gap-4">
            {/* ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà */}
            
            <div className="flex flex-col gap-1">
              <h2 className="text-xl font-semibold">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô</h2>
              
            </div>
          </ModalHeader>
           <ModalBody>
                             {selectedApplication && (
                 <ApplicationFormView 
                 application={isEditing ? editingApplication! : selectedApplication} 
                   isEditing={isEditing}
                 onInputChange={handleInputChange}
                 uploadingFiles={uploadingFiles}
                 onFileSelect={handleFileSelect}
                 />
               )}
            </ModalBody>
           <ModalFooter>
             {isEditing ? (
               <>
                 <Button color="danger" variant="light" onPress={handleCancelEdit}>
                   ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                 </Button>
                 <Button 
                   color="success" 
                   onPress={handleSaveApplication}
                   isLoading={isSaving}
                   disabled={isSaving}
                 >
                   {isSaving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'}
                 </Button>
               </>
             ) : (
               <>
                 <Button color="danger" variant="light" onPress={handleCloseDetails}>
                   ‡∏õ‡∏¥‡∏î
                 </Button>
                  {selectedApplication && (
                    <Button 
                      color="danger"
                      variant="flat"
                      onPress={() => handleDeleteApplication(selectedApplication.id)}
                      disabled={isSaving}
                    >
                      ‡∏•‡∏ö
                    </Button>
                  )}
                 <Button 
                   color="warning" 
                   variant="flat"
                   onPress={handleEditApplication}
                 >
                   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                 </Button>
                 <Button
                   color="primary"
                   onPress={() => selectedApplication && handlePrintDocument(selectedApplication)}
                   startContent={<PrinterIcon className="w-4 h-4" />}
                 >
                   ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                 </Button>
               </>
             )}
           </ModalFooter>
          </ModalContent>
        </Modal>
    </div>
  );
} 
