'use client';

import React, { useState, useEffect } from 'react';
import {
  Card,
  CardHeader,
  CardBody,
  Button,
  Chip,
  Avatar,
  Spinner,
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
  Input,
  Select,
  SelectItem,
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  useDisclosure
} from '@heroui/react';
import {
  MagnifyingGlassIcon,
  UsersIcon,
  ClockIcon,
  CheckCircleIcon,
  XCircleIcon,
  EyeIcon,
  DocumentTextIcon,
  PrinterIcon,
  UserIcon,
  BriefcaseIcon
} from '@heroicons/react/24/outline';

interface ApplicationData {
  id: string;
  prefix: string;
  firstName: string;
  lastName: string;
  age: number;
  race: string;
  nationality: string;
  religion: string;
  maritalStatus: string;
  idNumber: string;
  idCardIssuedAt: string;
  idCardIssueDate: string;
  idCardExpiryDate: string;
  addressAccordingToHouseRegistration: string;
  currentAddress: string;
  emergencyContact: string;
  emergencyRelationship: string;
  emergencyPhone: string;
  emergencyAddress: string;
  expectedPosition: string;
  department: string;
  missionGroupId?: string | null;
  phone: string;
  email: string;
  status: string;
  suggestion?: string;
  createdAt: string;
  updatedAt: string;
  profileImage?: string;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  birthDate?: string;
  placeOfBirth?: string;
  placeOfBirthProvince?: string;
  gender?: string;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô
  expectedSalary?: string;
  availableDate?: string;
  currentWork?: boolean;
  applicantSignature?: string;
  applicationDate?: string;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  education?: Array<{
    level: string;
    degree?: string;
    major: string;
    institution: string;
    school?: string;
    year?: string;
    endYear?: string;
    gpa?: string;
  }>;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  workExperience?: Array<{
    company: string;
    position: string;
    startDate: string;
    endDate: string;
    district?: string;
    province?: string;
    phone?: string;
    reason: string;
    description?: string;
    salary?: string;
  }>;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  previousGovernmentService?: Array<{
    position: string;
    department: string;
    reason: string;
    date: string;
    type?: string;
  }>;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  skills?: string;
  languages?: string;
  computerSkills?: string;
  certificates?: string;
  references?: string;
  
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™
  spouseInfo?: {
    firstName: string;
    lastName: string;
  };
  spouse_first_name?: string;
  spouse_last_name?: string;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
  emergencyWorkplace?: {
    name: string;
    district: string;
    province: string;
    phone: string;
  };
  emergency_workplace_name?: string;
  emergency_workplace_district?: string;
  emergency_workplace_province?: string;
  emergency_workplace_phone?: string;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
  registeredAddress?: {
    houseNumber: string;
    villageNumber: string;
    alley: string;
    road: string;
    subDistrict: string;
    district: string;
    province: string;
    postalCode: string;
    phone?: string;
    mobile?: string;
  };
  address?: string;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  currentAddressDetail?: {
    houseNumber: string;
    villageNumber: string;
    alley: string;
    road: string;
    subDistrict: string;
    district: string;
    province: string;
    postalCode: string;
    homePhone: string;
    mobilePhone: string;
  };
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
  emergencyAddressDetail?: {
    houseNumber: string;
    villageNumber: string;
    alley: string;
    road: string;
    subDistrict: string;
    district: string;
    province: string;
    postalCode: string;
    phone?: string;
  };
  emergencyContactFirstName?: string;
  emergencyContactLastName?: string;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
  medicalRights?: {
    hasUniversalHealthcare: boolean;
    universalHealthcareHospital: string;
    hasSocialSecurity: boolean;
    socialSecurityHospital: string;
    dontWantToChangeHospital: boolean;
    wantToChangeHospital: boolean;
    newHospital: string;
    hasCivilServantRights: boolean;
    otherRights: string;
  };
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
  staffInfo?: {
    position: string;
    department: string;
    startWork: string;
  };
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  documents?: {
    idCard?: string;
    houseRegistration?: string;
    militaryCertificate?: string;
    educationCertificate?: string;
    medicalCertificate?: string;
    drivingLicense?: string;
    nameChangeCertificate?: string;
    otherDocuments?: string[];
  };
}

export default function ApplicantsPage() {
  const [applications, setApplications] = useState<ApplicationData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  
  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏ù‡πà‡∏≤‡∏¢
  const [hospitalDepartments, setHospitalDepartments] = useState<Array<{ id: string; name: string; missionGroupId: string | null; positions: string }>>([]);
  const [selectedDepartmentId, setSelectedDepartmentId] = useState<string>('');
  const [selectedApplication, setSelectedApplication] = useState<ApplicationData | null>(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showPreviewModal, setShowPreviewModal] = useState(false);
  const [previewFile, setPreviewFile] = useState<{ url: string; name: string; type: string } | null>(null);
  const [uploadedDocuments, setUploadedDocuments] = useState<any[]>([]);
  const [detailStatus, setDetailStatus] = useState<string>('');
  const [selectedPositionApplicants, setSelectedPositionApplicants] = useState<ApplicationData[]>([]);
  const [showPositionModal, setShowPositionModal] = useState(false);
  
  // Bulk status change state
  const [selectedApplications, setSelectedApplications] = useState<string[]>([]);
  const [bulkStatus, setBulkStatus] = useState<string>('');
  const [showBulkModal, setShowBulkModal] = useState(false);
  
  // ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  const [suggestion, setSuggestion] = useState<string>('');
  const [showSuggestionModal, setShowSuggestionModal] = useState(false);
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);

  // Pagination logic
  const getDepartmentPositions = () => {
    console.log('üîç getDepartmentPositions - hospitalDepartments:', hospitalDepartments);
    console.log('üîç getDepartmentPositions - applications:', applications);
    
    let filteredDepartments = hospitalDepartments;
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ù‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (selectedDepartmentId && selectedDepartmentId !== '') {
      filteredDepartments = hospitalDepartments.filter(dept => dept.id === selectedDepartmentId);
      console.log('üîç Filtered departments by selectedDepartmentId:', filteredDepartments);
    }
    
    const departmentPositions = filteredDepartments.map((dept, index) => {
      // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ô‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ
      const applicantsInDept = applications.filter(app => 
        app.department === dept.name
      );
      console.log(`üîç Department: ${dept.name}, Applicants:`, applicantsInDept);
      
      // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å departments ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å applications
      const departmentPositions = dept.positions ? dept.positions.split(',').map(p => p.trim()).filter(p => p) : [];
      console.log(`üîç Department: ${dept.name}, Positions from DB:`, departmentPositions);
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      const positionCounts = applicantsInDept.reduce((acc, app) => {
        const position = app.expectedPosition || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        acc[position] = (acc[position] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);

      const result = {
        department: dept.name,
        positions: departmentPositions.length > 0 ? departmentPositions : Object.keys(positionCounts),
        positionCounts,
        totalApplicants: applicantsInDept.length,
        index: index + 1
      };
      
      console.log(`üîç Final result for ${dept.name}:`, result);
      return result;
    });

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (searchTerm) {
      const filtered = departmentPositions.filter(dept => 
        dept.department.toLowerCase().includes(searchTerm.toLowerCase()) ||
        dept.positions.some(position => 
          position.toLowerCase().includes(searchTerm.toLowerCase())
        )
      );
      console.log('üîç Filtered by search term:', filtered);
      return filtered;
    }

    console.log('üîç Final departmentPositions:', departmentPositions);
    return departmentPositions;
  };

  const allDepartmentPositions = getDepartmentPositions();
  const totalPages = Math.ceil(allDepartmentPositions.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentPageData = allDepartmentPositions.slice(startIndex, endIndex);

  // Reset to first page when data changes
  useEffect(() => {
    setCurrentPage(1);
  }, [hospitalDepartments, applications, searchTerm, selectedDepartmentId]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å ISO format ‡πÄ‡∏õ‡πá‡∏ô d/m/Y (‡∏õ‡∏µ‡πÑ‡∏ó‡∏¢)
  const formatDateForDisplay = (dateString: string) => {
    if (!dateString) return '-';
    try {
      const date = new Date(dateString);
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();
      const thaiYear = year + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ‡πÑ‡∏ó‡∏¢
      return `${day}/${month}/${thaiYear}`;
    } catch {
      return dateString;
    }
  };
  
  
  // Modal controls
  const { isOpen: isDetailModalOpen, onOpen: onDetailModalOpen, onOpenChange: onDetailModalOpenChange } = useDisclosure();
  const { isOpen: isPendingModalOpen, onOpen: onPendingModalOpen, onOpenChange: onPendingModalOpenChange } = useDisclosure();
  const { isOpen: isApprovedModalOpen, onOpen: onApprovedModalOpen, onOpenChange: onApprovedModalOpenChange } = useDisclosure();

  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  const [stats, setStats] = useState({
    total: 0,
    pending: 0,
    approved: 0
  });

  useEffect(() => {
    fetchApplications();
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡πà‡∏≤‡∏¢
  useEffect(() => {
    (async () => {
      try {
        console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å /api/prisma/departments...');
        const res = await fetch('/api/prisma/departments?limit=1000', {
          cache: 'no-store', // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô cache issues
        });
        
        if (!res.ok) {
          throw new Error(`HTTP error! status: ${res.status}`);
        }
        
        const json = await res.json();
        console.log('üìä API Response:', json);
        
        if (json?.success && Array.isArray(json.data)) {
          const mappedData = json.data.map((d: any) => ({ 
            id: String(d.id), 
            name: d.name, 
            missionGroupId: d.missionGroupId || null,
            positions: d.positions || ''
          }));
          console.log('üìã Mapped Departments:', mappedData);
          setHospitalDepartments(mappedData);
        } else {
          console.error('‚ùå Failed to fetch departments:', json);
        }
      } catch (error) {
        console.error('‚ùå Error fetching departments:', error);
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á set error state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö departments ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
      }
    })();
  }, []);


  const fetchApplications = async (retryCount = 0) => {
    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å /api/resume-deposit...', { retryCount });
      
      // üîí Admin: Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° user)
      const apiUrl = '/api/resume-deposit?admin=true';
      console.log('üîç API Request URL:', apiUrl);
      
      const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store', // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô cache issues
      });
      
      console.log('üîç API Response Status:', response.status, response.statusText);

      if (response.ok) {
        const responseData = await response.json();
        console.log('‚úÖ Response Data:', responseData);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response structure
        if (responseData.success && responseData.data) {
          const data = responseData.data;
          console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data);
          
          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
          const processedData = await Promise.all(data.map(async (app: ApplicationData) => {
            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
            const registeredAddress = {
              houseNumber: (app as any).house_registration_house_number || '',
              villageNumber: (app as any).house_registration_village_number || '',
              alley: (app as any).house_registration_alley || '',
              road: (app as any).house_registration_road || '',
              subDistrict: (app as any).house_registration_sub_district || '',
              district: (app as any).house_registration_district || '',
              province: (app as any).house_registration_province || '',
              postalCode: (app as any).house_registration_postal_code || '',
              phone: (app as any).house_registration_phone || '',
              mobile: (app as any).house_registration_mobile || ''
            };

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const currentAddressDetail = {
              houseNumber: (app as any).current_address_house_number || '',
              villageNumber: (app as any).current_address_village_number || '',
              alley: (app as any).current_address_alley || '',
              road: (app as any).current_address_road || '',
              subDistrict: (app as any).current_address_sub_district || '',
              district: (app as any).current_address_district || '',
              province: (app as any).current_address_province || '',
              postalCode: (app as any).current_address_postal_code || '',
              homePhone: (app as any).current_address_phone || '',
              mobilePhone: (app as any).current_address_mobile || ''
            };

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
            const emergencyAddressDetail = {
              houseNumber: (app as any).emergency_address_house_number || '',
              villageNumber: (app as any).emergency_address_village_number || '',
              alley: (app as any).emergency_address_alley || '',
              road: (app as any).emergency_address_road || '',
              subDistrict: (app as any).emergency_address_sub_district || '',
              district: (app as any).emergency_address_district || '',
              province: (app as any).emergency_address_province || '',
              postalCode: (app as any).emergency_address_postal_code || '',
              phone: (app as any).emergency_address_phone || ''
            };

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™
            const spouseInfo = {
              firstName: (app as any).spouse_first_name || '',
              lastName: (app as any).spouse_last_name || ''
            };

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
            const emergencyWorkplace = {
              name: (app as any).emergency_workplace_name || '',
              district: (app as any).emergency_workplace_district || '',
              province: (app as any).emergency_workplace_province || '',
              phone: (app as any).emergency_workplace_phone || ''
            };

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
            const medicalRights = {
              hasUniversalHealthcare: (app as any).medical_rights_has_universal_healthcare || false,
              universalHealthcareHospital: (app as any).medical_rights_universal_healthcare_hospital || '',
              hasSocialSecurity: (app as any).medical_rights_has_social_security || false,
              socialSecurityHospital: (app as any).medical_rights_social_security_hospital || '',
              dontWantToChangeHospital: (app as any).medical_rights_dont_want_to_change_hospital || false,
              wantToChangeHospital: (app as any).medical_rights_want_to_change_hospital || false,
              newHospital: (app as any).medical_rights_new_hospital || '',
              hasCivilServantRights: (app as any).medical_rights_has_civil_servant_rights || false,
              otherRights: (app as any).medical_rights_other_rights || ''
            };

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
            const staffInfo = {
              position: (app as any).staff_position || '',
              department: (app as any).staff_department || '',
              startWork: (app as any).staff_start_work || ''
            };

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
            const transformedApp = {
              ...app,
              registeredAddress,
              currentAddressDetail,
              emergencyAddressDetail,
              spouseInfo,
              emergencyWorkplace,
              medicalRights,
              staffInfo,
              emergencyContactFirstName: (app as any).emergencyContactFirstName || '',
              emergencyContactLastName: (app as any).emergencyContactLastName || ''
            };

            if (transformedApp.profileImage) {
              console.log('‚úÖ ‡πÉ‡∏ä‡πâ profileImage ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:', transformedApp.profileImage);
              return transformedApp;
            } else if (transformedApp.id) {
              // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° ID ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ register
              try {
                const jpgPath = `/api/image?file=profile_${transformedApp.id}.jpg`;
                console.log('üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤ JPG path:', jpgPath);
                const jpgResponse = await fetch(jpgPath);
                if (jpgResponse.ok) {
                  console.log('‚úÖ ‡∏û‡∏ö JPG image:', jpgPath);
                  return { ...transformedApp, profileImage: jpgPath };
                } else {
                  const pngPath = `/api/image?file=profile_${transformedApp.id}.png`;
                  console.log('üîç ‡∏•‡∏≠‡∏á‡∏´‡∏≤ PNG path:', pngPath);
                  const pngResponse = await fetch(pngPath);
                  if (pngResponse.ok) {
                    console.log('‚úÖ ‡∏û‡∏ö PNG image:', pngPath);
                    return { ...transformedApp, profileImage: pngPath };
                  } else {
                    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID:', transformedApp.id);
                    return transformedApp;
                  }
                }
              } catch (error) {
                console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', error);
                return transformedApp;
              }
            }
            return transformedApp;
          }));
          
          setApplications(processedData);
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
          console.log('üìä Processing data for stats:', processedData.length, 'applications');
          
          const approvedCount = processedData.filter((app: ApplicationData) => 
            app.status === 'approved' || app.status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || app.status === 'HIRED'
          ).length;
          
          const pendingCount = processedData.filter((app: ApplicationData) => 
            app.status === 'pending' || app.status === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || app.status === 'PENDING'
          ).length;
          
          const newStats = {
            total: processedData.length,
            pending: pendingCount,
            approved: approvedCount
          };
          
          console.log('üìä Stats calculation:', {
            total: newStats.total,
            pending: newStats.pending,
            approved: newStats.approved,
            approvedCount: approvedCount,
            pendingCount: pendingCount,
            allStatuses: processedData.map(app => ({ id: app.id, status: app.status }))
          });
          
          setStats(newStats);
          console.log('üìä Stats updated:', newStats);
          
        } else {
          console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô response:', responseData);
          setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô');
        }
      } else {
        console.error('‚ùå ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response.status, response.statusText);
        
        // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á error message ‡∏à‡∏≤‡∏Å response
        try {
          const errorData = await response.json();
          console.error('‚ùå Error response data:', errorData);
          setError(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${errorData.message || response.statusText}`);
        } catch (parseError) {
          console.error('‚ùå Cannot parse error response:', parseError);
          setError(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${response.status} ${response.statusText}`);
        }
      }
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
      if (error instanceof TypeError && error.message === 'Failed to fetch') {
        if (retryCount < 2) {
          console.log(`üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${retryCount + 1}/2)...`);
          setTimeout(() => {
            fetchApplications(retryCount + 1);
          }, 1000 * (retryCount + 1)); // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á
          return;
        }
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï');
      } else {
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } finally {
      setLoading(false);
    }
  };

  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const filteredApplications = applications.filter(app => {
    const matchesSearch = searchTerm === '' || 
      `${app.firstName} ${app.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||
      app.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      app.phone.includes(searchTerm);
    
    const matchesStatus = statusFilter === 'all' || app.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö modal
  const pendingApplications = applications.filter(app => 
    app.status === 'pending' || app.status === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤'
  );
  
  const approvedApplications = applications.filter(app => 
    app.status === 'approved' || app.status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤'
  );

  const handleViewDetails = (application: ApplicationData) => {
    console.log('üîç handleViewDetails - Setting selectedApplication:', {
      id: application.id,
      status: application.status,
      name: `${application.firstName} ${application.lastName}`
    });
    setSelectedApplication(application);
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentStatus = application.status === 'approved' || application.status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' ? 'approved' : 'pending';
    setDetailStatus(currentStatus);
    console.log('üîç handleViewDetails - Set detailStatus to:', currentStatus);
    onDetailModalOpen();
  };

  const handleStatusChange = async (newStatus: string) => {
    if (!selectedApplication) return;
    
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:', {
      applicationId: selectedApplication.id,
      newStatus: newStatus,
      currentStatus: selectedApplication.status
    });
    
    try {
      const requestBody = { status: newStatus };
      console.log('üì§ Sending status change request:', {
        applicationId: selectedApplication.id,
        requestBody: requestBody,
        newStatus: newStatus,
        currentStatus: selectedApplication.status,
        detailStatus: detailStatus
      });
      
      const response = await fetch(`/api/resume-deposit/${selectedApplication.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      console.log('üì° API Response:', {
        status: response.status,
        ok: response.ok,
        statusText: response.statusText
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ API Success:', result);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô state
        setApplications(prev => {
          const updated = prev.map(app => 
            app.id === selectedApplication.id 
              ? { ...app, status: newStatus }
              : app
          );
          console.log('üîç Updated applications state:', {
            oldStatus: selectedApplication.status,
            newStatus: newStatus,
            updatedApp: updated.find(app => app.id === selectedApplication.id),
            totalApps: updated.length
          });
          return updated;
        });
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô modal ‡πÅ‡∏•‡∏∞ selectedApplication
        setDetailStatus(newStatus);
        setSelectedApplication(prev => {
          const updated = prev ? { ...prev, status: newStatus } : null;
          console.log('üîç Updated selectedApplication:', {
            prev: prev,
            updated: updated,
            newStatus: newStatus,
            prevStatus: prev?.status
          });
          return updated;
        });
        
        // ‡∏õ‡∏¥‡∏î modal ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        onDetailModalOpenChange();
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stats ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        setStats(prevStats => {
          const oldStatus = selectedApplication.status;
          const isNewApproved = newStatus === 'approved' || newStatus === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || newStatus === 'HIRED';
          const isOldApproved = oldStatus === 'approved' || oldStatus === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || oldStatus === 'HIRED';
          const isNewPending = newStatus === 'pending' || newStatus === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || newStatus === 'PENDING';
          const isOldPending = oldStatus === 'pending' || oldStatus === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || oldStatus === 'PENDING';
          
          const newStats = {
            ...prevStats,
            approved: isNewApproved && !isOldApproved 
              ? prevStats.approved + 1 
              : !isNewApproved && isOldApproved
              ? prevStats.approved - 1
              : prevStats.approved,
            pending: isNewPending && !isOldPending
              ? prevStats.pending + 1
              : !isNewPending && isOldPending
              ? prevStats.pending - 1
              : prevStats.pending
          };
          
          console.log('üìä Stats updated after status change:', {
            prevStats,
            newStats,
            oldStatus,
            newStatus,
            isNewApproved,
            isOldApproved,
            isNewPending,
            isOldPending
          });
          return newStats;
        });
        
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        console.log('‚úÖ Status updated successfully, refreshing data...');
        await fetchApplications();
        
        // ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ dashboard ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        localStorage.setItem('statusChanged', 'true');
        window.dispatchEvent(new StorageEvent('storage', {
          key: 'statusChanged',
          newValue: 'true',
          storageArea: localStorage
        }));
        
        alert(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "${newStatus}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } else {
        const errorData = await response.json();
        console.error('‚ùå API Error:', errorData);
        alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ'}`);
      }
    } catch (error) {
      console.error('‚ùå Network Error:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  const handleSelectApplication = (applicationId: string) => {
    setSelectedApplications(prev => 
      prev.includes(applicationId) 
        ? prev.filter(id => id !== applicationId)
        : [...prev, applicationId]
    );
  };

  const handleSelectAll = () => {
    if (selectedApplications.length === filteredApplications.length) {
      setSelectedApplications([]);
    } else {
      setSelectedApplications(filteredApplications.map(app => app.id));
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  const handleBulkStatusChange = async () => {
    if (selectedApplications.length === 0 || !bulkStatus) return;
    
    try {
      const promises = selectedApplications.map(id => 
        fetch(`/api/resume-deposit/${id}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status: bulkStatus }),
        })
      );

      const results = await Promise.all(promises);
      const successCount = results.filter(response => response.ok).length;
      
      if (successCount > 0) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô state
        setApplications(prev => 
          prev.map(app => 
            selectedApplications.includes(app.id)
              ? { ...app, status: bulkStatus }
              : app
          )
        );
        
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        setSelectedApplications([]);
        setBulkStatus('');
        setShowBulkModal(false);
        
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        fetchApplications();
        
        // ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ dashboard ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        localStorage.setItem('statusChanged', 'true');
        window.dispatchEvent(new StorageEvent('storage', {
          key: 'statusChanged',
          newValue: 'true',
          storageArea: localStorage
        }));
        
        alert(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      }
    } catch (error) {
      console.error('Error updating bulk status:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
    }
  };

  const handleClosePreviewModal = () => {
    setShowPreviewModal(false);
    setPreviewFile(null);
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  const handleSaveSuggestion = async () => {
    if (!selectedApplication || !suggestion.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞');
      return;
    }

    try {
      console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:', {
        applicationId: selectedApplication.id,
        suggestion: suggestion.trim()
      });

      const response = await fetch(`/api/resume-deposit/${selectedApplication.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          suggestion: suggestion.trim() 
        }),
        cache: 'no-store',
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state
        setApplications(prev => 
          prev.map(app => 
            app.id === selectedApplication.id 
              ? { ...app, suggestion: suggestion.trim() }
              : app
          )
        );
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï selectedApplication
        setSelectedApplication(prev => 
          prev ? { ...prev, suggestion: suggestion.trim() } : null
        );
        
        alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        setShowSuggestionModal(false);
        setSuggestion('');
      } else {
        const errorData = await response.json();
        console.error('‚ùå Error saving suggestion:', errorData);
        alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÑ‡∏î‡πâ'}`);
      }
    } catch (error) {
      console.error('‚ùå Network Error:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Spinner size="lg" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <p className="text-red-500 mb-4">{error}</p>
          <Button onClick={() => fetchApplications()}>‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-2">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h1>
        <p className="text-gray-600">‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
      </div>

      {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <Card className="bg-blue-50 border-blue-200 rounded-lg shadow-sm">
          <CardBody className="p-4">
            <div className="flex items-center">
              <UsersIcon className="w-8 h-8 text-blue-500" />
              <div className="ml-3">
                <p className="text-sm text-blue-600 font-medium">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                <p className="text-2xl font-bold text-blue-800">
                  {(() => {
                    console.log('üìä Stats card - total count:', stats.total);
                    return stats.total;
                  })()}
                </p>
              </div>
            </div>
          </CardBody>
        </Card>
        
        <Card className="bg-orange-50 border-orange-200 rounded-lg shadow-sm">
          <CardBody className="p-4">
            <div className="flex items-center">
              <ClockIcon className="w-8 h-8 text-orange-500" />
              <div className="ml-3">
                <p className="text-sm text-orange-600 font-medium">‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤</p>
                <p className="text-2xl font-bold text-orange-800">
                  {(() => {
                    console.log('üìä Stats card - pending count:', stats.pending);
                    return stats.pending;
                  })()}
                </p>
              </div>
            </div>
          </CardBody>
        </Card>
        
        <Card className="bg-green-50 border-green-200 rounded-lg shadow-sm">
          <CardBody className="p-4">
            <div className="flex items-center">
              <CheckCircleIcon className="w-8 h-8 text-green-500" />
              <div className="ml-3">
                <p className="text-sm text-green-600 font-medium">‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤</p>
                <p className="text-2xl font-bold text-green-800">
                  {(() => {
                    console.log('üìä Stats card - approved count:', stats.approved);
                    console.log('üìä Stats card - full stats object:', stats);
                    console.log('üìä Stats card - applications length:', applications.length);
                    return stats.approved;
                  })()}
                </p>
              </div>
            </div>
          </CardBody>
        </Card>
      </div>

      {/* ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á */}
      <Card className="mb-6">
        <CardBody className="p-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
            <Input
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢,‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              startContent={<MagnifyingGlassIcon className="w-4 h-4 text-gray-400" />}
              className="max-w-sm bg-white rounded-lg shadow-sm"
            />
  
            {/* ‡∏Å‡∏£‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢ */}
            <select
              value={selectedDepartmentId}
              onChange={(e) => setSelectedDepartmentId(e.target.value)}
              className="max-w-sm w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
            >
              <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
              {hospitalDepartments.map((dept) => (
                <option
                className="bg-white hover:bg-gray-100 rounded-lg"
                key={dept.id} value={dept.id}>
                  {dept.name}
                </option>
              ))}
            </select>
            
            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï */}
            <Button
              color="default"
              variant="flat"
              onPress={() => {
                setSearchTerm('');
                setSelectedDepartmentId('');
                setCurrentPage(1);
              }}
              className="max-w-24 bg-white text-gray-400 rounded-lg shadow-sm"
            >
              ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
            </Button>
            
            {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô */}
            {selectedApplications.length > 0 && (
              <Button
                color="warning"
                variant="solid"
                onPress={() => setShowBulkModal(true)}
                className="max-w-sm"
              >
                ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ({selectedApplications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
              </Button>
            )}
          </div>
 
        </CardBody>
      </Card>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <Card className="bg-white rounded-lg shadow-sm border border-gray-200">
        {/* <CardHeader className="bg-gray-50 rounded-t-lg border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-800">‡∏ù‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h2>
        </CardHeader> */}
        <CardBody className="p-0">
          <Table aria-label="Departments table" className="bg-white">
            <TableHeader className="bg-gray-100">
              <TableColumn className="bg-gray-100 text-gray-700 font-semibold rounded-l-lg">‡∏•‡∏≥‡∏î‡∏±‡∏ö</TableColumn>
              <TableColumn className="bg-gray-100 text-gray-700 font-semibold">‡∏ù‡πà‡∏≤‡∏¢</TableColumn>
              <TableColumn className="bg-gray-100 text-gray-700 font-semibold">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö</TableColumn>
              <TableColumn className="bg-gray-100 text-gray-700 font-semibold">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö</TableColumn>
              <TableColumn className="bg-gray-100 text-gray-700 font-semibold">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£</TableColumn>
              <TableColumn className="bg-gray-100 text-gray-700 font-semibold rounded-r-lg">‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</TableColumn>
            </TableHeader>
            <TableBody emptyContent="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£">
              {currentPageData.map((dept) => (
                  <TableRow key={dept.department} className="hover:bg-gray-50 transition-colors">
                    <TableCell className="bg-white border-b border-gray-200">
                      <p className="font-medium text-gray-800">{dept.index}</p>
                    </TableCell>
                    <TableCell className="bg-white border-b border-gray-200">
                      <p className="text-gray-700 font-medium">{dept.department}</p>
                    </TableCell>
                    <TableCell className="bg-white border-b border-gray-200">
                      <div className="space-y-1">
                        {dept.positions.map((position, idx) => (
                          <div key={idx} className="flex items-center justify-between">
                            <span className="text-sm text-gray-700">{position}</span>
                            
                          </div>
                        ))}
                      </div>
                    </TableCell>
                    <TableCell className="bg-white border-b border-gray-200">
                      <div className="text-center">
                        <span className="text-lg font-bold text-green-600">
                          {dept.positions.length}
                        </span>
                        <span className="text-sm text-gray-500 ml-1">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</span>
                      </div>
                    </TableCell>
                    <TableCell className="bg-white border-b border-gray-200">
                      <div className="text-center">
                        <span className="text-lg font-bold text-blue-600">
                          {dept.totalApplicants}
                        </span>
                        <span className="text-sm text-gray-500 ml-1">‡∏Ñ‡∏ô</span>
                      </div>
                    </TableCell>
                    <TableCell className="bg-white border-b border-gray-200">
                      <div className="flex items-center gap-2">
                        <Button
                          size="sm"
                          color="primary"
                          variant="flat"
                          startContent={<EyeIcon className="w-4 h-4" />}
                          onPress={() => {
                            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ô‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ
                            const applicantsInDept = filteredApplications.filter(app => 
                              app.department === dept.department
                            );
                            setSelectedPositionApplicants(applicantsInDept);
                            setShowPositionModal(true);
                          }}
                        >
                          ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
            </TableBody>
          </Table>
          
          {/* Custom Pagination */}
          {totalPages > 1 && (
            <div className="flex justify-center items-center space-x-2 mt-8 py-4 bg-white rounded-b-lg border-t border-gray-200">
              {/* Previous Button */}
              <button
                onClick={() => setCurrentPage(currentPage - 1)}
                disabled={currentPage === 1}
                className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                  currentPage === 1
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-300'
                }`}
              >
                ‚Äπ
              </button>

              {/* Page Numbers */}
              {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => {
                // Show first page, last page, current page, and pages around current page
                const shouldShow = 
                  pageNum === 1 || 
                  pageNum === totalPages || 
                  Math.abs(pageNum - currentPage) <= 1

                if (!shouldShow) {
                  // Show ellipsis
                  if (pageNum === 2 && currentPage > 4) {
                    return (
                      <span key={pageNum} className="px-3 py-2 text-gray-500">
                        ...
                      </span>
                    )
                  }
                  if (pageNum === totalPages - 1 && currentPage < totalPages - 3) {
                    return (
                      <span key={pageNum} className="px-3 py-2 text-gray-500">
                        ...
                      </span>
                    )
                  }
                  return null
                }

                return (
                  <button
                    key={pageNum}
                    onClick={() => setCurrentPage(pageNum)}
                    className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                      currentPage === pageNum
                        ? 'bg-blue-600 text-white'
                        : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-300'
                    }`}
                  >
                    {pageNum}
                  </button>
                )
              })}

              {/* Next Button */}
              <button
                onClick={() => setCurrentPage(currentPage + 1)}
                disabled={currentPage === totalPages}
                className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                  currentPage === totalPages
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-300'
                }`}
              >
                ‚Ä∫
              </button>
            </div>
          )}
        </CardBody>
      </Card>

      {/* Detail Modal */}
      <Modal 
        isOpen={isDetailModalOpen} 
        onOpenChange={onDetailModalOpenChange}
        size="5xl"
        scrollBehavior="inside"
        classNames={{
          base: "max-h-[90vh] bg-white rounded-2xl shadow-lg",
          body: "py-6",
          backdrop: "bg-black/50 backdrop-blur-sm",
          header: "bg-gray-50 rounded-t-2xl",
          footer: "bg-gray-50 rounded-b-2xl"
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              
              <ModalBody>
                {selectedApplication && (
                  <div className="space-y-8">
                    {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */}
                    <Card className="shadow-xl border-0 rounded-lg">
                      <CardHeader className="bg-gradient-to-r from-blue-500 via-indigo-500 to-blue-600 text-white relative overflow-hidden rounded-t-lg">
                        <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 to-indigo-400/20"></div>
                        <div className="relative flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                              <UserIcon className="w-6 h-6" />
                            </div>
                            <h2 className="text-xl font-semibold align-middle">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
                          </div>
                          {selectedApplication.status === 'HIRED' && (
                            <Chip
                              color="success"
                              variant="flat"
                              className="bg-green-100 text-green-800 border-green-300 "
                            >
                              ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤
                            </Chip>
                          )}
                        </div>
                      </CardHeader>
                      <CardBody className="p-8">
                        {/* ‡πë. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */}
                        <div className="mb-8">
                          <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
                            ‡πë. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                          </h3>
                          
                          {/* ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
                          <div className="mb-6">
                            <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                              ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
                            </h4>
                            
                            <div className="flex justify-center mb-6">
                              <div className="relative">
                                <img
                                  src={selectedApplication.profileImage ? 
                                    (selectedApplication.profileImage.startsWith('http') ?
                                      selectedApplication.profileImage :
                                      `/api/image?file=${encodeURIComponent(selectedApplication.profileImage)}`) :
                                    `/api/image?file=profile_${selectedApplication.id}.jpg`
                                  }
                                  alt="‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                                  className="w-32 h-32 rounded-full object-cover border-4 border-gray-200 shadow-lg"
                                  onError={(e) => {
                                    console.log('‚ùå Profile image load error, trying PNG:', selectedApplication.id);
                                    e.currentTarget.src = `/api/image?file=profile_${selectedApplication.id}.png`;
                                    e.currentTarget.onerror = () => {
                                      console.log('‚ùå No profile image found for ID:', selectedApplication.id);
                                      e.currentTarget.style.display = 'none';
                                      const fallback = e.currentTarget.nextElementSibling as HTMLElement;
                                      if (fallback) fallback.classList.remove('hidden');
                                    };
                                  }}
                                  onLoad={() => {
                                    console.log('‚úÖ Profile image loaded:', selectedApplication.id);
                                  }}
                                />
                                <div className="w-32 h-32 rounded-full bg-gray-200 border-4 border-gray-300 shadow-lg flex items-center justify-center hidden">
                                  <UserIcon className="w-16 h-16 text-gray-400" />
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* ‡πë.‡πë ‡∏ä‡∏∑‡πà‡∏≠ (‡∏ô‡∏≤‡∏¢/‡∏ô‡∏≤‡∏á/‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß) */}
                          <div className="mb-6">
                            <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                              ‡πë.‡πë ‡∏ä‡∏∑‡πà‡∏≠ (‡∏ô‡∏≤‡∏¢/‡∏ô‡∏≤‡∏á/‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß)
                            </h4>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.prefix || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.firstName || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.lastName || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {formatDateForDisplay(selectedApplication.birthDate || '') || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≤‡∏¢‡∏∏</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.age || '-'} ‡∏õ‡∏µ
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡πÄ‡∏û‡∏®</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {(() => {
                                    const gender = selectedApplication.gender;
                                    if (gender === 'MALE') return '‡∏ä‡∏≤‡∏¢';
                                    if (gender === 'FEMALE') return '‡∏´‡∏ç‡∏¥‡∏á';
                                    if (gender === '‡∏ä‡∏≤‡∏¢') return '‡∏ä‡∏≤‡∏¢';
                                    if (gender === '‡∏´‡∏ç‡∏¥‡∏á') return '‡∏´‡∏ç‡∏¥‡∏á';
                                    return gender || '-';
                                  })()}
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* ‡πë.‡πí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß */}
                          <div className="mb-6">
                            <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                              ‡πë.‡πí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
                            </h4>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {(() => {
                                    const status = selectedApplication.maritalStatus;
                                    if (status === 'SINGLE') return '‡πÇ‡∏™‡∏î';
                                    if (status === 'MARRIED') return '‡∏™‡∏°‡∏£‡∏™';
                                    if (status === 'DIVORCED') return '‡∏´‡∏¢‡πà‡∏≤';
                                    if (status === 'WIDOWED') return '‡∏´‡∏°‡πâ‡∏≤‡∏¢';
                                    if (status === 'UNKNOWN') return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
                                    if (status === '‡πÇ‡∏™‡∏î') return '‡πÇ‡∏™‡∏î';
                                    if (status === '‡∏™‡∏°‡∏£‡∏™') return '‡∏™‡∏°‡∏£‡∏™';
                                    if (status === '‡∏´‡∏¢‡πà‡∏≤') return '‡∏´‡∏¢‡πà‡∏≤';
                                    if (status === '‡∏´‡∏°‡πâ‡∏≤‡∏¢') return '‡∏´‡∏°‡πâ‡∏≤‡∏¢';
                                    return status || '-';
                                  })()}
                                </div>
                              </div>
                              {(selectedApplication.maritalStatus === 'MARRIED' || selectedApplication.maritalStatus === '‡∏™‡∏°‡∏£‡∏™') && (
                                <div className="space-y-2">
                                  <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™</label>
                                  <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                    {selectedApplication.spouse_first_name} {selectedApplication.spouse_last_name}
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>

                          {/* ‡πë.‡πì ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô */}
                          <div className="mb-6">
                            <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                              ‡πë.‡πì ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
                            </h4>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.idNumber || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≠‡∏Å‡πÇ‡∏î‡∏¢</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.idCardIssuedAt || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {formatDateForDisplay(selectedApplication.idCardIssueDate || '') || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {formatDateForDisplay(selectedApplication.idCardExpiryDate || '') || '-'}
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* ‡πë.‡πî ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
                          <div className="mb-6">
                            <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                              ‡πë.‡πî ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                            </h4>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.race || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.nationality || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏®‡∏≤‡∏™‡∏ô‡∏≤</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.religion || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.placeOfBirth || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.placeOfBirthProvince || '-'}
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* ‡πë.‡πî ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô */}
                          <div className="mb-6">
                            <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                              ‡πë.‡πî ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
                            </h4>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.houseNumber || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.villageNumber || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.alley || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ñ‡∏ô‡∏ô</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.road || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.subDistrict || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.district || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.province || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.postalCode || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.phone || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.registeredAddress?.mobile || '-'}
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* ‡πë.‡πï ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
                          <div className="mb-6">
                            <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                              ‡πë.‡πï ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                            </h4>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.houseNumber || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.villageNumber || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.alley || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ñ‡∏ô‡∏ô</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.road || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.subDistrict || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.district || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.province || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.postalCode || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.homePhone || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.currentAddressDetail?.mobilePhone || '-'}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </CardBody>
                    </Card>

                    {/* ‡πí. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ */}
                    <Card className="shadow-xl border-0 rounded-lg">
                      <CardHeader className="bg-gradient-to-r from-red-500 via-pink-500 to-red-600 text-white relative overflow-hidden">
                        <div className="absolute inset-0 bg-gradient-to-r from-red-400/20 to-pink-400/20"></div>
                        <div className="relative flex items-center gap-3">
                          <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                            <UsersIcon className="w-6 h-6" />
                          </div>
                          <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</h2>
                        </div>
                      </CardHeader>
                      <CardBody className="p-8">
                        {/* ‡πí. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ */}
                        <div className="mb-8">
                          <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
                            ‡πí. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
                          </h3>
                          
                          {/* ‡πí.‡πë ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ */}
                          <div className="mb-6">
                            <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                              ‡πí.‡πë ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                            </h4>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md ">
                                  {selectedApplication.emergencyContactFirstName} {selectedApplication.emergencyContactLastName}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.emergencyRelationship || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.emergencyPhone || '-'}
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* ‡πí.‡πí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô */}
                          <div className="mb-6">
                            <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                              ‡πí.‡πí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
                            </h4>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.emergency_workplace_name || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.emergency_workplace_district || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.emergency_workplace_province || '-'}
                                </div>
                              </div>
                              <div className="space-y-2">
                                <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                                <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                  {selectedApplication.emergency_workplace_phone || '-'}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </CardBody>
                    </Card>

                    {/* ‡πí. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ/‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© */}
                    <Card className="shadow-xl border-0 rounded-lg">
                      <CardHeader className="bg-gradient-to-r from-purple-500 via-violet-500 to-purple-600 text-white relative overflow-hidden">
                        <div className="absolute inset-0 bg-gradient-to-r from-purple-400/20 to-violet-400/20"></div>
                        <div className="relative flex items-center gap-3">
                          <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                            <DocumentTextIcon className="w-6 h-6" />
                          </div>
                          <h2 className="text-xl font-semibold">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©</h2>
                        </div>
                      </CardHeader>
                      <CardBody className="p-8">
                        {/* ‡πí. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ/‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© */}
                        <div className="mb-8">
                          <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
                            ‡πí. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ/‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
                          </h3>
                          
                          <div className="space-y-4">
                            <div className="space-y-2">
                              <label className="text-sm font-medium text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©</label>
                              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md min-h-[80px]">
                                {selectedApplication.skills || '-'}
                              </div>
                            </div>
                            <div className="space-y-2">
                              <label className="text-sm font-medium text-gray-700">‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ</label>
                              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                {selectedApplication.languages || '-'}
                              </div>
                            </div>
                            <div className="space-y-2">
                              <label className="text-sm font-medium text-gray-700">‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå</label>
                              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                {selectedApplication.computerSkills || '-'}
                              </div>
                            </div>
                            <div className="space-y-2">
                              <label className="text-sm font-medium text-gray-700">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</label>
                              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                {selectedApplication.certificates || '-'}
                              </div>
                            </div>
                            <div className="space-y-2">
                              <label className="text-sm font-medium text-gray-700">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á</label>
                              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                                {selectedApplication.references || '-'}
                              </div>
                            </div>
                          </div>
                        </div>
                      </CardBody>
                    </Card>

                    {/* ‡πì. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£ */}
                    <Card className="shadow-xl border-0 rounded-lg">
                      <CardHeader className="bg-gradient-to-r from-green-500 via-emerald-500 to-green-600 text-white relative overflow-hidden">
                        <div className="absolute inset-0 bg-gradient-to-r from-green-400/20 to-emerald-400/20"></div>
                        <div className="relative flex items-center gap-3">
                          <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                            <BriefcaseIcon className="w-6 h-6" />
                          </div>
                          <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h2>
                        </div>
                      </CardHeader>
                      <CardBody className="p-8">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</label>
                            <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                              {selectedApplication.expectedPosition || '-'}
                            </div>
                          </div>
                          <div className="space-y-2">
                            <label className="text-sm font-medium text-gray-700">‡∏ù‡πà‡∏≤‡∏¢</label>
                            <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                              {selectedApplication.department || '-'}
                            </div>
                          </div>
                          <div className="space-y-2">
                            <label className="text-sm font-medium text-gray-700">‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á</label>
                            <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                              {selectedApplication.expectedSalary || '-'}
                            </div>
                          </div>
                          <div className="space-y-2">
                            <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô</label>
                            <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-md">
                              {formatDateForDisplay(selectedApplication.availableDate || '') || '-'}
                            </div>
                          </div>
                        </div>
                      </CardBody>
                    </Card>

                    {/* ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö */}
                    <Card className="shadow-xl border-0 rounded-lg">
                      <CardHeader className="bg-gradient-to-r from-gray-500 via-slate-500 to-gray-600 text-white relative overflow-hidden">
                        <div className="absolute inset-0 bg-gradient-to-r from-gray-400/20 to-slate-400/20"></div>
                        <div className="relative flex items-center gap-3">
                          <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                            <DocumentTextIcon className="w-6 h-6" />
                          </div>
                          <h2 className="text-xl font-semibold">‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</h2>
                        </div>
                      </CardHeader>
                      <CardBody className="p-8">
                        {selectedApplication.documents ? (
                          <div className="space-y-3">
                            {Object.entries(selectedApplication.documents).map(([key, value], index) => {
                              if (!value || (Array.isArray(value) && value.length === 0)) return null;
                              
                              return (
                                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg border">
                                  <div className="flex items-center gap-3">
                                    <DocumentTextIcon className="w-5 h-5 text-blue-500" />
                                    <div>
                                      <p className="font-medium text-gray-900">
                                        {key === 'idCard' && '‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'}
                                        {key === 'houseRegistration' && '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô'}
                                        {key === 'militaryCertificate' && '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£'}
                                        {key === 'educationCertificate' && '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'}
                                        {key === 'medicalCertificate' && '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå'}
                                        {key === 'drivingLicense' && '‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà'}
                                        {key === 'nameChangeCertificate' && '‡πÉ‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠'}
                                        {key === 'otherDocuments' && '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ'}
                                      </p>
                                      <p className="text-sm text-gray-500">
                                        {Array.isArray(value) ? `${value.length} ‡πÑ‡∏ü‡∏•‡πå` : '1 ‡πÑ‡∏ü‡∏•‡πå'}
                                      </p>
                                    </div>
                                  </div>
                                  <div className="flex gap-2">
                                    <Button
                                      size="sm"
                                      color="primary"
                                      variant="flat"
                                      startContent={<EyeIcon className="w-4 h-4" />}
                                      onPress={() => {
                                        if (Array.isArray(value)) {
                                          value.forEach((filePath: string) => {
                                            window.open(`/api/image?path=${encodeURIComponent(filePath)}`, '_blank');
                                          });
                                        } else if (typeof value === 'string') {
                                          window.open(`/api/image?path=${encodeURIComponent(value)}`, '_blank');
                                        }
                                      }}
                                    >
                                      ‡∏î‡∏π
                                    </Button>
                                    <Button
                                      size="sm"
                                      color="default"
                                      variant="flat"
                                      startContent={<PrinterIcon className="w-4 h-4" />}
                                      onPress={() => {
                                        if (Array.isArray(value)) {
                                          value.forEach((filePath: string) => {
                                            window.open(`/api/image?path=${encodeURIComponent(filePath)}`, '_blank');
                                          });
                                        } else if (typeof value === 'string') {
                                          window.open(`/api/image?path=${encodeURIComponent(value)}`, '_blank');
                                        }
                                      }}
                                    >
                                      ‡∏û‡∏¥‡∏°‡∏û‡πå
                                    </Button>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        ) : (
                          <div className="text-center py-8 text-gray-500">
                            <DocumentTextIcon className="w-12 h-12 mx-auto mb-2 text-gray-300" />
                            <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</p>
                          </div>
                        )}
                      </CardBody>
                    </Card>

                    {/* ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
                    <Card className="shadow-xl border-0">
                      <CardHeader className="bg-gradient-to-r from-purple-500 via-violet-500 to-purple-600 text-white relative overflow-hidden">
                        <div className="absolute inset-0 bg-gradient-to-r from-purple-400/20 to-violet-400/20"></div>
                        <div className="relative flex items-center gap-3">
                          <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                            <DocumentTextIcon className="w-6 h-6" />
                          </div>
                          <h2 className="text-xl font-semibold">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</h2>
                        </div>
                      </CardHeader>
                      <CardBody className="p-8">
                        <div className="space-y-4">
                          <div className="flex items-center gap-4">
                            <label className="text-sm font-medium text-gray-700 min-w-[100px]">
                              ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
                            </label>
                            <Chip
                              color={selectedApplication?.status === 'approved' || selectedApplication?.status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || selectedApplication?.status === 'HIRED' ? 'success' : 'warning'}
                              variant="flat"
                              className={`font-medium ${
                                selectedApplication?.status === 'approved' || selectedApplication?.status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || selectedApplication?.status === 'HIRED' 
                                  ? 'bg-green-100 text-green-800 border-green-300' 
                                  : 'bg-orange-100 text-orange-800 border-orange-300'
                              }`}
                            >
                              {(() => {
                                const status = selectedApplication?.status;
                                console.log('üîç Chip rendering - selectedApplication.status:', status);
                                console.log('üîç Chip rendering - selectedApplication object:', selectedApplication);
                                const displayText = status === 'approved' || status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'HIRED' ? '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' : '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
                                console.log('üîç Chip rendering - displayText:', displayText);
                                return displayText;
                              })()}
                            </Chip>
                          </div>
                          
                          <div className="flex items-center gap-4">
                            <label className="text-sm font-medium text-gray-700 min-w-[100px]">
                              ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô:
                            </label>
                          <Select
                              placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà"
                            selectedKeys={detailStatus ? [detailStatus] : []}
                            onSelectionChange={(keys) => {
                              const key = Array.from(keys)[0] as string;
                              console.log('üîç Select onSelectionChange - Setting detailStatus:', key);
                              setDetailStatus(key || '');
                            }}
                            className="max-w-xs bg-white rounded-lg shadow-sm"
                              variant="bordered"
                            classNames={{
                              trigger: "bg-white border-gray-300",
                              value: "text-gray-900",
                              popover: "bg-white",
                              listbox: "bg-white"
                            }}
                          >
                            <SelectItem key="pending" className="bg-white hover:bg-gray-50">‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤</SelectItem>
                              <SelectItem key="approved" className="bg-white hover:bg-gray-50">‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤</SelectItem>

                          </Select>
                          </div>
                          
                          <div className="flex gap-2 pt-2">
                          <Button
                            color="primary"
                            onPress={() => {
                              console.log('üîç Save button clicked - detailStatus:', detailStatus);
                              console.log('üîç Save button clicked - selectedApplication:', selectedApplication);
                              handleStatusChange(detailStatus);
                            }}
                              className="min-w-[120px]"
                            >
                              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                            </Button>
                            <Button
                              color="default"
                              variant="light"
                              onPress={() => setDetailStatus(selectedApplication?.status || 'pending')}
                            >
                              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                          </Button>
                          </div>
                        </div>
                      </CardBody>
                    </Card>
                  </div>
                )}
              </ModalBody>
              <ModalFooter>
                <div className="flex gap-2">
                  <Button 
                    color="secondary" 
                    variant="bordered" 
                    onPress={() => {
                      setSuggestion(selectedApplication?.suggestion || '');
                      setShowSuggestionModal(true);
                    }}
                    startContent={<DocumentTextIcon className="w-4 h-4" />}
                  >
                    ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
                  </Button>
                  <Button color="primary" variant="solid" onPress={onClose}>‡∏õ‡∏¥‡∏î</Button>
                </div>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* Pending Applications Modal */}
      <Modal 
        isOpen={isPendingModalOpen} 
        onOpenChange={onPendingModalOpenChange}
        size="5xl"
        scrollBehavior="inside"
        classNames={{
          base: "max-h-[90vh] bg-gray-50 rounded-2xl shadow-lg",
          body: "py-6",
          backdrop: "bg-black/50 backdrop-blur-sm",
          header: "bg-gray-50 rounded-t-2xl",
          footer: "bg-gray-50 rounded-b-2xl"
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader>
                ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤"
              </ModalHeader>
              <ModalBody>
                <Table aria-label="Pending applications table">
                  <TableHeader className="bg-gray-100 rounded-t-lg">
                    <TableColumn className="bg-gray-100 rounded-t-lg">
                      <input
                        type="checkbox"
                        checked={selectedApplications.length === pendingApplications.length && pendingApplications.length > 0}
                        onChange={handleSelectAll}
                        className="rounded border-gray-300"
                      />
                    </TableColumn>
                    <TableColumn className="bg-gray-100 rounded-t-lg">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</TableColumn>
                    <TableColumn className="bg-gray-100 ">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</TableColumn>
                    <TableColumn className="bg-gray-100 ">‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô</TableColumn>
                    <TableColumn className="bg-gray-100 ">‡∏ù‡πà‡∏≤‡∏¢</TableColumn>
                    <TableColumn className="bg-gray-100 ">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</TableColumn>
                    <TableColumn className="bg-gray-100 rounded-t-lg">‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</TableColumn>
                  </TableHeader>
                  <TableBody emptyContent="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£">
                    {pendingApplications.map((application) => (
                      <TableRow key={application.id}>
                        <TableCell>
                          <input
                            type="checkbox"
                            checked={selectedApplications.includes(application.id)}
                            onChange={() => handleSelectApplication(application.id)}
                            className="rounded border-gray-300"
                          />
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-3">
                            {application.profileImage ? (
                              <img
                                src={application.profileImage}
                                alt="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                                className="w-10 h-10 rounded-full object-cover border-2 border-gray-200 shadow-sm "
                              />
                            ) : (
                              <Avatar
                                name={`${application.firstName} ${application.lastName}`}
                                size="sm"
                              />
                            )}
                            <div>
                              <p className="font-medium">
                                {application.prefix} {application.firstName} {application.lastName}
                              </p>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <p className="font-medium">{application.expectedPosition}</p>
                        </TableCell>
                        <TableCell>
                          <p className="text-gray-600">-</p>
                        </TableCell>
                        <TableCell>
                          <p className="text-gray-600">{application.department}</p>
                        </TableCell>
                        <TableCell>
                          <p className="text-sm text-gray-600">
                            {formatDateForDisplay(application.createdAt)}
                          </p>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Button
                              size="sm"
                              color="primary"
                              variant="flat"
                              startContent={<EyeIcon className="w-4 h-4" />}
                              onPress={() => handleViewDetails(application)}
                            >
                              ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </ModalBody>
              <ModalFooter>
                <Button color="primary" variant="solid" onPress={onClose}>‡∏õ‡∏¥‡∏î</Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* Approved Applications Modal */}
      <Modal 
        isOpen={isApprovedModalOpen} 
        onOpenChange={onApprovedModalOpenChange}
        size="5xl"
        scrollBehavior="inside"
        classNames={{
          base: "max-h-[90vh] bg-gray-50 rounded-2xl shadow-lg",
          body: "py-6",
          backdrop: "bg-black/50 backdrop-blur-sm",
          header: "bg-gray-50 rounded-t-2xl",
          footer: "bg-gray-50 rounded-b-2xl"
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader>
                ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤"
              </ModalHeader>
              <ModalBody>
                <Table aria-label="Approved applications table">
                  <TableHeader className="bg-gray-100 ">
                    <TableColumn className="bg-gray-100 rounded-t-lg">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</TableColumn>
                    <TableColumn className="bg-gray-100 ">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</TableColumn>
                    <TableColumn className="bg-gray-100 ">‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô</TableColumn>
                    <TableColumn className="bg-gray-100 ">‡∏ù‡πà‡∏≤‡∏¢</TableColumn>
                    <TableColumn className="bg-gray-100 ">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</TableColumn>
                    <TableColumn className="bg-gray-100 rounded-t-lg">‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</TableColumn>
                  </TableHeader>
                  <TableBody emptyContent="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£">
                    {approvedApplications.map((application) => (
                      <TableRow key={application.id}>
                        <TableCell>
                          <div className="flex items-center gap-3">
                            {application.profileImage ? (
                              <img
                                src={application.profileImage}
                                alt="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                                className="w-10 h-10 rounded-full object-cover border-2 border-gray-200 shadow-sm "
                              />
                            ) : (
                              <Avatar
                                name={`${application.firstName} ${application.lastName}`}
                                size="sm"
                              />
                            )}
                            <div>
                              <p className="font-medium">
                                {application.prefix} {application.firstName} {application.lastName}
                              </p>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <p className="font-medium">{application.expectedPosition}</p>
                        </TableCell>
                        <TableCell>
                          <p className="text-gray-600">-</p>
                        </TableCell>
                        <TableCell>
                          <p className="text-gray-600">{application.department}</p>
                        </TableCell>
                        <TableCell>
                          <p className="text-sm text-gray-600">
                            {formatDateForDisplay(application.createdAt)}
                          </p>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Button
                              size="sm"
                              color="primary"
                              variant="flat"
                              startContent={<EyeIcon className="w-4 h-4" />}
                              onPress={() => handleViewDetails(application)}
                            >
                              ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </ModalBody>
              <ModalFooter>
                <Button color="primary" variant="solid" onPress={onClose}>‡∏õ‡∏¥‡∏î</Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* Position Applicants Modal */}
      <Modal 
        isOpen={showPositionModal} 
        onOpenChange={setShowPositionModal}
        size="5xl"
        scrollBehavior="inside"
        classNames={{
          base: "max-h-[90vh] bg-white rounded-2xl shadow-lg",
          body: "py-6",
          backdrop: "bg-black/50 backdrop-blur-sm",
          header: "bg-gray-50 rounded-t-2xl",
          footer: "bg-gray-50 rounded-b-2xl"
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader>
                <div>
                  <h3 className="text-lg font-semibold">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ô‡∏ù‡πà‡∏≤‡∏¢</h3>
                  {selectedPositionApplicants.length > 0 && (
                    <p className="text-sm text-gray-500">
                      {selectedPositionApplicants[0].department}
                    </p>
                  )}
                </div>
              </ModalHeader>
              <ModalBody>
                <Table aria-label="Position applicants table">
                  <TableHeader>
                    <TableColumn>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</TableColumn>
                    <TableColumn>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</TableColumn>
                    <TableColumn>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</TableColumn>
                    <TableColumn>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableColumn>
                    <TableColumn>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</TableColumn>
                    <TableColumn>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</TableColumn>
                  </TableHeader>
                  <TableBody emptyContent="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£">
                    {selectedPositionApplicants.map((applicant) => (
                      <TableRow key={applicant.id}>
                        <TableCell>
                          <div className="flex items-center gap-3">
                            {applicant.profileImage ? (
                              <img
                                src={applicant.profileImage}
                                alt="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                                className="w-10 h-10 rounded-full object-cover border-2 border-gray-200 shadow-sm"
                              />
                            ) : (
                              <Avatar
                                name={`${applicant.firstName} ${applicant.lastName}`}
                                size="sm"
                              />
                            )}
                            <div>
                              <p className="font-medium">
                                {applicant.prefix} {applicant.firstName} {applicant.lastName}
                              </p>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <p className="text-gray-600">{applicant.email}</p>
                        </TableCell>
                        <TableCell>
                          <p className="text-gray-600">{applicant.phone}</p>
                        </TableCell>
                        <TableCell>
                          <Chip
                            color={(() => {
                              const status = applicant.status;
                              if (status === 'approved' || status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'HIRED') {
                                return 'success';
                              } else if (status === 'pending' || status === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'PENDING') {
                                return 'warning';
                              } else if (status === 'REVIEWING') {
                                return 'primary';
                              } else if (status === 'CONTACTED') {
                                return 'secondary';
                              } else if (status === 'REJECTED') {
                                return 'danger';
                              } else if (status === 'ARCHIVED') {
                                return 'default';
                              } else {
                                return 'warning';
                              }
                            })()}
                            variant="flat"
                            size="sm"
                            className={(() => {
                              const status = applicant.status;
                              if (status === 'approved' || status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'HIRED') {
                                return 'bg-green-100 text-green-800 border-green-300';
                              } else if (status === 'pending' || status === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'PENDING') {
                                return 'bg-orange-100 text-orange-800 border-orange-300';
                              } else {
                                return '';
                              }
                            })()}
                          >
                            {(() => {
                              const status = applicant.status;
                              if (status === 'approved' || status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'HIRED') {
                                return '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
                              } else if (status === 'pending' || status === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'PENDING') {
                                return '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
                              } else if (status === 'REVIEWING') {
                                return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
                              } else if (status === 'CONTACTED') {
                                return '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß';
                              } else if (status === 'REJECTED') {
                                return '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
                              } else if (status === 'ARCHIVED') {
                                return '‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£';
                              } else {
                                return status || '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
                              }
                            })()}
                          </Chip>
                        </TableCell>
                        <TableCell>
                          <p className="text-sm text-gray-600">
                            {formatDateForDisplay(applicant.createdAt)}
                          </p>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Button
                              size="sm"
                              color="primary"
                              variant="flat"
                              startContent={<EyeIcon className="w-4 h-4" />}
                              onPress={() => {
                                handleViewDetails(applicant);
                                setShowPositionModal(false);
                              }}
                            >
                              ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </ModalBody>
              <ModalFooter>
                <Button color="primary" variant="solid" onPress={onClose}>‡∏õ‡∏¥‡∏î</Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* Bulk Status Change Modal */}
      <Modal 
        isOpen={showBulkModal} 
        onClose={() => setShowBulkModal(false)}
        size="md"
        classNames={{
          base: "max-h-[90vh] bg-white rounded-2xl shadow-lg",
          body: "py-6",
          backdrop: "bg-black/50 backdrop-blur-sm",
          header: "bg-white rounded-t-2xl",
          footer: "bg-white rounded-b-2xl"
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="bg-gradient-to-r from-orange-500 to-red-500 text-white">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold">‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô</h3>
                    <p className="text-sm text-orange-100">
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {selectedApplications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    </p>
                  </div>
                </div>
              </ModalHeader>
              <ModalBody className="p-6">
                <div className="space-y-6">
                  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="text-sm font-semibold text-gray-700 mb-3">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</h4>
                    <div className="max-h-32 overflow-y-auto space-y-2">
                      {selectedApplications.map(id => {
                        const app = applications.find(a => a.id === id);
                        return app ? (
                          <div key={id} className="flex items-center justify-between bg-white rounded px-3 py-2">
                            <span className="text-sm text-gray-700">
                              {app.prefix} {app.firstName} {app.lastName}
                            </span>
                            <Chip
                              color={(() => {
                                const status = app.status;
                                if (status === 'approved' || status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'HIRED') {
                                  return 'success';
                                } else if (status === 'pending' || status === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'PENDING') {
                                  return 'warning';
                                } else if (status === 'REVIEWING') {
                                  return 'primary';
                                } else if (status === 'CONTACTED') {
                                  return 'secondary';
                                } else if (status === 'REJECTED') {
                                  return 'danger';
                                } else if (status === 'ARCHIVED') {
                                  return 'default';
                                } else {
                                  return 'warning';
                                }
                              })()}
                              variant="flat"
                              size="sm"
                              className={(() => {
                                const status = app.status;
                                if (status === 'approved' || status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'HIRED') {
                                  return 'bg-green-100 text-green-800 border-green-300';
                                } else if (status === 'pending' || status === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'PENDING') {
                                  return 'bg-orange-100 text-orange-800 border-orange-300';
                                } else {
                                  return '';
                                }
                              })()}
                            >
                              {(() => {
                                const status = app.status;
                                if (status === 'approved' || status === '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'HIRED') {
                                  return '‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
                                } else if (status === 'pending' || status === '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤' || status === 'PENDING') {
                                  return '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
                                } else if (status === 'REVIEWING') {
                                  return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
                                } else if (status === 'CONTACTED') {
                                  return '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß';
                                } else if (status === 'REJECTED') {
                                  return '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
                                } else if (status === 'ARCHIVED') {
                                  return '‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£';
                                } else {
                                  return status || '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
                                }
                              })()}
                            </Chip>
                          </div>
                        ) : null;
                      })}
                    </div>
                  </div>

                  {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà */}
                  <div className="space-y-3">
                    <label className="text-sm font-medium text-gray-700">
                      ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô:
                    </label>
                    <Select
                      placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà"
                      value={bulkStatus}
                      onChange={(e) => setBulkStatus(e.target.value)}
                      variant="bordered"
                      className="w-full bg-white rounded-lg shadow-sm"
                      classNames={{
                        trigger: "bg-white border-gray-300",
                        value: "text-gray-900",
                        popover: "bg-white",
                        listbox: "bg-white"
                      }}
                    >
                      <SelectItem key="pending" className="bg-white hover:bg-gray-50">‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤</SelectItem>
                      <SelectItem key="approved" className="bg-white hover:bg-gray-50">‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤</SelectItem>

                    </Select>
                  </div>

                  {/* ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div className="flex items-start gap-3">
                      <svg className="w-5 h-5 text-yellow-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                      </svg>
                      <div>
                        <h4 className="text-sm font-semibold text-yellow-800">‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h4>
                        <p className="text-sm text-yellow-700 mt-1">
                          ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠ {selectedApplications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ 
                          ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </ModalBody>
              <ModalFooter className="bg-gray-50">
                <Button 
                  color="default" 
                  variant="light" 
                  onPress={() => setShowBulkModal(false)}
                  className="mr-2"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Button>
                <Button 
                  color="warning" 
                  onPress={handleBulkStatusChange}
                  disabled={!bulkStatus}
                  className="min-w-[120px]"
                >
                  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* Suggestion Modal */}
      <Modal 
        isOpen={showSuggestionModal} 
        onClose={() => setShowSuggestionModal(false)}
        size="lg"
        classNames={{
          base: "max-h-[90vh] bg-white rounded-2xl shadow-lg",
          body: "py-6",
          backdrop: "bg-black/50 backdrop-blur-sm",
          header: "bg-gray-50 rounded-t-2xl",
          footer: "bg-gray-50 rounded-b-2xl"
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader>
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <DocumentTextIcon className="w-6 h-6 text-blue-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold">‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h3>
                    <p className="text-sm text-gray-500">
                      {selectedApplication?.prefix} {selectedApplication?.firstName} {selectedApplication?.lastName}
                    </p>
                  </div>
                </div>
              </ModalHeader>
              <ModalBody>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
                    </label>
                    <textarea
                      placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                      value={suggestion}
                      onChange={(e) => setSuggestion(e.target.value)}
                      className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      rows={4}
                    />
                  </div>
                  
                  {selectedApplication?.suggestion && (
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <h4 className="text-sm font-medium text-gray-700 mb-2">‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°:</h4>
                      <p className="text-sm text-gray-600 whitespace-pre-wrap">
                        {selectedApplication.suggestion}
                      </p>
                    </div>
                  )}
                </div>
              </ModalBody>
              <ModalFooter>
                <div className="flex gap-2">
                  <Button 
                    color="default" 
                    variant="light" 
                    onPress={() => setShowSuggestionModal(false)}
                    className="mr-2"
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </Button>
                  <Button 
                    color="primary" 
                    onPress={handleSaveSuggestion}
                    disabled={!suggestion.trim()}
                    className="min-w-[120px]"
                  >
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                  </Button>
                </div>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </div>
  );
}