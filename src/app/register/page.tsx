'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useSession } from 'next-auth/react';
import {
  Card,
  CardHeader,
  CardBody,
  Button
} from '@heroui/react';
import { 
  UserIcon, 
  AcademicCapIcon, 
  BriefcaseIcon, 
  DocumentTextIcon,
  PlusIcon,
  TrashIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon
} from '@heroicons/react/24/outline';
import ThaiDatePicker from './components/ThaiDatePicker';

interface FormData {
  profileImage?: File;
  prefix: string;
  firstName: string;
  lastName: string;
  idNumber: string;
  idCardIssuedAt: string;
  idCardIssueDate: string;
  idCardExpiryDate: string;
  birthDate: string;
  age: string;
  race?: string;
  placeOfBirth?: string;
  placeOfBirthProvince?: string;
  gender: string;
  nationality: string;
  religion: string;
  maritalStatus: string;
  addressAccordingToHouseRegistration: string;
  currentAddress: string;
  phone: string;
  email: string;
  emergencyContact: string;
  emergencyContactFirstName?: string;
  emergencyContactLastName?: string;
  emergencyPhone: string;
  emergencyRelationship?: string;
  emergencyAddress?: {
    houseNumber: string;
    villageNumber: string;
    alley: string;
    road: string;
    subDistrict: string;
    district: string;
    province: string;
    postalCode: string;
    phone?: string;
  };
  emergencyWorkplace?: {
    name: string;
    district: string;
    province: string;
    phone: string;
  };
  education: Array<{
    level: string;
    institution: string;
    major: string;
    year: string;
    gpa: string;
  }>;
  workExperience: Array<{
    position: string;
    company: string;
    startDate: string;
    endDate: string;
    salary: string;
    reason: string;
    district: string;
    province: string;
    phone: string;
  }>;
  previousGovernmentService: Array<{
    position: string;
    department: string;
    reason: string;
    date: string;
    type?: string;
  }>;
  skills: string;
  languages: string;
  computerSkills: string;
  certificates: string;
  references: string;
  appliedPosition: string;
  expectedSalary: string;
  availableDate: string;
  currentWork: boolean;
  department: string;
  applicantSignature: string;
  applicationDate: string;
  documents?: {
    idCard?: File | { name: string; uploaded: boolean; file?: File };
    houseRegistration?: File | { name: string; uploaded: boolean; file?: File };
    militaryCertificate?: File | { name: string; uploaded: boolean; file?: File };
    educationCertificate?: File | { name: string; uploaded: boolean; file?: File };
    medicalCertificate?: File | { name: string; uploaded: boolean; file?: File };
    drivingLicense?: File | { name: string; uploaded: boolean; file?: File };
    nameChangeCertificate?: File | { name: string; uploaded: boolean; file?: File };
    otherDocuments?: File[] | { name: string; uploaded: boolean; file?: File }[];
  };
  multipleEmployers?: string[]; // Added for multipleEmployers
  spouseInfo?: {
    firstName: string;
    lastName: string;
  };
  registeredAddress?: {
    houseNumber: string;
    villageNumber: string;
    alley: string;
    road: string;
    subDistrict: string;
    district: string;
    province: string;
    postalCode: string;
    phone?: string;
    mobile?: string;
  };
  currentAddressDetail?: {
    houseNumber: string;
    villageNumber: string;
    alley: string;
    road: string;
    subDistrict: string;
    district: string;
    province: string;
    postalCode: string;
    homePhone: string;
    mobilePhone: string;
  };
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
  medicalRights?: {
    hasUniversalHealthcare: boolean;
    universalHealthcareHospital: string;
    hasSocialSecurity: boolean;
    socialSecurityHospital: string;
    dontWantToChangeHospital: boolean;
    wantToChangeHospital: boolean;
    newHospital: string;
    hasCivilServantRights: boolean;
    otherRights: string;
  };
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢
  staffInfo?: {
    position: string;
    department: string;
    startWork: string;
  };
}

export default function ApplicationForm() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const searchParams = useSearchParams();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [profileImage, setProfileImage] = useState<string | null>(null);
  const [isProfileLoaded, setIsProfileLoaded] = useState(false);
  const [uploadProgress, setUploadProgress] = useState<number>(0);
  const [isUploading, setIsUploading] = useState<boolean>(false);
  const [copyFromRegisteredAddress, setCopyFromRegisteredAddress] = useState(false);
  
  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• department ‡πÅ‡∏•‡∏∞ resumeId ‡∏à‡∏≤‡∏Å URL parameters (decode ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ encode ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
  const departmentName = (() => {
    const raw = searchParams.get('department') || '';
    try { return raw ? decodeURIComponent(raw) : ''; } catch { return raw; }
  })();
  const departmentId = searchParams.get('departmentId') || '';
  const resumeId = searchParams.get('resumeId') || '';
  // flag ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  const resumeFlag = searchParams.get('resume');
  // ‡πÅ‡∏¢‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (explicit)
  const queryResumeEmail = searchParams.get('resumeEmail') || '';
  const queryResumeUserId = searchParams.get('resumeUserId') || '';
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• department ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL
  useEffect(() => {
    if (departmentName) {
      setFormData(prev => ({
        ...prev,
        appliedPosition: '', // ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ appliedPosition ‡∏à‡∏≤‡∏Å departmentName
        department: departmentName,
        departmentId: departmentId || null
      }));
    }
  }, [departmentName, departmentId]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ /register ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ resumeId ‡∏´‡∏£‡∏∑‡∏≠ department ‡πÉ‡∏ô URL
  useEffect(() => {
    if (status === 'authenticated' && !resumeId && !departmentName && !departmentId && !resumeFlag) {
      fetchProfileData();
    }
  }, [status, resumeId, departmentName, departmentId, resumeFlag]);

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ?resume ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  useEffect(() => {
    if (status === 'authenticated' && resumeFlag) {
      fetchProfileData();
    }
  }, [status, resumeFlag]);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° resumeId ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÉ‡∏ô URL
  useEffect(() => {
    if (resumeId && status === 'authenticated') {
      console.log('üîç ‡∏û‡∏ö resumeId ‡πÉ‡∏ô URL:', resumeId);
      loadResumeById(resumeId);
    }
  }, [resumeId, status]);

  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢ resumeEmail/resumeUserId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ lineId ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  useEffect(() => {
    // intentionally disabled
  }, [status, queryResumeEmail, queryResumeUserId]);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ department ‡πÉ‡∏ô URL (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ)
  useEffect(() => {
    if ((departmentName || departmentId) && status === 'authenticated') {
      console.log('üîç ‡∏û‡∏ö department ‡πÉ‡∏ô URL:', { departmentName, departmentId });
      // ‡πÉ‡∏ä‡πâ loadResumeByDepartment ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ
      loadResumeByDepartment();
    }
  }, [departmentName, departmentId, status]);
  const [formData, setFormData] = useState<FormData>({
    profileImage: undefined,
    prefix: '',
    firstName: '',
    lastName: '',
    idNumber: '',
    idCardIssuedAt: '',
    idCardIssueDate: '',
    idCardExpiryDate: '',
    birthDate: '',
    age: '',
    race: '',
    placeOfBirth: '',
    placeOfBirthProvince: '',
    gender: '',
    nationality: '',
    religion: '',
    maritalStatus: '',
    addressAccordingToHouseRegistration: '',
    currentAddress: '',
    phone: '',
    email: '',
    emergencyContact: '',
    emergencyContactFirstName: '',
    emergencyContactLastName: '',
    emergencyPhone: '',
    emergencyRelationship: '',
    emergencyAddress: {
      houseNumber: '',
      villageNumber: '',
      alley: '',
      road: '',
      subDistrict: '',
      district: '',
      province: '',
      postalCode: '',
      phone: '',
    },
    emergencyWorkplace: {
      name: '',
      district: '',
      province: '',
      phone: '',
    },
    education: [],
    workExperience: [],
    previousGovernmentService: [],
    skills: '',
    languages: '',
    computerSkills: '',
    certificates: '',
    references: '',
    appliedPosition: '',
    expectedSalary: '',
    availableDate: '',
    currentWork: false,
    department: '',
    applicantSignature: '',
    applicationDate: '',
    documents: {},
    multipleEmployers: [], // Initialize multipleEmployers
    spouseInfo: {
      firstName: '',
      lastName: '',
    },
    registeredAddress: {
      houseNumber: '',
      villageNumber: '',
      alley: '',
      road: '',
      subDistrict: '',
      district: '',
      province: '',
      postalCode: '',
      phone: '',
      mobile: '',
    },
    currentAddressDetail: {
      houseNumber: '',
      villageNumber: '',
      alley: '',
      road: '',
      subDistrict: '',
      district: '',
      province: '',
      postalCode: '',
      homePhone: '',
      mobilePhone: '',
    },
    // ‡πÄ‡∏ûv‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    medicalRights: {
      hasUniversalHealthcare: false,
      universalHealthcareHospital: '',
      hasSocialSecurity: false,
      socialSecurityHospital: '',
      dontWantToChangeHospital: false,
      wantToChangeHospital: false,
      newHospital: '',
      hasCivilServantRights: false,
      otherRights: '',
    },
    staffInfo: {
      position: '',
      department: '',
      startWork: '',
    }
  });
  const [focusedInputs, setFocusedInputs] = useState<Record<string, boolean>>({});
  const [profileData, setProfileData] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [savedResume, setSavedResume] = useState<any | null>(null);
  const [showPreview, setShowPreview] = useState<boolean>(true);
  const [previewFile, setPreviewFile] = useState<{ file: File; name: string; type: string } | null>(null);
  const [showPreviewModal, setShowPreviewModal] = useState(false);
  const [uploadedDocuments, setUploadedDocuments] = useState<any[]>([]);
  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏•‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
  useEffect(() => {
    const loadMyResume = async () => {
      if (status !== 'authenticated') return;
      
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ resumeId ‡∏´‡∏£‡∏∑‡∏≠ department ‡πÉ‡∏ô URL ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      if (resumeId || departmentName) {
        console.log('üîç ‡∏°‡∏µ resumeId ‡∏´‡∏£‡∏∑‡∏≠ department ‡πÉ‡∏ô URL - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
        return;
      }
      
      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥...');
      setIsLoading(true);
      
      try {
        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ userId ‡πÅ‡∏•‡∏∞ lineId ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ email fallback
        const userId = (session?.user as any)?.id || '';
        const userLineId = (session?.user as any)?.lineId || (session?.user as any)?.sub || (session as any)?.profile?.userId || '';
        
        if (!userLineId) {
          console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ lineId ‡πÉ‡∏ô session - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
          setIsLoading(false);
          return;
        }
        
        console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ userId/lineId:', { userId, userLineId });
        
        let found: any = null;
        
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å resume-deposit API (‡πÉ‡∏ä‡πâ lineId ‡πÅ‡∏•‡∏∞ userId)
        try {
          const params = new URLSearchParams();
          if (userId) params.set('userId', String(userId));
          if (userLineId) params.set('lineId', String(userLineId));
          
          const url = `/api/resume-deposit?${params.toString()}`;
          console.log('üîç ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API:', url);
          
          const res = await fetch(url);
          console.log('üîç API Response status:', res.status);
          
        if (res.ok) {
          const json = await res.json().catch(() => ({}));
            const list = (json?.data || json || []) as any[];
            console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', list.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ lineId ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            const filtered = Array.isArray(list)
              ? list.filter((r) => (r?.lineId || '') === userLineId)
              : [];
              
            console.log('üîç Filtered results:', filtered.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
              
            if (filtered.length > 0) {
              // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
              filtered.sort((a, b) => new Date(b.createdAt || b.updatedAt || 0).getTime() - new Date(a.createdAt || a.updatedAt || 0).getTime());
              found = filtered[0];
              console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:', found.id);
        } else {
              console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lineId ‡∏ô‡∏µ‡πâ');
            }
          } else {
            console.log('‚ùå API response ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', res.status);
          }
        } catch (error) {
          console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:', error);
        }

        // 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤‡∏û‡∏ö)
        if (found?.id) {
          try {
            console.log('üîç ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ID:', found.id);
            const detail = await fetch(`/api/resume-deposit/${found.id}`);
            if (detail.ok) {
              const dj = await detail.json().catch(() => ({}));
              found = dj?.data || dj || found;
              console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            } else {
              console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ:', detail.status);
            }
          } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:', error);
          }
        }

        // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
        if (found) {
          console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...');
          console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:', {
            id: found.id,
            name: `${found.firstName} ${found.lastName}`,
            email: found.email,
            profileImageUrl: found.profileImageUrl,
            status: found.status
          });
          console.log('üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î profileImageUrl:', {
            exists: !!found.profileImageUrl,
            value: found.profileImageUrl,
            type: typeof found.profileImageUrl
          });
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà draft)
          if (found.status && found.status !== 'DRAFT') {
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß - ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
            // ‡πÑ‡∏°‡πà redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
            console.log('‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ');
            setSavedResume(found);
            applyResumeToFormInputs(found);
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
            if (found.profileImageUrl) {
              console.log('üîç ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:', found.profileImageUrl);
              const imagePath = `/api/image?file=${found.profileImageUrl}`;
              console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ profileImage state:', imagePath);
              setProfileImage(imagePath);
              console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
              
              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏î‡πâ‡∏ß‡∏¢
              setFormData(prev => ({
                ...prev,
                profileImage: new File([], found.profileImageUrl, { type: 'image/jpeg' })
              }));
              console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            } else {
              console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö profileImageUrl ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥');
              console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', Object.keys(found));
            }
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
            if (found.id) {
              console.log('üîç ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö...');
              try {
                const documents = await fetchUploadedDocuments(found.id);
                setUploadedDocuments(documents);
                console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', documents.length, '‡πÑ‡∏ü‡∏•‡πå');
              } catch (error) {
                console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö:', error);
              }
            }
            
            console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡πâ‡∏ß');
            return;
          } else {
            console.log('üîç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô draft - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°...');
            setSavedResume(found);
            applyResumeToFormInputs(found);
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
            if (found.profileImageUrl) {
              console.log('üîç ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:', found.profileImageUrl);
              const imagePath = `/api/image?file=${found.profileImageUrl}`;
              console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ profileImage state:', imagePath);
              setProfileImage(imagePath);
              console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
              
              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏î‡πâ‡∏ß‡∏¢
              setFormData(prev => ({
                ...prev,
                profileImage: new File([], found.profileImageUrl, { type: 'image/jpeg' })
              }));
              console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            } else {
              console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö profileImageUrl ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥');
              console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', Object.keys(found));
            }
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
            if (found.id) {
              console.log('üîç ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö...');
              try {
                const documents = await fetchUploadedDocuments(found.id);
                setUploadedDocuments(documents);
                console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', documents.length, '‡πÑ‡∏ü‡∏•‡πå');
              } catch (error) {
                console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö:', error);
              }
            }
            
            console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡πâ‡∏ß');
          }
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          console.log('üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ - ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢');
          console.log('‚úÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
        }
      } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:', error);
      } finally {
        setIsLoading(false);
        console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      }
    };
    
    loadMyResume();
  }, [status, resumeId, departmentName]);
  // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  const applyResumeToFormInputs = (resume: any) => {
    if (!resume) return;
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ enum ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà UI ‡πÉ‡∏ä‡πâ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
    const genderUi = resume.gender === 'MALE' ? '‡∏ä‡∏≤‡∏¢' : resume.gender === 'FEMALE' ? '‡∏´‡∏ç‡∏¥‡∏á' : (resume.gender || '');
    const maritalUi = resume.maritalStatus === 'SINGLE' ? '‡πÇ‡∏™‡∏î'
      : resume.maritalStatus === 'MARRIED' ? '‡∏™‡∏°‡∏£‡∏™'
      : resume.maritalStatus === 'DIVORCED' ? '‡∏´‡∏¢‡πà‡∏≤'
      : resume.maritalStatus === 'WIDOWED' ? '‡∏´‡∏°‡πâ‡∏≤‡∏¢'
      : (resume.maritalStatus || '');
    const mappedEducation = Array.isArray(resume.education)
      ? resume.education.map((e: any) => ({
          level: e.level || '',
          institution: e.school || '',
          major: e.major || '',
          year: e.endYear?.toString?.() || e.year?.toString?.() || '',
          gpa: (e.gpa != null ? String(e.gpa) : '')
        }))
      : [];
    const mappedWork = Array.isArray(resume.workExperience)
      ? resume.workExperience.map((w: any) => ({
          position: w.position || '',
          company: w.company || '',
          startDate: w.startDate ? new Date(w.startDate).toISOString().slice(0, 10) : '',
          endDate: w.endDate ? new Date(w.endDate).toISOString().slice(0, 10) : '',
          salary: w.salary || '',
          reason: w.description || '',
          district: w.district || '',
          province: w.province || '',
          phone: w.phone || ''
        }))
      : [];
    const mappedPreviousGovernmentService = Array.isArray(resume.previousGovernmentService)
      ? resume.previousGovernmentService.map((g: any) => ({
          position: g.position || '',
          department: g.department || '',
          reason: g.reason || '',
          date: g.date || '',
          type: g.type || 'civilServant'
        }))
      : [];

    setFormData((prev) => ({
      ...prev,
      prefix: resume.prefix ?? prev.prefix,
      firstName: resume.firstName ?? prev.firstName,
      lastName: resume.lastName ?? prev.lastName,
      idNumber: resume.idNumber ?? prev.idNumber,
      idCardIssuedAt: resume.idCardIssuedAt ?? prev.idCardIssuedAt,
      idCardIssueDate: resume.idCardIssueDate ? new Date(resume.idCardIssueDate).toISOString().slice(0, 10) : prev.idCardIssueDate,
      idCardExpiryDate: resume.idCardExpiryDate ? new Date(resume.idCardExpiryDate).toISOString().slice(0, 10) : prev.idCardExpiryDate,
      birthDate: resume.birthDate ? new Date(resume.birthDate).toISOString().slice(0, 10) : prev.birthDate,
      age: resume.age != null ? String(resume.age) : prev.age,
      gender: genderUi || prev.gender,
      race: resume.race ?? prev.race,
      placeOfBirth: resume.placeOfBirth ?? prev.placeOfBirth,
      placeOfBirthProvince: resume.placeOfBirthProvince ?? prev.placeOfBirthProvince,
      nationality: resume.nationality ?? prev.nationality,
      religion: resume.religion ?? prev.religion,
      maritalStatus: maritalUi || prev.maritalStatus,
      currentAddress: resume.address ?? prev.currentAddress,
      phone: resume.phone ?? prev.phone,
      email: resume.email ?? prev.email,
      emergencyContact: resume.emergencyContact ?? prev.emergencyContact,
      emergencyContactFirstName: resume.emergencyContactFirstName ?? prev.emergencyContactFirstName,
      emergencyContactLastName: resume.emergencyContactLastName ?? prev.emergencyContactLastName,
      emergencyPhone: resume.emergencyPhone ?? prev.emergencyPhone,
      emergencyRelationship: resume.emergencyRelationship ?? prev.emergencyRelationship,
      emergencyWorkplace: {
        name: resume.emergency_workplace_name || resume.emergencyWorkplace?.name || prev.emergencyWorkplace?.name || '',
        district: resume.emergency_workplace_district || resume.emergencyWorkplace?.district || prev.emergencyWorkplace?.district || '',
        province: resume.emergency_workplace_province || resume.emergencyWorkplace?.province || prev.emergencyWorkplace?.province || '',
        phone: resume.emergency_workplace_phone || resume.emergencyWorkplace?.phone || prev.emergencyWorkplace?.phone || ''
      },
      skills: resume.skills ?? prev.skills,
      languages: resume.languages ?? prev.languages,
      computerSkills: resume.computerSkills ?? prev.computerSkills,
      certificates: resume.certificates ?? prev.certificates,
      references: resume.references ?? prev.references,
      appliedPosition: resume.expectedPosition ?? prev.appliedPosition,
      expectedSalary: resume.expectedSalary ?? prev.expectedSalary,
      availableDate: resume.availableDate ? new Date(resume.availableDate).toISOString().slice(0, 10) : prev.availableDate,
      department: resume.department ?? (prev as any).department,
      ...(typeof (prev as any).unit !== 'undefined' ? { unit: resume.unit ?? (prev as any).unit } : {}),
      education: mappedEducation.length ? mappedEducation : prev.education,
      workExperience: mappedWork.length ? mappedWork : prev.workExperience,
      previousGovernmentService: mappedPreviousGovernmentService.length ? mappedPreviousGovernmentService : prev.previousGovernmentService,
      // ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
      registeredAddress: {
        houseNumber: resume.house_registration_house_number || prev.registeredAddress?.houseNumber || '',
        villageNumber: resume.house_registration_village_number || prev.registeredAddress?.villageNumber || '',
        alley: resume.house_registration_alley || prev.registeredAddress?.alley || '',
        road: resume.house_registration_road || prev.registeredAddress?.road || '',
        subDistrict: resume.house_registration_sub_district || prev.registeredAddress?.subDistrict || '',
        district: resume.house_registration_district || prev.registeredAddress?.district || '',
        province: resume.house_registration_province || prev.registeredAddress?.province || '',
        postalCode: resume.house_registration_postal_code || prev.registeredAddress?.postalCode || '',
        phone: resume.house_registration_phone || prev.registeredAddress?.phone || '',
        mobile: resume.house_registration_mobile || prev.registeredAddress?.mobile || ''
      },
      // ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      currentAddressDetail: {
        houseNumber: resume.current_address_house_number || prev.currentAddressDetail?.houseNumber || '',
        villageNumber: resume.current_address_village_number || prev.currentAddressDetail?.villageNumber || '',
        alley: resume.current_address_alley || prev.currentAddressDetail?.alley || '',
        road: resume.current_address_road || prev.currentAddressDetail?.road || '',
        subDistrict: resume.current_address_sub_district || prev.currentAddressDetail?.subDistrict || '',
        district: resume.current_address_district || prev.currentAddressDetail?.district || '',
        province: resume.current_address_province || prev.currentAddressDetail?.province || '',
        postalCode: resume.current_address_postal_code || prev.currentAddressDetail?.postalCode || '',
        homePhone: resume.current_address_phone || prev.currentAddressDetail?.homePhone || '',
        mobilePhone: resume.current_address_mobile || prev.currentAddressDetail?.mobilePhone || ''
      },
      // ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      emergencyAddress: {
        houseNumber: resume.emergency_address_house_number || prev.emergencyAddress?.houseNumber || '',
        villageNumber: resume.emergency_address_village_number || prev.emergencyAddress?.villageNumber || '',
        alley: resume.emergency_address_alley || prev.emergencyAddress?.alley || '',
        road: resume.emergency_address_road || prev.emergencyAddress?.road || '',
        subDistrict: resume.emergency_address_sub_district || prev.emergencyAddress?.subDistrict || '',
        district: resume.emergency_address_district || prev.emergencyAddress?.district || '',
        province: resume.emergency_address_province || prev.emergencyAddress?.province || '',
        postalCode: resume.emergency_address_postal_code || prev.emergencyAddress?.postalCode || '',
        phone: resume.emergency_address_phone || prev.emergencyAddress?.phone || ''
      },
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü‡∏•‡πå)
      documents: {
        idCard: resume.idCard ? { name: resume.idCard, uploaded: true } : prev.documents?.idCard,
        houseRegistration: resume.houseRegistration ? { name: resume.houseRegistration, uploaded: true } : prev.documents?.houseRegistration,
        militaryCertificate: resume.militaryCertificate ? { name: resume.militaryCertificate, uploaded: true } : prev.documents?.militaryCertificate,
        educationCertificate: resume.educationCertificate ? { name: resume.educationCertificate, uploaded: true } : prev.documents?.educationCertificate,
        medicalCertificate: resume.medicalCertificate ? { name: resume.medicalCertificate, uploaded: true } : prev.documents?.medicalCertificate,
        drivingLicense: resume.drivingLicense ? { name: resume.drivingLicense, uploaded: true } : prev.documents?.drivingLicense,
        nameChangeCertificate: resume.nameChangeCertificate ? { name: resume.nameChangeCertificate, uploaded: true } : prev.documents?.nameChangeCertificate,
        otherDocuments: resume.otherDocuments ? resume.otherDocuments.map((doc: any) => ({ name: doc, uploaded: true })) : prev.documents?.otherDocuments
      }
    }));
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    console.log('üîç applyResumeToFormInputs - Resume data:', resume);
    console.log('üîç applyResumeToFormInputs - ProfileImageUrl:', resume.profileImageUrl);
    console.log('üîç applyResumeToFormInputs - Resume ID:', resume.id);
    console.log('üîç applyResumeToFormInputs - Current profileImage state:', profileImage);
    console.log('üîç applyResumeToFormInputs - Will try to load profile image');
    
    if (resume.profileImageUrl) {
      console.log('‚úÖ applyResumeToFormInputs - Using profileImageUrl:', resume.profileImageUrl);
      // ‡πÉ‡∏ä‡πâ path ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö profile page
      const imagePath = `/api/image?file=${resume.profileImageUrl}`;
      console.log('‚úÖ Using API path for profile image:', imagePath);
      setProfileImage(imagePath);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏î‡πâ‡∏ß‡∏¢
      setFormData(prev => ({ 
        ...prev, 
        profileImage: new File([], resume.profileImageUrl, { type: 'image/jpeg' })
      }));
      
      console.log('‚úÖ applyResumeToFormInputs - Profile image state updated');
    } else if (resume.id) {
      // Try to find image by ID - ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      const checkImage = async () => {
        try {
          // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
          const possibleNames = [
            `profile_${resume.id}.jpg`,
            `profile_${resume.id}.jpeg`, 
            `profile_${resume.id}.png`,
            `profile_temp_${resume.id}.jpg`,
            `profile_temp_${resume.id}.jpeg`,
            `profile_temp_${resume.id}.png`
          ];
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ timestamp (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ timestamp)
          if (resume.id && resume.id.length > 10) {
            // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ timestamp ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            const timestamp = Date.now();
            const possibleTimestamps = [
              timestamp,
              timestamp - 1000, // 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô
              timestamp - 5000, // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô
              timestamp - 10000, // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô
              timestamp - 30000, // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô
              timestamp - 60000, // 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô
            ];
            
            for (const ts of possibleTimestamps) {
              possibleNames.push(`profile_temp_${ts}.jpg`);
              possibleNames.push(`profile_temp_${ts}.jpeg`);
              possibleNames.push(`profile_temp_${ts}.png`);
            }
            
            // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ timestamp ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö resume.id
            if (resume.id.match(/^\d+$/)) {
              const resumeTimestamp = parseInt(resume.id);
              const possibleResumeTimestamps = [
                resumeTimestamp,
                resumeTimestamp - 1000,
                resumeTimestamp - 5000,
                resumeTimestamp - 10000,
                resumeTimestamp - 30000,
                resumeTimestamp - 60000,
              ];
              
              for (const ts of possibleResumeTimestamps) {
                possibleNames.push(`profile_temp_${ts}.jpg`);
                possibleNames.push(`profile_temp_${ts}.jpeg`);
                possibleNames.push(`profile_temp_${ts}.png`);
              }
            }
            
            // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ timestamp ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö timestamp ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const currentTimestamp = Date.now();
            const possibleCurrentTimestamps = [
              currentTimestamp,
              currentTimestamp - 1000,
              currentTimestamp - 5000,
              currentTimestamp - 10000,
              currentTimestamp - 30000,
              currentTimestamp - 60000,
            ];
            
            for (const ts of possibleCurrentTimestamps) {
              possibleNames.push(`profile_temp_${ts}.jpg`);
              possibleNames.push(`profile_temp_${ts}.jpeg`);
              possibleNames.push(`profile_temp_${ts}.png`);
            }
          }
          
          let foundImage = false;
          for (const fileName of possibleNames) {
            const imagePath = `/api/image?file=${fileName}`;
            console.log('üîç applyResumeToFormInputs - Trying path:', imagePath);
            const response = await fetch(imagePath);
            if (response.ok) {
              console.log('‚úÖ applyResumeToFormInputs - Found image:', imagePath);
              setProfileImage(imagePath);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏î‡πâ‡∏ß‡∏¢
            setFormData(prev => ({
              ...prev,
                profileImage: new File([], fileName, { type: fileName.endsWith('.png') ? 'image/png' : 'image/jpeg' })
              }));
              foundImage = true;
              break;
            }
          }
          
          if (!foundImage) {
            console.log('‚ùå applyResumeToFormInputs - No image found for ID:', resume.id);
            console.log('üîç Tried these names:', possibleNames);
            console.log('‚ÑπÔ∏è No profile image found - user can upload a new one');
          }
        } catch (error) {
          console.log('‚ùå applyResumeToFormInputs - Error finding image:', error);
        }
      };
      checkImage();
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (resume.profileImageUrl) {
      const imagePath = `/api/image?file=${resume.profileImageUrl}`;
      console.log('üîç applyResumeToFormInputs - Setting profile image from profileImageUrl:', imagePath);
      console.log('üîç applyResumeToFormInputs - Setting profile image after refresh:', imagePath);
      setProfileImage(imagePath);
    }
  };
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ó‡πá‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (partial save)
  const saveCurrentTab = async () => {
    if (isSaving) return;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const validationErrors = validateForm();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ó‡πá‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const tabErrors = Object.keys(validationErrors).filter(key => {
        if (activeTab === 'personal') {
          return key.includes('prefix') || key.includes('firstName') || key.includes('lastName') || 
                 key.includes('age') || key.includes('birthDate') || key.includes('placeOfBirth') ||
                 key.includes('race') || key.includes('nationality') || key.includes('religion') ||
                 key.includes('gender') || key.includes('maritalStatus') || key.includes('idNumber') ||
                 key.includes('registeredAddress') || key.includes('currentAddress') || 
                 key.includes('emergency') || key.includes('spouse') || key.includes('medicalRights') ||
                 key.includes('multipleEmployers') || key.includes('appliedPosition') ||
                 key.includes('expectedSalary') || key.includes('availableDate') || key.includes('department');
        } else if (activeTab === 'education') {
          return key.includes('education');
        } else if (activeTab === 'work') {
          return key.includes('workExperience') || key.includes('previousGovernmentService');
        } else if (activeTab === 'skills') {
          return key.includes('skills') || key.includes('languages') || key.includes('computerSkills');
        } else if (activeTab === 'position') {
          return key.includes('appliedPosition') || key.includes('expectedSalary') || 
                 key.includes('availableDate') || key.includes('department');
        } else if (activeTab === 'documents') {
          return key.includes('documents');
        }
        return false;
      });
      
      if (tabErrors.length > 0) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏≤‡∏ö
        const errorMessages = tabErrors.map(key => validationErrors[key]).join(', ');
        
        // ‡πÅ‡∏™‡∏î‡∏á toast notification ‡πÅ‡∏ó‡∏ô alert
        const toast = document.createElement('div');
        toast.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 max-w-md';
        toast.innerHTML = `
          <div class="flex items-center">
            <div class="flex-1">
              <div class="font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (${tabErrors.length} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)</div>
              <div class="text-sm mt-1">${errorMessages}</div>
              <div class="text-xs mt-2 opacity-90">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î...</div>
            </div>
            <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        `;
        document.body.appendChild(toast);
        
        // ‡∏•‡∏ö toast ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
          if (toast.parentElement) {
            toast.parentElement.removeChild(toast);
          }
        }, 5000);
        
        // ‡πÅ‡∏™‡∏î‡∏á error summary ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        const errorSummary = document.createElement('div');
        errorSummary.id = 'error-summary';
        errorSummary.className = 'bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded-r-lg';
        errorSummary.innerHTML = `
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800">
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (${tabErrors.length} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
              </h3>
              <div class="mt-2 text-sm text-red-700">
                <ul class="list-disc list-inside space-y-1">
                  ${tabErrors.map(key => `<li>${validationErrors[key]}</li>`).join('')}
                </ul>
              </div>
            </div>
          </div>
        `;
        
        // ‡∏•‡∏ö error summary ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const existingErrorSummary = document.getElementById('error-summary');
        if (existingErrorSummary) {
          existingErrorSummary.remove();
        }
        
        // ‡πÅ‡∏ó‡∏£‡∏Å error summary ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        const formContainer = document.querySelector('.max-w-4xl');
        if (formContainer) {
          formContainer.insertBefore(errorSummary, formContainer.firstChild);
        }
        
        // Scroll ‡πÑ‡∏õ‡∏¢‡∏±‡∏á error ‡πÅ‡∏£‡∏Å
        if (tabErrors.length > 0) {
          scrollToError(tabErrors[0]);
        }
        return;
      }
    }
    try {
      setIsSaving(true);

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏ö
      const tab = activeTab;
      const partial: any = {};
      if (tab === 'personal') {
        Object.assign(partial, {
          prefix: formData.prefix || null,
          firstName: formData.firstName,
          lastName: formData.lastName,
          idNumber: formData.idNumber || null,
          idCardIssuedAt: formData.idCardIssuedAt || null,
          idCardIssueDate: formData.idCardIssueDate ? new Date(formData.idCardIssueDate) : null,
          idCardExpiryDate: formData.idCardExpiryDate ? new Date(formData.idCardExpiryDate) : null,
          birthDate: formData.birthDate ? new Date(formData.birthDate) : null,
          age: formData.age ? Number(formData.age) : null,
          race: formData.race || null,
          placeOfBirth: formData.placeOfBirth || null,
          placeOfBirthProvince: formData.placeOfBirthProvince || null,
          gender: formData.gender || 'UNKNOWN',
          nationality: formData.nationality || '‡πÑ‡∏ó‡∏¢',
          religion: formData.religion || null,
          maritalStatus: formData.maritalStatus || 'UNKNOWN',
          address: formData.currentAddress || formData.addressAccordingToHouseRegistration || null,
          // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
          house_registration_house_number: formData.registeredAddress?.houseNumber || null,
          house_registration_village_number: formData.registeredAddress?.villageNumber || null,
          house_registration_alley: formData.registeredAddress?.alley || null,
          house_registration_road: formData.registeredAddress?.road || null,
          house_registration_sub_district: formData.registeredAddress?.subDistrict || null,
          house_registration_district: formData.registeredAddress?.district || null,
          house_registration_province: formData.registeredAddress?.province || null,
          house_registration_postal_code: formData.registeredAddress?.postalCode || null,
          house_registration_phone: formData.registeredAddress?.phone || null,
          house_registration_mobile: formData.registeredAddress?.mobile || null,
          // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          current_address_house_number: formData.currentAddressDetail?.houseNumber || null,
          current_address_village_number: formData.currentAddressDetail?.villageNumber || null,
          current_address_alley: formData.currentAddressDetail?.alley || null,
          current_address_road: formData.currentAddressDetail?.road || null,
          current_address_sub_district: formData.currentAddressDetail?.subDistrict || null,
          current_address_district: formData.currentAddressDetail?.district || null,
          current_address_province: formData.currentAddressDetail?.province || null,
          current_address_postal_code: formData.currentAddressDetail?.postalCode || null,
          current_address_phone: formData.currentAddressDetail?.homePhone || null,
          current_address_mobile: formData.currentAddressDetail?.mobilePhone || null,
          // ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
          phone: formData.phone,
          email: formData.email,
          emergencyContact: formData.emergencyContact || `${formData.emergencyContactFirstName || ''} ${formData.emergencyContactLastName || ''}`.trim(),
          emergencyContactFirstName: formData.emergencyContactFirstName || null,
          emergencyContactLastName: formData.emergencyContactLastName || null,
          emergencyPhone: formData.emergencyPhone || null,
          emergencyRelationship: formData.emergencyRelationship || null,
          emergency_address_house_number: formData.emergencyAddress?.houseNumber || null,
          emergency_address_village_number: formData.emergencyAddress?.villageNumber || null,
          emergency_address_alley: formData.emergencyAddress?.alley || null,
          emergency_address_road: formData.emergencyAddress?.road || null,
          emergency_address_sub_district: formData.emergencyAddress?.subDistrict || null,
          emergency_address_district: formData.emergencyAddress?.district || null,
          emergency_address_province: formData.emergencyAddress?.province || null,
          emergency_address_postal_code: formData.emergencyAddress?.postalCode || null,
          emergency_address_phone: formData.emergencyAddress?.phone || null,
          emergency_workplace_name: formData.emergencyWorkplace?.name || null,
          emergency_workplace_district: formData.emergencyWorkplace?.district || null,
          emergency_workplace_province: formData.emergencyWorkplace?.province || null,
          emergency_workplace_phone: formData.emergencyWorkplace?.phone || null,
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™
          spouse_first_name: formData.spouseInfo?.firstName || null,
          spouse_last_name: formData.spouseInfo?.lastName || null,
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
          medical_rights_has_universal_healthcare: formData.medicalRights?.hasUniversalHealthcare || false,
          medical_rights_universal_healthcare_hospital: formData.medicalRights?.universalHealthcareHospital || null,
          medical_rights_has_social_security: formData.medicalRights?.hasSocialSecurity || false,
          medical_rights_social_security_hospital: formData.medicalRights?.socialSecurityHospital || null,
          medical_rights_dont_want_to_change_hospital: formData.medicalRights?.dontWantToChangeHospital || false,
          medical_rights_want_to_change_hospital: formData.medicalRights?.wantToChangeHospital || false,
          medical_rights_new_hospital: formData.medicalRights?.newHospital || null,
          medical_rights_has_civil_servant_rights: formData.medicalRights?.hasCivilServantRights || false,
          medical_rights_other_rights: formData.medicalRights?.otherRights || null,
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢ (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON)
          multiple_employers: formData.multipleEmployers ? JSON.stringify(formData.multipleEmployers) : null,
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          staff_position: formData.staffInfo?.position || null,
          staff_department: formData.staffInfo?.department || null,
          staff_start_work: formData.staffInfo?.startWork || null,
        });
      } else if (tab === 'education') {
        partial.education = (formData.education || []).map((e) => ({
          level: e.level,
          school: e.institution,
          major: e.major || null,
          endYear: e.year || undefined,
          gpa: e.gpa ? parseFloat(e.gpa) : undefined,
        }));
      } else if (tab === 'work') {
        partial.workExperience = (formData.workExperience || []).map((w) => ({
          position: w.position,
          company: w.company,
          startDate: w.startDate ? new Date(w.startDate) : null,
          endDate: w.endDate ? new Date(w.endDate) : null,
          isCurrent: !!formData.currentWork,
          description: w.reason || null,
          salary: w.salary || null,
          district: w.district || null,
          province: w.province || null,
          phone: w.phone || null,
        }));
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        partial.previousGovernmentService = (formData.previousGovernmentService || []).map((g) => ({
          position: g.position,
          department: g.department,
          reason: g.reason,
          date: g.date,
          type: g.type || 'civilServant', // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå type
        }));
      } else if (tab === 'skills') {
        Object.assign(partial, {
          skills: formData.skills || null,
          languages: formData.languages || null,
          computerSkills: formData.computerSkills || null,
          certificates: formData.certificates || null,
          references: formData.references || null,
        });
      } else if (tab === 'position') {
        Object.assign(partial, {
          expectedPosition: formData.appliedPosition || null,
          expectedSalary: formData.expectedSalary || null,
          availableDate: formData.availableDate ? new Date(formData.availableDate) : null,
          department: formData.department || null,
          unit: (formData as any).unit || null,
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          staff_position: formData.staffInfo?.position || null,
          staff_department: formData.staffInfo?.department || null,
          staff_start_work: formData.staffInfo?.startWork || null,
        });
      } else if (tab === 'documents') {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö documents ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• documents ‡πÉ‡∏ô partial ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÉ‡∏ô API
        Object.assign(partial, {
          // documents: formData.documents || null,
        });
      }
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏ô‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏¢‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡πÑ‡∏î‡πâ
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ savedResume.id ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ PATCH, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ POST
      console.log('üîç saveCurrentTab - savedResume:', savedResume);
      console.log('üîç saveCurrentTab - savedResume.id:', savedResume?.id);
      if (savedResume?.id) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        console.log('üîç saveCurrentTab - Using PATCH method (updating existing record)');
        console.log('‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß...');
        console.log('üìù Mode: UPDATE - ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß');
        const res = await fetch(`/api/resume-deposit/${savedResume.id}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(partial)
        });
        const json = await res.json().catch(() => ({}));
        if (!res.ok || json?.success === false) {
          const statusCode = res?.status || 'Unknown';
          const errorMessage = json?.message || `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (HTTP ${statusCode})`;
          console.error('‚ùå PATCH request failed:', errorMessage);
          // Fallback: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô 404) ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ POST
          if (statusCode === 404 || /‡πÑ‡∏°‡πà‡∏û‡∏ö/i.test(String(errorMessage))) {
            console.log('üîÅ PATCH not found ‚Üí fallback to POST create');
            const userId = (session?.user as any)?.id || null;
            const lineIdCandidate = (session?.user as any)?.lineId || (session?.user as any)?.sub || (session as any)?.profile?.userId || null;
            const createRes = await fetch('/api/resume-deposit', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                userId,
                lineId: lineIdCandidate,
                firstName: formData.firstName,
                lastName: formData.lastName,
                phone: formData.phone,
                email: formData.email,
                ...partial,
              })
            });
            const createJson = await createRes.json().catch(() => ({}));
            if (!createRes.ok || createJson?.success === false) {
              throw new Error(createJson?.message || '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            }
            setSavedResume(createJson.data || createJson);
            applyResumeToFormInputs(createJson.data || createJson);
            // Upload profile image along with personal tab save
            if (tab === 'personal' && formData.profileImage instanceof File) {
              try {
                const rid = (createJson?.data?.id || createJson?.id);
                if (rid) {
                  const imgFd = new FormData();
                  imgFd.append('profileImage', formData.profileImage);
                  imgFd.append('resumeId', String(rid));
                  const imgRes = await fetch('/api/profile-image/upload', { method: 'POST', body: imgFd });
                  if (!imgRes.ok) console.warn('‚ö†Ô∏è Profile image upload failed (fallback POST path):', imgRes.status);
                }
              } catch (e) {
                console.error('‚ö†Ô∏è Profile image upload error (fallback POST path):', e);
              }
            }
          } else {
          throw new Error(errorMessage);
          }
        } else {
          setSavedResume(json.data || json);
          applyResumeToFormInputs(json.data || json);
          
          // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          if (json.data?.profileImageUrl) {
            const imagePath = `/api/image?file=${json.data.profileImageUrl}`;
            console.log('üîç Reloading profile image after save (PATCH):', imagePath);
            setProfileImage(imagePath);
          }
          console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          // Upload profile image along with personal tab save
          if (tab === 'personal' && formData.profileImage instanceof File) {
            try {
              const rid = (json?.data?.id || json?.id || savedResume?.id);
              if (rid) {
                const imgFd = new FormData();
                imgFd.append('profileImage', formData.profileImage);
                imgFd.append('resumeId', String(rid));
                const imgRes = await fetch('/api/profile-image/upload', { method: 'POST', body: imgFd });
                if (!imgRes.ok) console.warn('‚ö†Ô∏è Profile image upload failed (PATCH path):', imgRes.status);
              }
            } catch (e) {
              console.error('‚ö†Ô∏è Profile image upload error (PATCH path):', e);
            }
          }
        }
      } else {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        console.log('üîç saveCurrentTab - Using POST method (creating new record)');
        console.log('‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...');
        console.log('üìù Mode: CREATE - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        const userId = (session?.user as any)?.id || null;
        const lineIdCandidate = (session?.user as any)?.lineId || (session?.user as any)?.sub || (session as any)?.profile?.userId || null;
        const res = await fetch('/api/resume-deposit', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId,
            lineId: lineIdCandidate,
            firstName: formData.firstName,
            lastName: formData.lastName,
            phone: formData.phone,
            email: formData.email,
            ...partial,
          })
        });
        const json = await res.json().catch(() => ({}));
        if (!res.ok || json?.success === false) {
          throw new Error(json?.message || '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }
        setSavedResume(json.data || json);
        applyResumeToFormInputs(json.data || json);
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (json.data?.profileImageUrl) {
          const imagePath = `/api/image?file=${json.data.profileImageUrl}`;
          console.log('üîç Reloading profile image after save (POST):', imagePath);
          setProfileImage(imagePath);
        }
        console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        // Upload profile image along with personal tab save
        if (tab === 'personal' && formData.profileImage instanceof File) {
          try {
            const rid = (json?.data?.id || json?.id);
            if (rid) {
              const imgFd = new FormData();
              imgFd.append('profileImage', formData.profileImage);
              imgFd.append('resumeId', String(rid));
              const imgRes = await fetch('/api/profile-image/upload', { method: 'POST', body: imgFd });
              if (!imgRes.ok) console.warn('‚ö†Ô∏è Profile image upload failed (POST path):', imgRes.status);
            }
          } catch (e) {
            console.error('‚ö†Ô∏è Profile image upload error (POST path):', e);
          }
        }
      }

      // ‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
      if (tab === 'documents') {
        console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        // Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
        window.location.href = '/dashboard';
      } else {
        const flow: Record<string, string> = {
          personal: 'education',
          education: 'work',
          work: 'skills',
          skills: 'position',
          position: 'documents'
        };
        const next = flow[tab as keyof typeof flow];
        if (next) setActiveTab(next);
        console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (err: any) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:', err);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${err.message || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`);
    } finally {
      setIsSaving(false);
    }
  };
  const [activeTab, setActiveTab] = useState('personal');
  const birthDateRef = useRef<HTMLInputElement | null>(null);
  const idCardIssueDateRef = useRef<HTMLInputElement | null>(null);
  const idCardExpiryDateRef = useRef<HTMLInputElement | null>(null);
  const availableDateRef = useRef<HTMLInputElement | null>(null);
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Random)
  const fillRandomData = () => {
    const prefixes = ['‡∏ô‡∏≤‡∏¢', '‡∏ô‡∏≤‡∏á', '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß'];
    const firstNames = ['‡∏™‡∏°‡∏ä‡∏≤‡∏¢', '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á', '‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå', '‡∏™‡∏°‡∏õ‡∏≠‡∏á', '‡∏™‡∏°‡πÉ‡∏à', '‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥', '‡∏™‡∏°‡∏û‡∏£', '‡∏™‡∏°‡∏Ñ‡∏¥‡∏î', '‡∏™‡∏°‡∏®‡∏£‡∏µ', '‡∏™‡∏°‡∏ö‡∏¥‡∏ô'];
    const lastNames = ['‡πÉ‡∏à‡∏î‡∏µ', '‡∏£‡∏±‡∏Å‡∏î‡∏µ', '‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏µ', '‡∏î‡∏µ‡πÉ‡∏à', '‡∏ú‡∏•‡∏¥‡∏ï‡∏î‡∏µ', '‡∏Ñ‡∏¥‡∏î‡∏î‡∏µ', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏µ', '‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏î‡∏µ', '‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏î‡∏µ', '‡∏ö‡∏¥‡∏ô‡∏î‡∏µ'];
    const races = ['‡πÑ‡∏ó‡∏¢', '‡∏à‡∏µ‡∏ô', '‡∏•‡∏≤‡∏ß', '‡∏Å‡∏±‡∏°‡∏û‡∏π‡∏ä‡∏≤', '‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°'];
    const nationalities = ['‡πÑ‡∏ó‡∏¢', '‡∏à‡∏µ‡∏ô', '‡∏•‡∏≤‡∏ß', '‡∏Å‡∏±‡∏°‡∏û‡∏π‡∏ä‡∏≤', '‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°'];
    const religions = ['‡∏û‡∏∏‡∏ó‡∏ò', '‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå', '‡∏≠‡∏¥‡∏™‡∏•‡∏≤‡∏°', '‡∏Æ‡∏¥‡∏ô‡∏î‡∏π', '‡∏ã‡∏¥‡∏Å‡∏Ç‡πå'];
    const maritalStatuses = ['‡πÇ‡∏™‡∏î', '‡∏™‡∏°‡∏£‡∏™', '‡∏´‡∏¢‡πà‡∏≤', '‡∏´‡∏°‡πâ‡∏≤‡∏¢'];
    const genders = ['‡∏ä‡∏≤‡∏¢', '‡∏´‡∏ç‡∏¥‡∏á'];
    const provinces = ['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á'];
    const districts = ['‡πÄ‡∏°‡∏∑‡∏≠‡∏á', '‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢', '‡πÅ‡∏°‡πà‡∏£‡∏¥‡∏°', '‡∏´‡∏≤‡∏á‡∏î‡∏á', '‡∏™‡∏±‡∏ô‡∏õ‡πà‡∏≤‡∏Ç‡πà‡∏≠‡∏¢'];
    const subDistricts = ['‡∏®‡∏£‡∏µ‡∏†‡∏π‡∏°‡∏¥', '‡∏™‡∏∏‡πÄ‡∏ó‡∏û', '‡∏ä‡πâ‡∏≤‡∏á‡πÄ‡∏ú‡∏∑‡∏≠‡∏Å', '‡∏´‡∏≤‡∏¢‡∏¢‡∏≤', '‡∏ß‡∏±‡∏î‡πÄ‡∏Å‡∏ï'];
    const institutions = ['‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏•', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà'];
    const majors = ['‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå'];
    const positions = ['‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£', '‡∏ô‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', '‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡πÅ‡∏û‡∏ó‡∏¢‡πå', '‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£', '‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡πå', '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£'];
    const companies = ['‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'];
    const skills = ['‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£', '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°', '‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤', '‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥', '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤'];
    const languages = ['‡πÑ‡∏ó‡∏¢', '‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©', '‡∏à‡∏µ‡∏ô', '‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô', '‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ', '‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™', '‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô'];
    const computerSkills = ['Microsoft Office', 'Excel', 'PowerPoint', 'Word', 'Google Workspace', '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö'];
    const certificates = ['‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°', '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ', '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'];
    const departments = ['‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ú‡∏•‡∏¥‡∏ï', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤'];

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡πà‡∏°
    const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    const randomGender = genders[Math.floor(Math.random() * genders.length)];
    const randomAge = Math.floor(Math.random() * 40) + 20; // ‡∏≠‡∏≤‡∏¢‡∏∏ 20-60
    const randomYear = new Date().getFullYear() - randomAge;
    const randomMonth = Math.floor(Math.random() * 12) + 1;
    const randomDay = Math.floor(Math.random() * 28) + 1;
    const randomBirthDate = `${randomYear}-${randomMonth.toString().padStart(2, '0')}-${randomDay.toString().padStart(2, '0')}`;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å
    const randomIdNumber = Math.floor(Math.random() * 9000000000000) + 1000000000000;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    const randomProvince = provinces[Math.floor(Math.random() * provinces.length)];
    const randomDistrict = districts[Math.floor(Math.random() * districts.length)];
    const randomSubDistrict = subDistricts[Math.floor(Math.random() * subDistricts.length)];
    const randomHouseNumber = Math.floor(Math.random() * 999) + 1;
    const randomVillageNumber = Math.floor(Math.random() * 99) + 1;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    const randomInstitution = institutions[Math.floor(Math.random() * institutions.length)];
    const randomMajor = majors[Math.floor(Math.random() * majors.length)];
    const randomGpa = (Math.random() * 2 + 2).toFixed(2); // GPA 2.00-4.00
    const randomGradYear = new Date().getFullYear() - Math.floor(Math.random() * 10); // 10 ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    const randomPosition = positions[Math.floor(Math.random() * positions.length)];
    const randomCompany = companies[Math.floor(Math.random() * companies.length)];
    const randomSalary = Math.floor(Math.random() * 50000) + 20000; // ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 20,000-70,000
    const randomStartYear = new Date().getFullYear() - Math.floor(Math.random() * 5);
    const randomEndYear = randomStartYear + Math.floor(Math.random() * 3) + 1;
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ
    const randomSkills = skills.slice(0, Math.floor(Math.random() * 4) + 2).join(', ');
    const randomLanguages = languages.slice(0, Math.floor(Math.random() * 3) + 1).join(', ');
    const randomComputerSkills = computerSkills.slice(0, Math.floor(Math.random() * 4) + 2).join(', ');
    const randomCertificates = certificates.slice(0, Math.floor(Math.random() * 3) + 1).join(', ');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
    const randomEmergencyFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const randomEmergencyLastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    const randomEmergencyPhone = `08${Math.floor(Math.random() * 90000000) + 10000000}`;
    const randomEmergencyRelationship = ['‡∏ö‡∏¥‡∏î‡∏≤', '‡∏°‡∏≤‡∏£‡∏î‡∏≤', '‡∏û‡∏µ‡πà‡∏ä‡∏≤‡∏¢', '‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡∏≤‡∏¢', '‡∏û‡∏µ‡πà‡∏™‡∏≤‡∏ß', '‡∏ô‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏ß', '‡∏™‡∏≤‡∏°‡∏µ', '‡∏†‡∏£‡∏£‡∏¢‡∏≤'][Math.floor(Math.random() * 8)];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô
    const randomAppliedPosition = positions[Math.floor(Math.random() * positions.length)];
    const randomExpectedSalary = Math.floor(Math.random() * 100000) + 30000; // ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á 30,000-130,000
    const randomDepartment = departments[Math.floor(Math.random() * departments.length)];
    const randomAvailableDate = new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]; // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÄ‡∏õ‡πá‡∏ô string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
    const randomDocuments = {
      idCard: `idCard_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.pdf`,
      houseRegistration: `houseRegistration_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.pdf`,
      militaryCertificate: randomGender === '‡∏ä‡∏≤‡∏¢' ? `militaryCertificate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.pdf` : undefined,
      educationCertificate: `educationCertificate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.pdf`,
      medicalCertificate: `medicalCertificate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.pdf`,
      drivingLicense: `drivingLicense_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.pdf`,
      nameChangeCertificate: Math.random() > 0.7 ? `nameChangeCertificate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.pdf` : undefined
    } as any; // ‡πÉ‡∏ä‡πâ any ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á type error

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isEmpty = (value: any): boolean => {
      if (value === null || value === undefined) return true;
      if (typeof value === 'string') return value.trim() === '';
      if (Array.isArray(value)) return value.length === 0;
      if (typeof value === 'object') return Object.keys(value).length === 0;
      return false;
    };

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏° - ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const newFormData = {
      ...formData,
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß - ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
      prefix: isEmpty(formData.prefix) ? randomPrefix : formData.prefix,
      firstName: isEmpty(formData.firstName) ? randomFirstName : formData.firstName,
      lastName: isEmpty(formData.lastName) ? randomLastName : formData.lastName,
      idNumber: isEmpty(formData.idNumber) ? randomIdNumber.toString() : formData.idNumber,
      idCardIssuedAt: isEmpty(formData.idCardIssuedAt) ? '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡∏ï' : formData.idCardIssuedAt,
      idCardIssueDate: isEmpty(formData.idCardIssueDate) ? '2010-01-01' : formData.idCardIssueDate,
      idCardExpiryDate: isEmpty(formData.idCardExpiryDate) ? '2030-01-01' : formData.idCardExpiryDate,
      birthDate: isEmpty(formData.birthDate) ? randomBirthDate : formData.birthDate,
      age: isEmpty(formData.age) ? randomAge.toString() : formData.age,
      race: isEmpty(formData.race) ? races[Math.floor(Math.random() * races.length)] : formData.race,
      placeOfBirth: isEmpty(formData.placeOfBirth) ? `‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•${randomProvince}` : formData.placeOfBirth,
      placeOfBirthProvince: isEmpty(formData.placeOfBirthProvince) ? randomProvince : formData.placeOfBirthProvince,
      gender: isEmpty(formData.gender) ? randomGender : formData.gender,
      nationality: isEmpty(formData.nationality) ? nationalities[Math.floor(Math.random() * nationalities.length)] : formData.nationality,
      religion: isEmpty(formData.religion) ? religions[Math.floor(Math.random() * religions.length)] : formData.religion,
      maritalStatus: isEmpty(formData.maritalStatus) ? maritalStatuses[Math.floor(Math.random() * maritalStatuses.length)] : formData.maritalStatus,
      addressAccordingToHouseRegistration: isEmpty(formData.addressAccordingToHouseRegistration) ? `${randomHouseNumber} ‡∏´‡∏°‡∏π‡πà ${randomVillageNumber} ‡∏ã‡∏≠‡∏¢ ${Math.floor(Math.random() * 99) + 1} ‡∏ñ‡∏ô‡∏ô${Math.floor(Math.random() * 99) + 1} ‡∏ï‡∏≥‡∏ö‡∏•${randomSubDistrict} ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠${randomDistrict} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î${randomProvince} ${Math.floor(Math.random() * 90000) + 10000}` : formData.addressAccordingToHouseRegistration,
      currentAddress: isEmpty(formData.currentAddress) ? `${randomHouseNumber + 10} ‡∏´‡∏°‡∏π‡πà ${randomVillageNumber + 1} ‡∏ã‡∏≠‡∏¢ ${Math.floor(Math.random() * 99) + 1} ‡∏ñ‡∏ô‡∏ô${Math.floor(Math.random() * 99) + 1} ‡∏ï‡∏≥‡∏ö‡∏•${randomSubDistrict} ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠${randomDistrict} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î${randomProvince} ${Math.floor(Math.random() * 90000) + 10000}` : formData.currentAddress,
      phone: isEmpty(formData.phone) ? `08${(Math.floor(Math.random() * 90000000) + 10000000).toString().slice(0, 8)}` : formData.phone,
      email: isEmpty(formData.email) ? `${randomFirstName.toLowerCase()}.${randomLastName.toLowerCase()}@example.com` : formData.email,
      emergencyContact: isEmpty(formData.emergencyContact) ? `${randomEmergencyFirstName} ${randomEmergencyLastName}` : formData.emergencyContact,
      emergencyContactFirstName: isEmpty(formData.emergencyContactFirstName) ? randomEmergencyFirstName : formData.emergencyContactFirstName,
      emergencyContactLastName: isEmpty(formData.emergencyContactLastName) ? randomEmergencyLastName : formData.emergencyContactLastName,
      emergencyPhone: isEmpty(formData.emergencyPhone) ? randomEmergencyPhone : formData.emergencyPhone,
      emergencyRelationship: isEmpty(formData.emergencyRelationship) ? randomEmergencyRelationship : formData.emergencyRelationship,
      emergencyAddress: {
        houseNumber: isEmpty(formData.emergencyAddress?.houseNumber) ? (randomHouseNumber + 20).toString() : (formData.emergencyAddress?.houseNumber || ''),
        villageNumber: isEmpty(formData.emergencyAddress?.villageNumber) ? (randomVillageNumber + 2).toString() : (formData.emergencyAddress?.villageNumber || ''),
        alley: isEmpty(formData.emergencyAddress?.alley) ? `‡∏ã‡∏≠‡∏¢ ${Math.floor(Math.random() * 99) + 1}` : (formData.emergencyAddress?.alley || ''),
        road: isEmpty(formData.emergencyAddress?.road) ? `‡∏ñ‡∏ô‡∏ô ${Math.floor(Math.random() * 99) + 1}` : (formData.emergencyAddress?.road || ''),
        subDistrict: isEmpty(formData.emergencyAddress?.subDistrict) ? randomSubDistrict : (formData.emergencyAddress?.subDistrict || ''),
        district: isEmpty(formData.emergencyAddress?.district) ? randomDistrict : (formData.emergencyAddress?.district || ''),
        province: isEmpty(formData.emergencyAddress?.province) ? randomProvince : (formData.emergencyAddress?.province || ''),
        postalCode: isEmpty(formData.emergencyAddress?.postalCode) ? (Math.floor(Math.random() * 90000) + 10000).toString() : (formData.emergencyAddress?.postalCode || ''),
        phone: isEmpty(formData.emergencyAddress?.phone) ? '0' + (Math.floor(Math.random() * 900000000) + 100000000).toString().slice(0, 9) : (formData.emergencyAddress?.phone || '')
      },
      emergencyWorkplace: {
        name: isEmpty(formData.emergencyWorkplace?.name) ? `‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ${randomEmergencyFirstName} ‡∏à‡∏≥‡∏Å‡∏±‡∏î` : (formData.emergencyWorkplace?.name || ''),
        district: isEmpty(formData.emergencyWorkplace?.district) ? randomDistrict : (formData.emergencyWorkplace?.district || ''),
        province: isEmpty(formData.emergencyWorkplace?.province) ? randomProvince : (formData.emergencyWorkplace?.province || ''),
        phone: isEmpty(formData.emergencyWorkplace?.phone) ? `02${(Math.floor(Math.random() * 90000000) + 10000000).toString().slice(0, 8)}` : (formData.emergencyWorkplace?.phone || '')
      },
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ - ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      education: isEmpty(formData.education) ? [
        {
          level: '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ',
          institution: randomInstitution,
          major: randomMajor,
          year: randomGradYear.toString(),
          gpa: randomGpa
        },
        ...(Math.random() > 0.5 ? [{
          level: '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó',
          institution: randomInstitution,
          major: randomMajor,
          year: (randomGradYear + 2).toString(),
          gpa: (parseFloat(randomGpa) + 0.2).toFixed(2)
        }] : [])
      ] : formData.education,
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      workExperience: isEmpty(formData.workExperience) ? [
        {
          position: randomPosition,
          company: randomCompany,
          startDate: `${randomStartYear}-01-01`,
          endDate: `${randomEndYear}-12-31`,
          salary: randomSalary.toLocaleString(),
          reason: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà'
        },
        ...(Math.random() > 0.3 ? [{
          position: positions[Math.floor(Math.random() * positions.length)],
          company: companies[Math.floor(Math.random() * companies.length)],
          startDate: `${randomStartYear - 2}-01-01`,
          endDate: `${randomStartYear - 1}-12-31`,
          salary: (randomSalary - 5000).toLocaleString(),
          reason: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤'
        }] : [])
      ] : formData.workExperience,
      previousGovernmentService: isEmpty(formData.previousGovernmentService) ? (Math.random() > 0.7 ? [
        {
          position: '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà',
          department: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡∏ï',
          reason: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô',
          date: '2020-01-01'
        }
      ] : []) : formData.previousGovernmentService,
      skills: isEmpty(formData.skills) ? randomSkills : formData.skills,
      languages: isEmpty(formData.languages) ? randomLanguages : formData.languages,
      computerSkills: isEmpty(formData.computerSkills) ? randomComputerSkills : formData.computerSkills,
      certificates: isEmpty(formData.certificates) ? randomCertificates : formData.certificates,
      references: isEmpty(formData.references) ? `${randomFirstName} ${randomLastName} - ${randomPosition} ‡∏ó‡∏µ‡πà ${randomCompany} ‡πÇ‡∏ó‡∏£ ${randomEmergencyPhone}` : formData.references,
      appliedPosition: isEmpty(formData.appliedPosition) ? randomAppliedPosition : formData.appliedPosition,
      expectedSalary: isEmpty(formData.expectedSalary) ? randomExpectedSalary.toLocaleString() : formData.expectedSalary,
      availableDate: isEmpty(formData.availableDate) ? randomAvailableDate : formData.availableDate,
      currentWork: formData.currentWork !== undefined ? formData.currentWork : (Math.random() > 0.5),
      department: isEmpty(formData.department) ? randomDepartment : formData.department,
      applicantSignature: isEmpty(formData.applicantSignature) ? `${randomFirstName} ${randomLastName}` : formData.applicantSignature,
      // ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ - ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      documents: isEmpty(formData.documents) ? randomDocuments : formData.documents
    };

    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• emergency contact
    console.log('üîç Debug Emergency Contact Data:');
    console.log('emergencyContactFirstName:', newFormData.emergencyContactFirstName);
    console.log('emergencyContactLastName:', newFormData.emergencyContactLastName);
    console.log('emergencyPhone:', newFormData.emergencyPhone);
    console.log('emergencyRelationship:', newFormData.emergencyRelationship);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
    setFormData(newFormData as FormData);

    // ‡∏•‡πâ‡∏≤‡∏á errors
    setErrors({});
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\nüìù ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô\nüîí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡∏ö');
  };
  // section refs for in-page navigation like official-documents
  const sectionRefs = {
    profile: useRef<HTMLDivElement | null>(null),
    work: useRef<HTMLDivElement | null>(null),
    education: useRef<HTMLDivElement | null>(null),
    extra: useRef<HTMLDivElement | null>(null),
    documents: useRef<HTMLDivElement | null>(null),
  } as const;

  const scrollTo = (key: keyof typeof sectionRefs) => {
    const el = sectionRefs[key].current;
    if (el) el.scrollIntoView({ behavior: 'smooth', block: 'start' });
  };

  // Auth guard
  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/signin');
    }
  }, [status, router]);
  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏à‡∏≤‡∏Å URL parameters
  useEffect(() => {
    const departmentRaw = searchParams.get('department');
    const department = (() => {
      try { return departmentRaw ? decodeURIComponent(departmentRaw) : departmentRaw; } catch { return departmentRaw; }
    })();
    const departmentId = searchParams.get('departmentId');
    
    console.log('üîç Department URL params:', { department, departmentId });
    
    if (department) {
      setFormData(prev => ({
        ...prev,
        department: department,
        departmentId: departmentId || null
      }));
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å API
    if (departmentId) {
      console.log('üîç Fetching department data for ID:', departmentId);
      
      const fetchDepartmentData = async () => {
        try {
          const response = await fetch(`/api/departments?id=${departmentId}`);
          console.log('üîç Department API response status:', response.status);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const data = await response.json();
          console.log('üîç Department API response data:', data);
          
          if (data.department) {
            console.log('üîç Department data:', data.department);
            console.log('üîç Positions data:', data.department.positions);
            
            setFormData(prev => {
              const newData = {
                ...prev,
                department: data.department.name,
                appliedPosition: data.department.positions || '', // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ positions ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ department name
                expectedSalary: data.department.salary || ''
              };
              console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ appliedPosition ‡∏à‡∏≤‡∏Å department positions:', data.department.positions);
              console.log('‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà:', newData);
              return newData;
            });
          } else {
            console.log('‚ùå No department data found in response');
          }
        } catch (error) {
          console.error('‚ùå Error fetching department details:', error);
          // Retry after 1 second
      setTimeout(() => {
            console.log('üîÑ Retrying department data fetch...');
            fetchDepartmentData();
          }, 1000);
        }
      };
      
      fetchDepartmentData();
    } else {
      console.log('‚ùå No departmentId found, skipping department data fetch');
    }
  }, [searchParams]);
  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ flatpickr ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ ThaiDatePicker component ‡πÅ‡∏ó‡∏ô
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ResumeDeposit
  const fetchProfileData = async () => {
    if (status === 'loading') return;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ department parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasDepartmentParam = searchParams.get('department');
    if (hasDepartmentParam) {
      console.log('üîç fetchProfileData - Department parameter detected, preserving department data...');
    }
    
    console.log('üîç fetchProfileData - Starting to fetch profile data from ResumeDeposit...');
    console.log('üîç fetchProfileData - Session:', session);
    console.log('üîç fetchProfileData - User:', session?.user);
    
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ResumeDeposit API
      const userEmail = (session?.user as any)?.email || '';
      const userId = (session?.user as any)?.id || '';
      const userLineId = (session?.user as any)?.lineId || (session?.user as any)?.sub || (session as any)?.profile?.userId || '';
      console.log('üîç fetchProfileData - UserEmail/UserId/LineId:', { userEmail, userId, userLineId });
      const params = new URLSearchParams();
      if (userId) params.set('userId', String(userId));
      if (userLineId) {
        params.set('lineId', String(userLineId));
      } else {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ lineId ‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        setIsLoading(false);
        return;
      }
      const url = `/api/resume-deposit?${params.toString()}`;
      console.log('üîç fetchProfileData - API URL:', url);
      const response = await fetch(url);
      
      if (response.ok) {
        const result = await response.json();
        console.log('üîç fetchProfileData - API Response:', result);
        console.log('üîç fetchProfileData - Response success:', result.success);
        console.log('üîç fetchProfileData - Data length:', result.data?.length);
        
        const list = (result?.data || result || []) as any[];
        const filtered = Array.isArray(list)
                ? list.filter((r) => (r?.lineId || '') === userLineId)
          : [];
        
        if (filtered.length > 0) {
          const user = filtered[0]; // Get first resume (should be unique by email)
          
          console.log('Profile data loaded from ResumeDeposit:', user);
          console.log('üîç fetchProfileData - Resume ID:', user.id);
          
          setProfileData(user);
          setSavedResume(user); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ savedResume ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ PATCH ‡πÑ‡∏î‡πâ
          setIsProfileLoaded(true);
            
            // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ResumeDeposit ‡∏•‡∏á‡πÉ‡∏ô form
            setFormData(prev => ({
              ...prev,
            prefix: user.prefix || '',
            firstName: user.firstName || '',
            lastName: user.lastName || '',
            idNumber: user.idNumber || '',
            idCardIssuedAt: user.idCardIssuedAt || '',
            idCardIssueDate: user.idCardIssueDate ? new Date(user.idCardIssueDate).toISOString().split('T')[0] : '',
            idCardExpiryDate: user.idCardExpiryDate ? new Date(user.idCardExpiryDate).toISOString().split('T')[0] : '',
            birthDate: user.birthDate ? new Date(user.birthDate).toISOString().split('T')[0] : '',
            age: user.age ? String(user.age) : '',
            race: user.race || '',
            placeOfBirth: user.placeOfBirth || '',
            placeOfBirthProvince: user.placeOfBirthProvince || '',
            gender: user.gender === 'MALE' ? '‡∏ä‡∏≤‡∏¢' : user.gender === 'FEMALE' ? '‡∏´‡∏ç‡∏¥‡∏á' : user.gender || '',
            nationality: user.nationality || '',
            religion: user.religion || '',
            maritalStatus: user.maritalStatus === 'SINGLE' ? '‡πÇ‡∏™‡∏î' : 
                          user.maritalStatus === 'MARRIED' ? '‡∏™‡∏°‡∏£‡∏™' : 
                          user.maritalStatus === 'DIVORCED' ? '‡∏´‡∏¢‡πà‡∏≤' : 
                          user.maritalStatus === 'WIDOWED' ? '‡∏´‡∏°‡πâ‡∏≤‡∏¢' : user.maritalStatus || '',
            addressAccordingToHouseRegistration: user.address || '',
            currentAddress: user.address || '',
            phone: user.phone || '',
            email: user.email || '',
            emergencyContact: user.emergencyContact || '',
            emergencyContactFirstName: user.emergencyContactFirstName || '',
            emergencyContactLastName: user.emergencyContactLastName || '',
            emergencyPhone: user.emergencyPhone || '',
            emergencyRelationship: user.emergencyRelationship || '',
              emergencyAddress: {
              houseNumber: user.emergency_address_house_number || '',
              villageNumber: user.emergency_address_village_number || '',
              alley: user.emergency_address_alley || '',
              road: user.emergency_address_road || '',
              subDistrict: user.emergency_address_sub_district || '',
              district: user.emergency_address_district || '',
              province: user.emergency_address_province || '',
              postalCode: user.emergency_address_postal_code || '',
              phone: user.emergency_address_phone || '',
              },
              emergencyWorkplace: {
              name: user.emergencyWorkplace?.name || '',
              district: user.emergencyWorkplace?.district || '',
              province: user.emergencyWorkplace?.province || '',
              phone: user.emergencyWorkplace?.phone || '',
            },
            education: user.education?.map((edu: any) => ({
              level: edu.level || '',
              institution: edu.institution || '',
              major: edu.major || '',
              year: edu.endYear?.toString() || edu.year?.toString() || '',
              gpa: edu.gpa?.toString() || ''
            })) || [],
            workExperience: user.workExperience?.map((work: any) => ({
              position: work.position || '',
              company: work.company || '',
              startDate: work.startDate ? new Date(work.startDate).toISOString().slice(0, 10) : '',
              endDate: work.endDate ? new Date(work.endDate).toISOString().slice(0, 10) : '',
              salary: work.salary || '',
              reason: work.description || '',
              district: work.district || '',
              province: work.province || '',
              phone: work.phone || ''
            })) || [],
            skills: user.skills || '',
            languages: user.languages || '',
            computerSkills: user.computerSkills || '',
            certificates: user.certificates || '',
            references: user.references || '',
            appliedPosition: formData.appliedPosition || user.appliedPosition || '',
            expectedSalary: user.expectedSalary || '',
            availableDate: user.availableDate ? new Date(user.availableDate).toISOString().split('T')[0] : '',
            currentWork: user.currentWork || false,
            department: formData.department || user.department || '',
            // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
            registeredAddress: {
              houseNumber: user.house_registration_house_number || '',
              villageNumber: user.house_registration_village_number || '',
              alley: user.house_registration_alley || '',
              road: user.house_registration_road || '',
              subDistrict: user.house_registration_sub_district || '',
              district: user.house_registration_district || '',
              province: user.house_registration_province || '',
              postalCode: user.house_registration_postal_code || '',
              phone: user.house_registration_phone || '',
              mobile: user.house_registration_mobile || ''
            },
            // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            currentAddressDetail: {
              houseNumber: user.current_address_house_number || '',
              villageNumber: user.current_address_village_number || '',
              alley: user.current_address_alley || '',
              road: user.current_address_road || '',
              subDistrict: user.current_address_sub_district || '',
              district: user.current_address_district || '',
              province: user.current_address_province || '',
              postalCode: user.current_address_postal_code || '',
              homePhone: user.current_address_phone || '',
              mobilePhone: user.current_address_mobile || ''
            },
              spouseInfo: {
              firstName: user.spouse_first_name || '',
              lastName: user.spouse_last_name || '',
              },
              // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
              medicalRights: {
                hasUniversalHealthcare: user.medical_rights_has_universal_healthcare || false,
                universalHealthcareHospital: user.medical_rights_universal_healthcare_hospital || '',
                hasSocialSecurity: user.medical_rights_has_social_security || false,
                socialSecurityHospital: user.medical_rights_social_security_hospital || '',
                dontWantToChangeHospital: user.medical_rights_dont_want_to_change_hospital || false,
                wantToChangeHospital: user.medical_rights_want_to_change_hospital || false,
                newHospital: user.medical_rights_new_hospital || '',
                hasCivilServantRights: user.medical_rights_has_civil_servant_rights || false,
                otherRights: user.medical_rights_other_rights || ''
              },
              // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢
              multipleEmployers: user.multiple_employers ? JSON.parse(user.multiple_employers) : [],
              // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
              staffInfo: {
                position: user.staff_position || '',
                department: user.staff_department || '',
                startWork: user.staff_start_work || '',
              }
            }));
            
            // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å ResumeDeposit
          console.log('üîç fetchProfileData - Resume data:', user);
          console.log('üîç fetchProfileData - Resume profileImageUrl:', user.profileImageUrl);
          console.log('üîç fetchProfileData - Resume ID:', user.id);
          console.log('üîç fetchProfileData - Current profileImage state:', profileImage);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ department parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (hasDepartmentParam) {
            console.log('üîç fetchProfileData - Department parameter detected, preserving department and appliedPosition data...');
            console.log('üîç fetchProfileData - Current formData.department:', formData.department);
            console.log('üîç fetchProfileData - Current formData.appliedPosition:', formData.appliedPosition);
          }
          
          if (user.profileImageUrl) {
            console.log('‚úÖ fetchProfileData - Using profileImageUrl:', user.profileImageUrl);
            // ‡πÉ‡∏ä‡πâ path ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö profile page
            const imagePath = `/api/image?file=${user.profileImageUrl}`;
            console.log('‚úÖ Using API path for profile image:', imagePath);
            console.log('üîç fetchProfileData - Setting profile image after refresh:', imagePath);
            setProfileImage(imagePath);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏î‡πâ‡∏ß‡∏¢
            setFormData(prev => ({
              ...prev,
              profileImage: new File([], user.profileImageUrl, { type: 'image/jpeg' }),
              // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ override ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• department ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ parameter
              ...(hasDepartmentParam ? {
                department: prev.department,
                appliedPosition: prev.appliedPosition,
                expectedSalary: prev.expectedSalary
              } : {})
            }));
          } else if (user.id) {
            // Try to find image by ID - ‡∏•‡∏≠‡∏á‡∏´‡∏≤ .jpg ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ .png
            try {
              const jpgPath = `/api/image?file=profile_${user.id}.jpg`;
              console.log('üîç fetchProfileData - Trying JPG path:', jpgPath);
              const jpgResponse = await fetch(jpgPath);
              if (jpgResponse.ok) {
                console.log('‚úÖ fetchProfileData - Found JPG image:', jpgPath);
                setProfileImage(jpgPath);
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏î‡πâ‡∏ß‡∏¢
                setFormData(prev => ({
                  ...prev,
                  profileImage: new File([], `profile_${user.id}.jpg`, { type: 'image/jpeg' }),
                  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ override ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• department ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ parameter
                  ...(hasDepartmentParam ? {
                    department: prev.department,
                    appliedPosition: prev.appliedPosition,
                    expectedSalary: prev.expectedSalary
                  } : {})
                }));
              } else {
                const pngPath = `/api/image?file=profile_${user.id}.png`;
                console.log('üîç fetchProfileData - Trying PNG path:', pngPath);
                const pngResponse = await fetch(pngPath);
                if (pngResponse.ok) {
                  console.log('‚úÖ fetchProfileData - Found PNG image:', pngPath);
                  setProfileImage(pngPath);
                  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏î‡πâ‡∏ß‡∏¢
                  setFormData(prev => ({
                    ...prev,
                    profileImage: new File([], `profile_${user.id}.png`, { type: 'image/png' }),
                    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ override ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• department ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ parameter
                    ...(hasDepartmentParam ? {
                      department: prev.department,
                      appliedPosition: prev.appliedPosition,
                      expectedSalary: prev.expectedSalary
                    } : {})
                  }));
                } else {
                  console.log('‚ùå fetchProfileData - No image found for ID:', user.id);
                }
              }
            } catch (error) {
              console.log('‚ùå fetchProfileData - Error finding image:', error);
            }
          }
          
          // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadProfileData ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡πâ‡∏ß
          console.log('üîç fetchProfileData - Resume data loaded and form filled');
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ department parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ override
          if (hasDepartmentParam) {
            console.log('üîç fetchProfileData - Department parameter detected, preserving department data...');
            console.log('üîç fetchProfileData - Final formData.department:', formData.department);
            console.log('üîç fetchProfileData - Final formData.appliedPosition:', formData.appliedPosition);
          }
        } else {
          console.log('üîç fetchProfileData - No resume data found');
          console.log('üîç fetchProfileData - Result:', result);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ department parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ override
          if (hasDepartmentParam) {
            console.log('üîç fetchProfileData - Department parameter detected, preserving department data...');
            console.log('üîç fetchProfileData - Final formData.department:', formData.department);
            console.log('üîç fetchProfileData - Final formData.appliedPosition:', formData.appliedPosition);
          }
        }
      } else {
        console.log('üîç fetchProfileData - API response not ok:', response.status, response.statusText);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ department parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ override
        if (hasDepartmentParam) {
          console.log('üîç fetchProfileData - Department parameter detected, preserving department data...');
          console.log('üîç fetchProfileData - Final formData.department:', formData.department);
          console.log('üîç fetchProfileData - Final formData.appliedPosition:', formData.appliedPosition);
        }
      }
    } catch (error) {
      console.error('Error fetching resume data:', error);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ department parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ override
      if (hasDepartmentParam) {
        console.log('üîç fetchProfileData - Department parameter detected, preserving department data...');
        console.log('üîç fetchProfileData - Final formData.department:', formData.department);
        console.log('üîç fetchProfileData - Final formData.appliedPosition:', formData.appliedPosition);
      }
    } finally {
      setIsLoading(false);
    }
  };

  if (status === 'loading') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á...</div>
            </div>
    );
  }

  if (status === 'unauthenticated') {
    return null;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° resumeId
  const loadResumeById = async (id: string) => {
    console.log('üîÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° ID:', id);
    console.log('üîç ‡πÇ‡∏´‡∏°‡∏î: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (ResumeDeposit)');
    setIsLoading(true);
    
    try {
      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° ID
      const res = await fetch(`/api/resume-deposit/${id}`);
      if (res.ok) {
        const json = await res.json().catch(() => ({}));
        const resumeData = json?.data || json;
        
        if (resumeData) {
          console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:', {
            id: resumeData.id,
            name: `${resumeData.firstName} ${resumeData.lastName}`,
            email: resumeData.email,
            profileImageUrl: resumeData.profileImageUrl
          });
          
          // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
          setSavedResume(resumeData);
          applyResumeToFormInputs(resumeData);
          
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ department ‡∏à‡∏≤‡∏Å URL parameter (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          if (departmentName) {
            setFormData(prev => ({
              ...prev,
              department: departmentName,
              appliedPosition: '' // ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ appliedPosition ‡∏à‡∏≤‡∏Å departmentName
            }));
            console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ department ‡∏à‡∏≤‡∏Å URL parameter:', departmentName);
          }
          
          // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
          if (resumeData.profileImageUrl) {
            console.log('üîç ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:', resumeData.profileImageUrl);
            const imagePath = `/api/image?file=${resumeData.profileImageUrl}`;
            console.log('üîç loadResumeByDepartment - Setting profile image after refresh:', imagePath);
            setProfileImage(imagePath);
            console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          }
          
          // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
          console.log('üîç ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö...');
          try {
            const documents = await fetchUploadedDocuments(resumeData.id);
            setUploadedDocuments(documents);
            console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', documents.length, '‡πÑ‡∏ü‡∏•‡πå');
          } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö:', error);
          }
          
          console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° ID ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          if (departmentName) {
            console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ department:', departmentName);
          }
          // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á alert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resumeId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UX ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
        } else {
          console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID ‡∏ô‡∏µ‡πâ');
          // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á alert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UX ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
        }
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ:', res.status);
        // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á alert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UX ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
      }
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:', error);
      // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á alert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UX ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    } finally {
      setIsLoading(false);
    }
  };
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° department (‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ lineId)
  const loadResumeByDepartment = async () => {
    console.log('üîÑ loadResumeByDepartment ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
    console.log('üîç status:', status);
    console.log('üîç departmentName:', departmentName);
    console.log('üîç departmentId:', departmentId);
    
    if (status !== 'authenticated') {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ authenticate');
      return;
    }
    
    console.log('üîÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö department:', departmentName);
    setIsLoading(true);
    
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å session
      const user = session?.user as any;
      const userId = user?.id || '';
      const userLineId = user?.lineId || user?.sub || (session as any)?.profile?.userId || '';
      
      console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', {
        userId: userId,
        lineId: userLineId,
        departmentName: departmentName,
        departmentId: departmentId
      });
      
      if (!userLineId) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ lineId ‡πÉ‡∏ô session - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
        setIsLoading(false);
        return;
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° session (‡πÉ‡∏ä‡πâ lineId ‡πÅ‡∏•‡∏∞ userId ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
      console.log('üîç ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API: /api/resume-deposit');
      const params = new URLSearchParams();
      if (userId) params.set('userId', String(userId));
      if (userLineId) params.set('lineId', String(userLineId));
      const url = `/api/resume-deposit?${params.toString()}`;
      console.log('üîç API URL:', url);
      const res = await fetch(url);
      console.log('üîç API Response status:', res.status);
      
      if (res.ok) {
        const json = await res.json().catch(() => ({}));
        console.log('üîç API Response data:', json);
        const list = (json?.data || json || []) as any[];
        console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', list.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
        console.log('üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', list.slice(0, 2).map(r => ({
          id: r.id,
          firstName: r.firstName,
          lastName: r.lastName,
          email: r.email,
          department: r.department,
          appliedPosition: r.appliedPosition
        })));
        
        let found = null;
        
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° departmentId (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) - departmentId ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô resumeId
        if (departmentId) {
          const idMatch = list.find(r => r.id === departmentId);
          if (idMatch) {
            found = idMatch;
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° departmentId (resumeId):', found.id);
          }
        }
        
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° departmentName ‡πÄ‡∏õ‡πá‡∏ô resumeId (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ departmentId)
        if (!found && departmentName) {
          const idMatch = list.find(r => r.id === departmentName);
          if (idMatch) {
            found = idMatch;
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° departmentName (resumeId):', found.id);
          }
        }
        
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° userId
        if (!found && userId) {
          const userIdMatch = list.find(r => r?.userId === userId);
          if (userIdMatch) {
            found = userIdMatch;
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° userId:', found.id);
          }
        }
        
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° lineId (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        if (!found && userLineId) {
          const lineIdMatch = list.find(r => (r?.lineId || '') === userLineId);
          if (lineIdMatch) {
            found = lineIdMatch;
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° lineId:', found.id);
          } else {
            // ‡∏´‡∏≤‡∏Å lineId ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            console.log('‚ùå lineId ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô');
          }
        }
        
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 5: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        if (!found && userEmail) {
          const emailMatch = list.find(r => 
            (r?.email || '').toLowerCase() === userEmail.toLowerCase()
          );
          if (emailMatch) {
            found = emailMatch;
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•:', found.id);
          }
        }
        
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 6: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
        if (!found && firstName && lastName) {
          const nameMatch = list.find(r => {
            const rFirstName = (r?.firstName || '').trim();
            const rLastName = (r?.lastName || '').trim();
            return rFirstName.toLowerCase() === firstName.toLowerCase() && 
                   rLastName.toLowerCase() === lastName.toLowerCase();
          });
          if (nameMatch) {
            found = nameMatch;
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:', found.id);
          }
        }
        
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 7: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if (!found && firstName) {
          const firstNameMatch = list.find(r => {
            const rFirstName = (r?.firstName || '').trim();
            return rFirstName.toLowerCase() === firstName.toLowerCase();
          });
          if (firstNameMatch) {
            found = firstNameMatch;
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:', found.id);
          }
        }
        
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 8: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° department ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô)
        if (!found && departmentName) {
          const deptMatch = list.find(r => {
            const rDept = (r?.department || '').toLowerCase().trim();
            const rAppliedPos = (r?.appliedPosition || '').toLowerCase().trim();
            const searchDept = departmentName.toLowerCase().trim();
            
            return rDept === searchDept || 
                   rAppliedPos === searchDept ||
                   rDept.includes(searchDept) ||
                   rAppliedPos.includes(searchDept) ||
                   searchDept.includes(rDept) ||
                   searchDept.includes(rAppliedPos);
          });
          if (deptMatch) {
            found = deptMatch;
            console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° department:', found.id, 'department:', found.department, 'appliedPosition:', found.appliedPosition);
          }
        }
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 9: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (!found && userEmail) {
          // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö phone@domain.com)
          const phoneFromEmail = userEmail.split('@')[0];
          if (phoneFromEmail && phoneFromEmail.length >= 10) {
            const phoneMatch = list.find(r => 
              (r?.phone || '').includes(phoneFromEmail) ||
              (r?.phone || '').replace(/[-\s]/g, '') === phoneFromEmail.replace(/[-\s]/g, '')
            );
            if (phoneMatch) {
              found = phoneMatch;
              console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:', found.id);
            }
          }
        }
          
        if (found) {
          console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:', {
            id: found.id,
            name: `${found.firstName} ${found.lastName}`,
            email: found.email,
            phone: found.phone,
            department: found.department
          });
          
          // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
          setSavedResume(found);
          applyResumeToFormInputs(found);
          
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ department ‡∏à‡∏≤‡∏Å URL parameter
          if (departmentName) {
            setFormData(prev => ({
              ...prev,
              department: departmentName,
              appliedPosition: '', // ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ appliedPosition ‡∏à‡∏≤‡∏Å departmentName
              departmentId: departmentId || null
            }));
            console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ department ‡∏à‡∏≤‡∏Å URL parameter:', departmentName);
          }
          
          // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
          if (found.profileImageUrl) {
            console.log('üîç ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:', found.profileImageUrl);
            const imagePath = `/api/image?file=${found.profileImageUrl}`;
            setProfileImage(imagePath);
            console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          }
          
          // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
          console.log('üîç ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö...');
          try {
            const documents = await fetchUploadedDocuments(found.id);
            setUploadedDocuments(documents);
            console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', documents.length, '‡πÑ‡∏ü‡∏•‡πå');
          } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö:', error);
          }
          
          console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö department ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          // alert(`‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á ${found.firstName} ${found.lastName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        } else {
          console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
          console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', {
            departmentName,
            departmentId,
            userEmail,
            firstName,
            lastName
          });
          console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:', list.map(r => ({
            id: r.id,
            firstName: r.firstName,
            lastName: r.lastName,
            email: r.email,
            department: r.department,
            appliedPosition: r.appliedPosition
          })));
          
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ department ‡∏à‡∏≤‡∏Å URL parameter ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
          if (departmentName) {
            setFormData(prev => ({
              ...prev,
              department: departmentName,
              appliedPosition: '', // ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ appliedPosition ‡∏à‡∏≤‡∏Å departmentName
              departmentId: departmentId || null
            }));
            console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ department ‡∏à‡∏≤‡∏Å URL parameter:', departmentName);
          }
          // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á alert ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        }
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ:', res.status);
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:', error);
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥');
    } finally {
      setIsLoading(false);
    }
  };
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  const refreshResumeData = async () => {
    console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥...');
    setIsLoading(true);
    
    try {
      const userId = (session?.user as any)?.id || '';
      const userLineId = (session?.user as any)?.lineId || (session?.user as any)?.sub || (session as any)?.profile?.userId || '';
      
      if (!userLineId) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ lineId ‡πÉ‡∏ô session - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
        setIsLoading(false);
        return;
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ lineId ‡πÅ‡∏•‡∏∞ userId ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
      const params = new URLSearchParams();
      if (userId) params.set('userId', String(userId));
      if (userLineId) params.set('lineId', String(userLineId));
      const url = `/api/resume-deposit?${params.toString()}`;
      console.log('üîé refreshResumeData - URL:', url);
      const res = await fetch(url);
      if (res.ok) {
        const json = await res.json().catch(() => ({}));
        const list = (json?.data || json || []) as any[];
        const filtered = Array.isArray(list)
          ? list.filter((r) => (r?.lineId || '') === userLineId)
          : [];
          
        if (filtered.length > 0) {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          filtered.sort((a, b) => new Date(b.createdAt || b.updatedAt || 0).getTime() - new Date(a.createdAt || a.updatedAt || 0).getTime());
          const found = filtered[0];
          
          // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          const detail = await fetch(`/api/resume-deposit/${found.id}`);
          if (detail.ok) {
            const dj = await detail.json().catch(() => ({}));
            const resumeData = dj?.data || dj || found;
            
            // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
            setSavedResume(resumeData);
            applyResumeToFormInputs(resumeData);
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
            if (resumeData.profileImageUrl) {
              const imagePath = `/api/image?file=${resumeData.profileImageUrl}`;
              setProfileImage(imagePath);
            }
            
            // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
            const documents = await fetchUploadedDocuments(resumeData.id);
            setUploadedDocuments(documents);
            
            console.log('‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.log('‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
          } else {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
          }
        } else {
          console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥');
          console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥');
        }
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ');
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setIsLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å profile ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  const loadProfileData = () => {
    if (!profileData) return;
    
    setFormData(prev => ({
      ...prev,
      prefix: profileData.prefix || '',
      firstName: profileData.firstName || '',
      lastName: profileData.lastName || '',
      gender: profileData.gender || '',
      birthDate: profileData.birthDate || '',
      nationality: profileData.nationality || '',
      religion: profileData.religion || '',
      maritalStatus: profileData.maritalStatus || '',
      addressAccordingToHouseRegistration: profileData.address || '',
      currentAddress: profileData.address || '',
      phone: profileData.phone || '',
      email: profileData.email || '',
      emergencyContact: profileData.emergencyContact || '',
      emergencyContactFirstName: profileData.emergencyContactFirstName || '',
      emergencyContactLastName: profileData.emergencyContactLastName || '',
      emergencyPhone: profileData.emergencyPhone || '',
      // Education
      education: profileData.educationList?.map((edu: any) => ({
        level: edu.level || '',
        institution: edu.school || '',
        major: edu.major || '',
        year: edu.endYear || '',
        gpa: edu.gpa || ''
      })) || [],
      // Work Experience
      workExperience: profileData.workList?.map((work: any) => ({
        position: work.position || '',
        company: work.company || '',
        startDate: work.startDate || '',
        endDate: work.endDate || '',
        salary: work.salary || '',
        reason: work.description || '',
        district: work.district || '',
        province: work.province || '',
        phone: work.phone || ''
      })) || []
    }));

    // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    console.log('üîç loadProfileData - ProfileData:', profileData);
    console.log('üîç loadProfileData - ProfileData ID:', profileData.id);
    
    if (profileData.id) {
      const apiJpgPath = `/api/image?file=profile_${profileData.id}.jpg`;
      const apiPngPath = `/api/image?file=profile_${profileData.id}.png`;
      
      console.log('üîç loadProfileData - Trying API JPG path:', apiJpgPath);
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå JPG ‡∏Å‡πà‡∏≠‡∏ô
      fetch(apiJpgPath, { method: 'HEAD' })
        .then(response => {
          if (response.ok) {
            console.log('‚úÖ loadProfileData - Found API JPG image:', apiJpgPath);
            setProfileImage(apiJpgPath);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏î‡πâ‡∏ß‡∏¢
            setFormData(prev => ({
              ...prev,
              profileImage: new File([], `profile_${profileData.id}.jpg`, { type: 'image/jpeg' })
            }));
          } else {
            console.log('üîç loadProfileData - Trying API PNG path:', apiPngPath);
            // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå PNG
            return fetch(apiPngPath, { method: 'HEAD' });
          }
        })
        .then(response => {
          if (response && response.ok) {
            console.log('‚úÖ loadProfileData - Found API PNG image:', apiPngPath);
            setProfileImage(apiPngPath);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï formData.profileImage ‡∏î‡πâ‡∏ß‡∏¢
            setFormData(prev => ({
              ...prev,
              profileImage: new File([], `profile_${profileData.id}.png`, { type: 'image/png' })
            }));
          } else {
            console.log('‚ùå loadProfileData - No image found for ID:', profileData.id);
          }
        })
        .catch(error => {
          console.log('‚ùå loadProfileData - Error finding image:', error);
        });
    }

    console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  };

  const getErrorMessage = (fieldName: string) => {
    return errors[fieldName] || '';
  };

  const hasError = (fieldName: string) => {
    return !!errors[fieldName];
  };
  const scrollToError = (errorKey: string) => {
    console.log('üîç scrollToError - Looking for error key:', errorKey);
    
    // Map error keys ‡πÑ‡∏õ‡∏¢‡∏±‡∏á section refs
    let targetSection: keyof typeof sectionRefs | null = null;
    
    if (['prefix', 'firstName', 'lastName', 'age', 'birthDate', 'placeOfBirth', 'placeOfBirthProvince', 'race', 'nationality', 'religion', 'gender', 'maritalStatus'].includes(errorKey)) {
      targetSection = 'profile';
    } else if (['idNumber', 'idCardIssuedAt', 'idCardIssueDate', 'idCardExpiryDate'].includes(errorKey)) {
      targetSection = 'profile';
    } else if (errorKey.startsWith('registeredAddress') || errorKey.startsWith('currentAddress')) {
      targetSection = 'profile';
    } else if (errorKey.startsWith('emergency') || errorKey === 'emergencyContact' || errorKey === 'emergencyRelationship' || errorKey === 'emergencyPhone') {
      targetSection = 'profile';
    } else if (['appliedPosition', 'expectedSalary', 'availableDate', 'department'].includes(errorKey)) {
      targetSection = 'profile';
    } else if (['skills', 'languages', 'computerSkills', 'certificates', 'references'].includes(errorKey)) {
      targetSection = 'extra';
    } else if (['education', 'workExperience'].includes(errorKey)) {
      targetSection = 'education';
    } else if (['documents'].includes(errorKey)) {
      targetSection = 'documents';
    }
    
    console.log('üîç scrollToError - Target section:', targetSection);
    
    if (targetSection) {
      // Scroll ‡πÑ‡∏õ‡∏¢‡∏±‡∏á section ‡∏Å‡πà‡∏≠‡∏ô
      setTimeout(() => {
        scrollTo(targetSection!);
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ error ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        setTimeout(() => {
          let errorField = null;
          
          // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ name attribute
          errorField = document.querySelector(`[name="${errorKey}"]`);
          console.log('üîç scrollToError - Found by name:', !!errorField);
          
          // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ data-error-key attribute
          if (!errorField) {
            errorField = document.querySelector(`[data-error-key="${errorKey}"]`);
            console.log('üîç scrollToError - Found by data-error-key:', !!errorField);
          }
          
          // 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ id attribute
          if (!errorField) {
            errorField = document.querySelector(`#${errorKey}`);
            console.log('üîç scrollToError - Found by id:', !!errorField);
          }
          
          // 4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ label text ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
          if (!errorField) {
            const labels = document.querySelectorAll('label');
            for (const label of labels) {
              const labelText = label.textContent?.toLowerCase() || '';
              const errorKeyLower = errorKey.toLowerCase();
              
              // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
              if (labelText.includes('‡∏ä‡∏∑‡πà‡∏≠') && errorKeyLower.includes('firstname')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•') && errorKeyLower.includes('lastname')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏≠‡∏≤‡∏¢‡∏∏') && errorKeyLower.includes('age')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î') && errorKeyLower.includes('birthdate')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô') && errorKeyLower.includes('idnumber')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà') && errorKeyLower.includes('villagenumber')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏ï‡∏£‡∏≠‡∏Å') && errorKeyLower.includes('alley')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏ñ‡∏ô‡∏ô') && errorKeyLower.includes('road')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏ï‡∏≥‡∏ö‡∏•') && errorKeyLower.includes('subdistrict')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏≠‡∏≥‡πÄ‡∏†‡∏≠') && errorKeyLower.includes('district')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î') && errorKeyLower.includes('province')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå') && errorKeyLower.includes('postalcode')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå') && errorKeyLower.includes('phone')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              } else if (labelText.includes('‡∏≠‡∏µ‡πÄ‡∏°‡∏•') && errorKeyLower.includes('email')) {
                errorField = label.querySelector('input, select, textarea');
                if (errorField) break;
              }
            }
            console.log('üîç scrollToError - Found by label text:', !!errorField);
          }
          
          // 5. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ error message ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà
          if (!errorField) {
            const errorMessages = document.querySelectorAll('.text-red-500, .text-red-600');
            for (const errorMsg of errorMessages) {
              if (errorMsg.textContent?.includes(getErrorMessage(errorKey))) {
                // ‡∏´‡∏≤ input ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                const closestInput = errorMsg.closest('div')?.querySelector('input, select, textarea');
                if (closestInput) {
                  errorField = closestInput;
                  break;
                }
              }
            }
            console.log('üîç scrollToError - Found by error message:', !!errorField);
          }
          
          if (errorField) {
            console.log('üîç scrollToError - Found error field:', errorField);
            
            // Scroll ‡πÑ‡∏õ‡∏¢‡∏±‡∏á error field
            errorField.scrollIntoView({ 
              behavior: 'smooth', 
              block: 'center',
              inline: 'nearest'
            });
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° focus ‡πÅ‡∏•‡∏∞ highlight effect
            if (errorField instanceof HTMLElement) {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô input, select, textarea ‡πÉ‡∏´‡πâ focus
              if (errorField.tagName === 'INPUT' || errorField.tagName === 'SELECT' || errorField.tagName === 'TEXTAREA') {
              errorField.focus();
              }
              
              // ‡πÄ‡∏û‡∏¥‡πà‡∏° highlight effect
              errorField.classList.add('animate-pulse', 'ring-2', 'ring-red-500');
              setTimeout(() => {
                errorField.classList.remove('animate-pulse', 'ring-2', 'ring-red-500');
              }, 3000);
              
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error message ‡πÉ‡∏´‡πâ highlight parent element
              if (errorField.classList.contains('text-red-500') || errorField.classList.contains('text-red-600')) {
                const parentDiv = errorField.closest('div');
                if (parentDiv) {
                  parentDiv.classList.add('animate-pulse', 'ring-2', 'ring-red-500', 'bg-red-50');
                  setTimeout(() => {
                    parentDiv.classList.remove('animate-pulse', 'ring-2', 'ring-red-500', 'bg-red-50');
                  }, 3000);
                }
              }
            }
          } else {
            console.log('‚ùå scrollToError - Could not find error field for:', errorKey);
          }
        }, 500);
      }, 200);
    }
  };

  const handleInputChange = (key: string, value: string | boolean | File | File[]) => {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç department ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ department ‡∏à‡∏≤‡∏Å URL parameter
    if (key === 'department' && searchParams.get('department')) {
      console.log('üö´ Department cannot be changed when selected from Dashboard');
      return;
    }
    
    // ‡∏•‡∏ö error summary ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const errorSummary = document.getElementById('error-summary');
    if (errorSummary) {
      errorSummary.remove();
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï form data ‡∏Å‡πà‡∏≠‡∏ô
    if (key.includes('.')) {
      // Handle nested objects like spouseInfo.firstName
      const [parentKey, childKey] = key.split('.');
      setFormData(prev => ({
        ...prev,
        [parentKey]: {
          ...(prev[parentKey as keyof FormData] as any),
          [childKey]: value
        }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [key]: value
      }));
    }

    // ‡∏•‡πâ‡∏≤‡∏á error ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï form data
    if (errors[key]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[key];
        return newErrors;
      });
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nested fields
    if (key.includes('.')) {
      const [parentKey, childKey] = key.split('.');
      const nestedKey = `${parentKey}${childKey.charAt(0).toUpperCase() + childKey.slice(1)}`;
      if (errors[nestedKey]) {
        setErrors(prev => {
          const newErrors = { ...prev };
          delete newErrors[nestedKey];
          return newErrors;
        });
      }
    }
    // ‡∏•‡πâ‡∏≤‡∏á error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö documents fields
    if (key.startsWith('documents.')) {
      const docType = key.split('.')[1];
      const errorKey = `documents${docType.charAt(0).toUpperCase() + docType.slice(1)}`;
      if (errors[errorKey]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[errorKey];
        return newErrors;
      });
      }
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
  const handleTextOnlyChange = (key: string, value: string) => {
    // ‡∏•‡∏ö error summary ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const errorSummary = document.getElementById('error-summary');
    if (errorSummary) {
      errorSummary.remove();
    }
    
    // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å value
    const textOnly = value.replace(/[0-9]/g, '');
    handleInputChange(key, textOnly);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
  const handleNumberOnlyChange = (key: string, value: string) => {
    // ‡∏•‡∏ö error summary ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const errorSummary = document.getElementById('error-summary');
    if (errorSummary) {
      errorSummary.remove();
    }
    
    // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å value ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const numberOnly = value.replace(/[^0-9]/g, '');
    handleInputChange(key, numberOnly);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞ -)
  const handleVillageNumberChange = (key: string, value: string) => {
    // ‡∏•‡∏ö error summary ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const errorSummary = document.getElementById('error-summary');
    if (errorSummary) {
      errorSummary.remove();
    }
    
    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞ - ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const allowedValue = value.replace(/[^0-9-]/g, '');
    handleInputChange(key, allowedValue);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏à‡∏≥‡∏Å‡∏±‡∏î 13 ‡∏´‡∏•‡∏±‡∏Å)
  const handleIdNumberChange = (value: string) => {
    // ‡∏•‡∏ö error summary ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const errorSummary = document.getElementById('error-summary');
    if (errorSummary) {
      errorSummary.remove();
    }
    
    // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å value ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const numberOnly = value.replace(/[^0-9]/g, '');
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å
    const limitedValue = numberOnly.slice(0, 13);
    handleInputChange('idNumber', limitedValue);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå (‡∏à‡∏≥‡∏Å‡∏±‡∏î 5 ‡∏´‡∏•‡∏±‡∏Å)
  const handlePostalCodeChange = (key: string, value: string) => {
    // ‡∏•‡∏ö error summary ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const errorSummary = document.getElementById('error-summary');
    if (errorSummary) {
      errorSummary.remove();
    }
    
    // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å value ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const numberOnly = value.replace(/[^0-9]/g, '');
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏´‡∏•‡∏±‡∏Å
    const limitedValue = numberOnly.slice(0, 5);
    handleInputChange(key, limitedValue);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
  const handleGpaChange = (value: string) => {
    // ‡∏•‡∏ö error summary ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const errorSummary = document.getElementById('error-summary');
    if (errorSummary) {
      errorSummary.remove();
    }
    
    // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å value ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î
    const numberOnly = value.replace(/[^0-9.]/g, '');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏à‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const dotCount = (numberOnly.match(/\./g) || []).length;
    if (dotCount > 1) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏à‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å
      const firstDotIndex = numberOnly.indexOf('.');
      const beforeDot = numberOnly.substring(0, firstDotIndex);
      const afterDot = numberOnly.substring(firstDotIndex + 1).replace(/\./g, '');
      const limitedValue = beforeDot + '.' + afterDot;
      
      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      const parts = limitedValue.split('.');
      if (parts[1] && parts[1].length > 2) {
        return beforeDot + '.' + parts[1].slice(0, 2);
      }
      return limitedValue;
    }
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const parts = numberOnly.split('.');
    if (parts[1] && parts[1].length > 2) {
      return parts[0] + '.' + parts[1].slice(0, 2);
    }
    
    return numberOnly;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö (‡∏à‡∏≥‡∏Å‡∏±‡∏î 4 ‡∏´‡∏•‡∏±‡∏Å)
  const handleYearChange = (value: string) => {
    // ‡∏•‡∏ö error summary ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const errorSummary = document.getElementById('error-summary');
    if (errorSummary) {
      errorSummary.remove();
    }
    
    // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å value ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const numberOnly = value.replace(/[^0-9]/g, '');
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏´‡∏•‡∏±‡∏Å
    const limitedValue = numberOnly.slice(0, 4);
    
    // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2500 (‡∏õ‡∏µ ‡∏û.‡∏®.) ‡πÉ‡∏´‡πâ‡∏ö‡∏ß‡∏Å 543
    if (limitedValue && parseInt(limitedValue) < 2500 && parseInt(limitedValue) > 1900) {
      const thaiYear = parseInt(limitedValue) + 543;
      return thaiYear.toString();
    }
    
    return limitedValue;
  };

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô '-' ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  const normalizeDash = (v?: string | null) => {
    if (v == null) return null;
    const t = String(v).trim();
    if (t === '-' ) return '';
    return t;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const handleCopyFromRegisteredAddress = (checked: boolean) => {
    // ‡∏•‡∏ö error summary ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const errorSummary = document.getElementById('error-summary');
    if (errorSummary) {
      errorSummary.remove();
    }
    
    setCopyFromRegisteredAddress(checked);
    
    if (checked && formData.registeredAddress) {
      setFormData(prev => ({
        ...prev,
        currentAddressDetail: {
          ...prev.currentAddressDetail,
          houseNumber: formData.registeredAddress?.houseNumber || '',
          villageNumber: formData.registeredAddress?.villageNumber || '',
          alley: formData.registeredAddress?.alley || '',
          road: formData.registeredAddress?.road || '',
          subDistrict: formData.registeredAddress?.subDistrict || '',
          district: formData.registeredAddress?.district || '',
          province: formData.registeredAddress?.province || '',
          postalCode: formData.registeredAddress?.postalCode || '',
          homePhone: formData.registeredAddress?.phone || '',
          mobilePhone: formData.registeredAddress?.mobile || ''
        }
      }));
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const uploadDocument = async (file: File, documentType: string, resumeDepositId: string) => {
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('documentType', documentType);
      formData.append('resumeDepositId', resumeDepositId);

      const response = await fetch('/api/resume-documents/upload', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();
      
      if (result.success) {
        return {
          success: true,
          data: result.data
        };
      } else {
        console.error('Upload failed:', result.message);
        return {
          success: false,
          message: result.message
        };
      }
    } catch (error) {
      console.error('Upload error:', error);
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'
      };
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  const handleDocumentUpload = async (file: File, documentType: string) => {
    if (!savedResume?.id) {
      console.log('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    try {
      setIsUploading(true);
      const result = await uploadDocument(file, documentType, savedResume.id);
      
      if (result.success) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
        const documents = await fetchUploadedDocuments(savedResume.id);
        setUploadedDocuments(documents);
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:', result.message || 'Unknown error');
      }
    } catch (error) {
      console.error('Error uploading document:', error);
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
    } finally {
      setIsUploading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
  const fetchUploadedDocuments = async (resumeDepositId: string) => {
    try {
      const response = await fetch(`/api/resume-documents?resumeDepositId=${resumeDepositId}`);
      const result = await response.json();
      
      if (result.success) {
        return result.data;
      } else {
        console.error('Fetch documents failed:', result.message);
        return [];
      }
    } catch (error) {
      console.error('Fetch documents error:', error);
      return [];
    }
  };
  const handlePreviewFile = (file: File, fileName: string) => {
    setPreviewFile({
      file,
      name: fileName,
      type: file.type
    });
    setShowPreviewModal(true);
  };

  const closePreviewModal = () => {
    setShowPreviewModal(false);
    setPreviewFile(null);
  };
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
  const handleDeleteDocument = async (documentId: string, documentType: string) => {
    if (!savedResume?.id) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥');
      return;
    }

    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
      return;
    }

    try {
      setIsUploading(true);
      
      const response = await fetch(`/api/resume-documents/${documentId}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
        const documents = await fetchUploadedDocuments(savedResume.id);
        setUploadedDocuments(documents);
        
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å formData ‡∏î‡πâ‡∏ß‡∏¢
        setFormData(prev => ({
          ...prev,
          documents: {
            ...prev.documents,
            [documentType]: undefined
          }
        }));
        
        console.log('‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå:', result.message || 'Unknown error');
      }
    } catch (error) {
      console.error('Delete document error:', error);
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå');
    } finally {
      setIsUploading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
  const handleDeleteNewDocument = (documentType: string) => {
    setFormData(prev => ({
      ...prev,
      documents: {
        ...prev.documents,
        [documentType]: undefined
      }
    }));
  };

  const handleArrayChange = (
    arrayName: 'education' | 'workExperience' | 'multipleEmployers',
    index: number,
    field: string,
    value: string
  ) => {
    setFormData(prev => {
      if (arrayName === 'multipleEmployers') {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multipleEmployers ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string array
        const stringArray = [...(prev.multipleEmployers || [])];
        stringArray[index] = value;
        return { ...prev, multipleEmployers: stringArray };
      } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö education ‡πÅ‡∏•‡∏∞ workExperience ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô object array
        const newArray = [...(prev[arrayName] as any[])];
        newArray[index] = { ...newArray[index], [field]: value };
        return { ...prev, [arrayName]: newArray };
      }
    });

    // ‡∏•‡πâ‡∏≤‡∏á error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö array fields
    const errorKey = `${arrayName}${index}${field.charAt(0).toUpperCase() + field.slice(1)}`;
    if (errors[errorKey]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[errorKey];
        return newErrors;
      });
    }
  };

  const addEducation = () => {
    setFormData(prev => ({
        ...prev,
        education: [...prev.education, {
          level: '',
          institution: '',
          major: '',
          year: '',
          gpa: ''
        }]
    }));
  };

  const removeEducation = (index: number) => {
    setFormData(prev => ({
      ...prev,
      education: prev.education.filter((_, i) => i !== index)
    }));
  };

  const addWorkExperience = () => {
    setFormData(prev => ({
        ...prev,
        workExperience: [...prev.workExperience, {
          position: '',
          company: '',
          startDate: '',
          endDate: '',
          salary: '',
          reason: '',
          district: '',
          province: '',
          phone: ''
        }]
    }));
  };

  const removeWorkExperience = (index: number) => {
    setFormData(prev => ({
      ...prev,
      workExperience: prev.workExperience.filter((_, i) => i !== index)
    }));
  };
  const addPreviousGovernmentService = () => {
    setFormData(prev => ({
      ...prev,
      previousGovernmentService: [
        ...prev.previousGovernmentService,
        {
          position: '',
          department: '',
          reason: '',
          date: '',
          type: 'civilServant' // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
        }
      ]
    }));
  };

  const removePreviousGovernmentService = (index: number) => {
    setFormData(prev => ({
      ...prev,
      previousGovernmentService: prev.previousGovernmentService.filter((_, i) => i !== index)
    }));
  };

  const handlePreviousGovernmentServiceChange = (index: number, field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      previousGovernmentService: prev.previousGovernmentService.map((service, i) =>
        i === index ? { ...service, [field]: value } : service
      )
    }));
  };

  const handleEducationChange = (index: number, field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      education: prev.education.map((edu, i) =>
        i === index ? { ...edu, [field]: value } : edu
      )
    }));
  };

  const handleWorkExperienceChange = (index: number, field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      workExperience: prev.workExperience.map((work, i) =>
        i === index ? { ...work, [field]: value } : work
      )
    }));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏ö
  const validateAllTabs = () => {
    const errors: Record<string, string> = {};
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - 1.1 ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
    if (!formData.prefix || formData.prefix.trim() === '') {
      errors.prefix = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤';
    }
    if (!formData.firstName || formData.firstName.trim() === '') {
      errors.firstName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠';
    }
    if (!formData.lastName || formData.lastName.trim() === '') {
      errors.lastName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•';
    }
    if (!formData.idNumber || formData.idNumber.trim() === '') {
      errors.idNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô';
    } else if (!/^[0-9]{13}$/.test(formData.idNumber.replace(/[-\s]/g, ''))) {
      errors.idNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (13 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    if (!formData.birthDate) {
      errors.birthDate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î';
    }
    if (!formData.age || formData.age.trim() === '') {
      errors.age = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏';
    }
    if (!formData.placeOfBirth || formData.placeOfBirth.trim() === '') {
      errors.placeOfBirth = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î';
    }
    if (!formData.gender || formData.gender === 'UNKNOWN') {
      errors.gender = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®';
    }
    if (!formData.nationality || formData.nationality.trim() === '') {
      errors.nationality = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥';
    }
    if (!formData.religion || formData.religion.trim() === '') {
      errors.religion = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏®‡∏≤‡∏™‡∏ô‡∏≤';
    }
    if (!formData.maritalStatus || formData.maritalStatus === 'UNKNOWN') {
      errors.maritalStatus = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û';
    }
    
    // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - 1.2 ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
    if (!formData.registeredAddress?.houseNumber || formData.registeredAddress.houseNumber.trim() === '') {
      errors.registeredAddressHouseNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà';
    }
    if (!formData.registeredAddress?.villageNumber || formData.registeredAddress.villageNumber.trim() === '') {
      errors.registeredAddressVillageNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà';
    }
    if (!formData.registeredAddress?.subDistrict || formData.registeredAddress.subDistrict.trim() === '') {
      errors.registeredAddressSubDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á';
    }
    if (!formData.registeredAddress?.district || formData.registeredAddress.district.trim() === '') {
      errors.registeredAddressDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï';
    }
    if (!formData.registeredAddress?.province || formData.registeredAddress.province.trim() === '') {
      errors.registeredAddressProvince = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î';
    }
    if (!formData.registeredAddress?.postalCode || formData.registeredAddress.postalCode.trim() === '') {
      errors.registeredAddressPostalCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå';
    }
    if (!formData.registeredAddress?.mobile || formData.registeredAddress.mobile.trim() === '') {
      errors.registeredAddressMobile = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠';
    }
    
    // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    if (!formData.currentAddressDetail?.houseNumber || formData.currentAddressDetail.houseNumber.trim() === '') {
      errors.currentAddressHouseNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà';
    }
    if (!formData.currentAddressDetail?.villageNumber || formData.currentAddressDetail.villageNumber.trim() === '') {
      errors.currentAddressVillageNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà';
    }
    if (!formData.currentAddressDetail?.subDistrict || formData.currentAddressDetail.subDistrict.trim() === '') {
      errors.currentAddressSubDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á';
    }
    if (!formData.currentAddressDetail?.district || formData.currentAddressDetail.district.trim() === '') {
      errors.currentAddressDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï';
    }
    if (!formData.currentAddressDetail?.province || formData.currentAddressDetail.province.trim() === '') {
      errors.currentAddressProvince = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î';
    }
    if (!formData.currentAddressDetail?.postalCode || formData.currentAddressDetail.postalCode.trim() === '') {
      errors.currentAddressPostalCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå';
    }
    if (!formData.currentAddressDetail?.mobilePhone || formData.currentAddressDetail.mobilePhone.trim() === '') {
      errors.currentAddressMobilePhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠';
    }
    if (!formData.phone) errors.phone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
    if (!formData.email) errors.email = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
    
    // ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - 1.6 ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (!formData.emergencyContactFirstName || formData.emergencyContactFirstName.trim() === '') {
      errors.emergencyContactFirstName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyContactLastName || formData.emergencyContactLastName.trim() === '') {
      errors.emergencyContactLastName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyRelationship || formData.emergencyRelationship.trim() === '') {
      errors.emergencyRelationship = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyPhone || formData.emergencyPhone.trim() === '') {
      errors.emergencyPhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    } else if (!/^[0-9]{9,10}$/.test(formData.emergencyPhone.replace(/[-\s]/g, ''))) {
      errors.emergencyPhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (9-10 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    if (!formData.emergencyAddress?.houseNumber || formData.emergencyAddress.houseNumber.trim() === '') {
      errors.emergencyAddressHouseNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.villageNumber || formData.emergencyAddress.villageNumber.trim() === '') {
      errors.emergencyAddressVillageNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.subDistrict || formData.emergencyAddress.subDistrict.trim() === '') {
      errors.emergencyAddressSubDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.district || formData.emergencyAddress.district.trim() === '') {
      errors.emergencyAddressDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.province || formData.emergencyAddress.province.trim() === '') {
      errors.emergencyAddressProvince = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.postalCode || formData.emergencyAddress.postalCode.trim() === '') {
      errors.emergencyAddressPostalCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyWorkplace?.name || formData.emergencyWorkplace.name.trim() === '') {
      errors.emergencyWorkplaceName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyWorkplace?.district || formData.emergencyWorkplace.district.trim() === '') {
      errors.emergencyWorkplaceDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyWorkplace?.province || formData.emergencyWorkplace.province.trim() === '') {
      errors.emergencyWorkplaceProvince = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyWorkplace?.phone || formData.emergencyWorkplace.phone.trim() === '') {
      errors.emergencyWorkplacePhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    } else if (!/^[0-9]{9,10}$/.test(formData.emergencyWorkplace.phone.replace(/[-\s]/g, ''))) {
      errors.emergencyWorkplacePhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (9-10 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏£‡∏™) - ‡∏°‡∏µ *
    if (formData.maritalStatus === '‡∏™‡∏°‡∏£‡∏™') {
      if (!formData.spouseInfo?.firstName || !formData.spouseInfo?.lastName) {
        errors.spouseInfoFirstName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™';
        errors.spouseInfoLastName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™';
      }
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) - ‡∏°‡∏µ *
    if (formData.medicalRights?.hasUniversalHealthcare && !formData.medicalRights?.universalHealthcareHospital) {
      errors.medicalRightsUniversalHealthcareHospital = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•';
    }
    if (formData.medicalRights?.hasSocialSecurity && !formData.medicalRights?.socialSecurityHospital) {
      errors.medicalRightsSocialSecurityHospital = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•';
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - 2.1 ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    if (!formData.education || formData.education.length === 0) {
      errors.education = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£';
    } else {
      formData.education.forEach((edu, index) => {
        if (!edu.level || edu.level.trim() === '') {
          errors[`education${index}Level`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤';
        }
        if (!edu.institution || edu.institution.trim() === '') {
          errors[`education${index}Institution`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô';
        }
        if (!edu.major || edu.major.trim() === '') {
          errors[`education${index}Major`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤';
        }
        if (!edu.year || edu.year.trim() === '') {
          errors[`education${index}Year`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö';
        }
      });
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - 3.1 ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    if (!formData.workExperience || formData.workExperience.length === 0) {
      errors.workExperience = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£';
    } else {
      formData.workExperience.forEach((work, index) => {
        if (!work.company || work.company.trim() === '') {
          errors[`workExperience${index}Company`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó';
        }
        if (!work.position || work.position.trim() === '') {
          errors[`workExperience${index}Position`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á';
        }
        if (!work.startDate || work.startDate.trim() === '') {
          errors[`workExperience${index}StartDate`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô';
        }
        if (!work.endDate || work.endDate.trim() === '') {
          errors[`workExperience${index}EndDate`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏á‡∏≤‡∏ô';
        }
      });
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - ‡∏°‡∏µ *
    if (!formData.skills || formData.skills.trim() === '') {
      errors.skills = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©';
    }
    if (!formData.languages || formData.languages.trim() === '') {
      errors.languages = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';
    }
    if (!formData.computerSkills || formData.computerSkills.trim() === '') {
      errors.computerSkills = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå';
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    if (!formData.appliedPosition) errors.appliedPosition = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£';
    if (!formData.availableDate) errors.availableDate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô';
    // expectedSalary ‡πÅ‡∏•‡∏∞ department ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô - ‡∏•‡∏ö validation ‡∏≠‡∏≠‡∏Å
    
    // ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - ‡∏°‡∏µ *
    const hasIdCard = formData.documents?.idCard || uploadedDocuments.some(doc => doc.documentType === 'idCard');
    const hasHouseRegistration = formData.documents?.houseRegistration || uploadedDocuments.some(doc => doc.documentType === 'houseRegistration');
    const hasEducationCertificate = formData.documents?.educationCertificate || uploadedDocuments.some(doc => doc.documentType === 'educationCertificate');
    const hasMilitaryCertificate = formData.documents?.militaryCertificate || uploadedDocuments.some(doc => doc.documentType === 'militaryCertificate');
    const hasMedicalCertificate = formData.documents?.medicalCertificate || uploadedDocuments.some(doc => doc.documentType === 'medicalCertificate');
    const hasDrivingLicense = formData.documents?.drivingLicense || uploadedDocuments.some(doc => doc.documentType === 'drivingLicense');
    
    if (!hasIdCard) errors.idCard = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô';
    if (!hasHouseRegistration) errors.houseRegistration = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô';
    if (!hasEducationCertificate) errors.educationCertificate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£';
    if (!hasMilitaryCertificate) errors.militaryCertificate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£';
    if (!hasMedicalCertificate) errors.medicalCertificate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå';
    if (!hasDrivingLicense) errors.drivingLicense = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà';
    
    return errors;
  };
  const validateForm = () => {
    const errors: { [key: string]: string } = {};
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    if (!formData.prefix) errors.prefix = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤';
    if (!formData.firstName) errors.firstName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠';
    if (!formData.lastName) errors.lastName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•';
    if (!formData.age) errors.age = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏';
    if (!formData.birthDate) errors.birthDate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î';
    if (!formData.placeOfBirth) errors.placeOfBirth = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î';
    if (!formData.placeOfBirthProvince) errors.placeOfBirthProvince = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î';
    if (!formData.race) errors.race = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥';
    if (!formData.nationality) errors.nationality = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥';
    if (!formData.religion) errors.religion = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏®‡∏≤‡∏™‡∏ô‡∏≤';
    if (!formData.gender) errors.gender = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®';
    if (!formData.maritalStatus) errors.maritalStatus = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß';
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    if (!formData.idNumber) {
      errors.idNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô';
    } else if (!/^[0-9]{13}$/.test(formData.idNumber.replace(/[-\s]/g, ''))) {
      errors.idNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (13 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    if (!formData.idCardIssuedAt) errors.idCardIssuedAt = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£';
    if (!formData.idCardIssueDate) errors.idCardIssueDate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£';
    if (!formData.idCardExpiryDate) errors.idCardExpiryDate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ï‡∏£';
    
    // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    if (!formData.registeredAddress?.houseNumber) errors.registeredAddressHouseNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà';
    if (!formData.registeredAddress?.villageNumber || formData.registeredAddress.villageNumber.trim() === '') {
      errors.registeredAddressVillageNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà';
    }
    if (!formData.registeredAddress?.alley || formData.registeredAddress.alley.trim() === '') {
      errors.registeredAddressAlley = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢';
    }
    if (!formData.registeredAddress?.road || formData.registeredAddress.road.trim() === '') {
      errors.registeredAddressRoad = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô';
    }
    if (!formData.registeredAddress?.subDistrict) errors.registeredAddressSubDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á';
    if (!formData.registeredAddress?.district) errors.registeredAddressDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï';
    if (!formData.registeredAddress?.province) errors.registeredAddressProvince = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î';
    if (!formData.registeredAddress?.postalCode) {
      errors.registeredAddressPostalCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå';
    } else if (!/^[0-9]{5}$/.test(formData.registeredAddress.postalCode.replace(/[-\s]/g, ''))) {
      errors.registeredAddressPostalCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (5 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    if (!formData.registeredAddress?.mobile) {
      errors.registeredAddressMobile = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠';
    } else if (!/^[0-9]{9,10}$/.test(formData.registeredAddress.mobile.replace(/[-\s]/g, ''))) {
      errors.registeredAddressMobile = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (9-10 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    
    // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    if (!formData.currentAddressDetail?.houseNumber) errors.currentAddressHouseNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà';
    if (!formData.currentAddressDetail?.villageNumber || formData.currentAddressDetail.villageNumber.trim() === '') {
      errors.currentAddressVillageNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà';
    }
    if (!formData.currentAddressDetail?.alley || formData.currentAddressDetail.alley.trim() === '') {
      errors.currentAddressAlley = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢';
    }
    if (!formData.currentAddressDetail?.road || formData.currentAddressDetail.road.trim() === '') {
      errors.currentAddressRoad = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô';
    }
    if (!formData.currentAddressDetail?.subDistrict) errors.currentAddressSubDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á';
    if (!formData.currentAddressDetail?.district) errors.currentAddressDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï';
    if (!formData.currentAddressDetail?.province) errors.currentAddressProvince = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î';
    if (!formData.currentAddressDetail?.postalCode) {
      errors.currentAddressPostalCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå';
    } else if (!/^[0-9]{5}$/.test(formData.currentAddressDetail.postalCode.replace(/[-\s]/g, ''))) {
      errors.currentAddressPostalCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (5 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    if (!formData.currentAddressDetail?.mobilePhone) {
      errors.currentAddressMobilePhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠';
    } else if (!/^[0-9]{9,10}$/.test(formData.currentAddressDetail.mobilePhone.replace(/[-\s]/g, ''))) {
      errors.currentAddressMobilePhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (9-10 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    if (!formData.phone) errors.phone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
    if (!formData.email) errors.email = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
    
    // ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - 1.6 ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (!formData.emergencyContactFirstName || formData.emergencyContactFirstName.trim() === '') {
      errors.emergencyContactFirstName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyContactLastName || formData.emergencyContactLastName.trim() === '') {
      errors.emergencyContactLastName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyRelationship || formData.emergencyRelationship.trim() === '') {
      errors.emergencyRelationship = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyPhone || formData.emergencyPhone.trim() === '') {
      errors.emergencyPhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    } else if (!/^[0-9]{9,10}$/.test(formData.emergencyPhone.replace(/[-\s]/g, ''))) {
      errors.emergencyPhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (9-10 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    if (!formData.emergencyAddress?.houseNumber || formData.emergencyAddress.houseNumber.trim() === '') {
      errors.emergencyAddressHouseNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.villageNumber || formData.emergencyAddress.villageNumber.trim() === '') {
      errors.emergencyAddressVillageNumber = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.alley || formData.emergencyAddress.alley.trim() === '') {
      errors.emergencyAddressAlley = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.road || formData.emergencyAddress.road.trim() === '') {
      errors.emergencyAddressRoad = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.subDistrict || formData.emergencyAddress.subDistrict.trim() === '') {
      errors.emergencyAddressSubDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.district || formData.emergencyAddress.district.trim() === '') {
      errors.emergencyAddressDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.province || formData.emergencyAddress.province.trim() === '') {
      errors.emergencyAddressProvince = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyAddress?.postalCode || formData.emergencyAddress.postalCode.trim() === '') {
      errors.emergencyAddressPostalCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    } else if (!/^[0-9]{5}$/.test(formData.emergencyAddress.postalCode)) {
      errors.emergencyAddressPostalCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (5 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    if (formData.emergencyAddress?.phone && !/^[0-9]{9,10}$/.test(formData.emergencyAddress.phone.replace(/[-\s]/g, ''))) {
      errors.emergencyAddressPhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (9-10 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    if (!formData.emergencyWorkplace?.name || formData.emergencyWorkplace.name.trim() === '') {
      errors.emergencyWorkplaceName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyWorkplace?.district || formData.emergencyWorkplace.district.trim() === '') {
      errors.emergencyWorkplaceDistrict = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyWorkplace?.province || formData.emergencyWorkplace.province.trim() === '') {
      errors.emergencyWorkplaceProvince = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    }
    if (!formData.emergencyWorkplace?.phone || formData.emergencyWorkplace.phone.trim() === '') {
      errors.emergencyWorkplacePhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
    } else if (!/^[0-9]{9,10}$/.test(formData.emergencyWorkplace.phone.replace(/[-\s]/g, ''))) {
      errors.emergencyWorkplacePhone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (9-10 ‡∏´‡∏•‡∏±‡∏Å)';
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö position
    if (activeTab === 'position') {
      if (!formData.appliedPosition) errors.appliedPosition = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£';
      if (!formData.availableDate) errors.availableDate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô';
      // expectedSalary ‡πÅ‡∏•‡∏∞ department ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô - ‡∏•‡∏ö validation ‡∏≠‡∏≠‡∏Å
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏£‡∏™) - ‡∏°‡∏µ *
    if (formData.maritalStatus === '‡∏™‡∏°‡∏£‡∏™') {
      if (!formData.spouseInfo?.firstName || !formData.spouseInfo?.lastName) {
        errors.spouseInfoFirstName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™';
        errors.spouseInfoLastName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™';
      }
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) - ‡∏°‡∏µ *
    if (formData.medicalRights?.hasUniversalHealthcare && !formData.medicalRights?.universalHealthcareHospital) {
      errors.medicalRightsUniversalHealthcareHospital = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•';
    }
    if (formData.medicalRights?.hasSocialSecurity && !formData.medicalRights?.socialSecurityHospital) {
      errors.medicalRightsSocialSecurityHospital = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•';
    }
    if (formData.medicalRights?.wantToChangeHospital && !formData.medicalRights?.newHospital) {
      errors.medicalRightsNewHospital = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÉ‡∏´‡∏°‡πà';
    }
    if (formData.medicalRights?.otherRights && !formData.medicalRights?.otherRights.trim()) {
      errors.medicalRightsOtherRights = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ';
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) - ‡∏°‡∏µ *
    if (formData.multipleEmployers && formData.multipleEmployers.length > 0) {
      formData.multipleEmployers.forEach((employer, index) => {
        if (employer && employer.trim() === '') {
          errors[`multipleEmployers${index}`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£';
        }
      });
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - 1.7 ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ - ‡∏°‡∏µ *
    if (formData.education.length === 0) {
      errors.education = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£';
    } else {
      formData.education.forEach((edu, index) => {
        if (!edu.level || edu.level.trim() === '') {
          errors[`education${index}Level`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤';
        }
        if (!edu.institution || edu.institution.trim() === '') {
          errors[`education${index}Institution`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤';
        }
        if (!edu.major || edu.major.trim() === '') {
          errors[`education${index}Major`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤';
        }
        if (!edu.year || edu.year.trim() === '') {
          errors[`education${index}Year`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤';
        } else if (!/^[0-9]{4}$/.test(edu.year)) {
          errors[`education${index}Year`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (4 ‡∏´‡∏•‡∏±‡∏Å)';
        }
        if (!edu.gpa || edu.gpa.trim() === '') {
          errors[`education${index}Gpa`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢';
        } else if (!/^[0-4]\.?[0-9]*$/.test(edu.gpa) || parseFloat(edu.gpa) > 4.0) {
          errors[`education${index}Gpa`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (0.00-4.00)';
        }
      });
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - 1.8 ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á - ‡∏°‡∏µ *
    if (formData.workExperience.length === 0) {
      errors.workExperience = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£';
    } else {
      formData.workExperience.forEach((work, index) => {
        if (!work.position || work.position.trim() === '') {
          errors[`workExperience${index}Position`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô';
        }
        if (!work.company || work.company.trim() === '') {
          errors[`workExperience${index}Company`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£';
        }
        if (!work.startDate || work.startDate.trim() === '') {
          errors[`workExperience${index}StartDate`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô';
        }
        if (!work.endDate || work.endDate.trim() === '') {
          errors[`workExperience${index}EndDate`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏á‡∏≤‡∏ô';
        }
        if (!work.salary || work.salary.trim() === '') {
          errors[`workExperience${index}Salary`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';
        } else if (!/^[0-9,]+$/.test(work.salary.replace(/[,\s]/g, ''))) {
          errors[`workExperience${index}Salary`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô';
        }
        if (!work.reason || work.reason.trim() === '') {
          errors[`workExperience${index}Reason`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô';
        }
      });
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) - 1.9 ‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á
    if (formData.previousGovernmentService && formData.previousGovernmentService.length > 0) {
      formData.previousGovernmentService.forEach((gov, index) => {
        if (!gov.position || gov.position.trim() === '') {
          errors[`previousGovernmentService${index}Position`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£';
        }
        if (!gov.department || gov.department.trim() === '') {
          errors[`previousGovernmentService${index}Department`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£';
        }
        if (!gov.reason || gov.reason.trim() === '') {
          errors[`previousGovernmentService${index}Reason`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£';
        }
        if (!gov.date || gov.date.trim() === '') {
          errors[`previousGovernmentService${index}Date`] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£';
        }
      });
    }
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö skills
    if (activeTab === 'skills') {
      if (!formData.skills || formData.skills.trim() === '') {
        errors.skills = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©';
      }
      if (!formData.languages || formData.languages.trim() === '') {
        errors.languages = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';
      }
      if (!formData.computerSkills || formData.computerSkills.trim() === '') {
        errors.computerSkills = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå';
      }
    }
    
    // ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) - ‡∏°‡∏µ *
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á formData.documents ‡πÅ‡∏•‡∏∞ uploadedDocuments
    const hasIdCard = formData.documents?.idCard || uploadedDocuments.some(doc => doc.documentType === 'idCard');
    const hasHouseRegistration = formData.documents?.houseRegistration || uploadedDocuments.some(doc => doc.documentType === 'houseRegistration');
    const hasEducationCertificate = formData.documents?.educationCertificate || uploadedDocuments.some(doc => doc.documentType === 'educationCertificate');
    const hasMilitaryCertificate = formData.documents?.militaryCertificate || uploadedDocuments.some(doc => doc.documentType === 'militaryCertificate');
    
    if (!hasIdCard) {
      errors.documentsIdCard = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô';
    }
    if (!hasHouseRegistration) {
      errors.documentsHouseRegistration = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô';
    }
    if (!hasEducationCertificate) {
      errors.documentsEducationCertificate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤';
    }
    if (formData.gender === '‡∏ä‡∏≤‡∏¢' && !hasMilitaryCertificate) {
      errors.documentsMilitaryCertificate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢)';
    }
    // if (!formData.documents?.medicalCertificate) {
    //   errors.documentsMedicalCertificate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå';
    // }
    // if (!formData.documents?.drivingLicense) {
    //   errors.documentsDrivingLicense = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà';
    // }
    // if (!formData.documents?.nameChangeCertificate) {
    //   errors.documentsNameChangeCertificate = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÉ‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•';
    // }
    
    return errors;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    const validationErrors = validateAllTabs();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', Object.keys(validationErrors).length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', validationErrors);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const errorMessages = Object.values(validationErrors).slice(0, 5); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏£‡∏Å
      const remainingErrors = Object.keys(validationErrors).length - 5;
      const message = `‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n\n‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${Object.keys(validationErrors).length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n\n${errorMessages.join('\n')}${remainingErrors > 0 ? `\n\n‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${remainingErrors} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...` : ''}`;
      console.error(message);
      
      // Scroll ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ error ‡πÅ‡∏£‡∏Å
      const firstErrorKey = Object.keys(validationErrors)[0];
      scrollToError(firstErrorKey);
      
      return;
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á errors ‡πÄ‡∏°‡∏∑‡πà‡∏≠ validation ‡∏ú‡πà‡∏≤‡∏ô
    setErrors({});
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    setIsSaving(true);

    try {
      const timestamp = new Date().toISOString();

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà ResumeDeposit ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      console.log('üîç Mode: RESUME DEPOSIT (‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥) - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á ResumeDeposit ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      console.log('üîç departmentId:', departmentId);
      console.log('üîç departmentName:', departmentName);
      console.log('üîç resumeId:', resumeId);

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ resumeId ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏° ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      let savedResumeId = resumeId;
      if (resumeId) {
        console.log('üîç ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ResumeDeposit ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ID:', resumeId);
        await updateResumeDeposit(resumeId);
      } else {
        console.log('üîç ‡∏™‡∏£‡πâ‡∏≤‡∏á ResumeDeposit ‡πÉ‡∏´‡∏°‡πà');
        const savedResume = await saveToResumeDeposit();
        savedResumeId = savedResume?.id || savedResumeId;
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á application_form (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ department)
      if (departmentName && departmentId && savedResumeId) {
        console.log('üîç ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡πà‡∏≤‡∏¢:', departmentName);
        await createApplicationForm(savedResumeId, departmentName, departmentId);
      }
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      
    } catch (error) {
      console.error('‚ùå Error in handleSubmit:', error);
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    } finally {
      setIsSaving(false);
    }
  };
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ResumeDeposit ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  const updateResumeDeposit = async (id: string) => {
    try {
      console.log('üìù Updating ResumeDeposit ID:', id);
      console.log('üîç formData.education:', formData.education);
      console.log('üîç formData.education.length:', formData.education?.length || 0);
      console.log('üîç formData.workExperience:', formData.workExperience);
      console.log('üîç formData.workExperience.length:', formData.workExperience?.length || 0);
      console.log('üîç formData.previousGovernmentService:', formData.previousGovernmentService);
      console.log('üîç formData.previousGovernmentService.length:', formData.previousGovernmentService?.length || 0);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á ResumeDeposit payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      const resumePayload = {
        // ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
        prefix: formData.prefix || null,
        firstName: formData.firstName,
        lastName: formData.lastName,
        idNumber: formData.idNumber || null,
        idCardIssuedAt: formData.idCardIssuedAt || null,
          idCardIssueDate: formData.idCardIssueDate ? new Date(formData.idCardIssueDate) : null,
          idCardExpiryDate: formData.idCardExpiryDate ? new Date(formData.idCardExpiryDate) : null,
        birthDate: formData.birthDate ? new Date(formData.birthDate) : null,
        age: formData.age ? Number(formData.age) : null,
        race: formData.race || null,
        placeOfBirth: formData.placeOfBirth || null,
        placeOfBirthProvince: formData.placeOfBirthProvince || null,
        gender: formData.gender || 'UNKNOWN',
        nationality: formData.nationality || null,
        religion: formData.religion || null,
        maritalStatus: formData.maritalStatus || 'UNKNOWN',
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        address: formData.currentAddress || null,
        phone: formData.phone || null,
        email: formData.email || null,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        emergencyContact: formData.emergencyContact || null,
        emergencyContactFirstName: formData.emergencyContactFirstName || null,
        emergencyContactLastName: formData.emergencyContactLastName || null,
        emergencyPhone: formData.emergencyPhone || null,
        emergencyRelationship: formData.emergencyRelationship || null,
        emergencyAddress: formData.emergencyAddress || null,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        skills: formData.skills || null,
        languages: formData.languages || null,
        computerSkills: formData.computerSkills || null,
        certificates: formData.certificates || null,
        references: formData.references || null,
        // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
        expectedPosition: formData.appliedPosition || departmentName || null,
        expectedSalary: formData.expectedSalary || null,
          availableDate: formData.availableDate ? new Date(formData.availableDate) : null,
        department: departmentName || formData.department || null,
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™
        spouse_first_name: formData.spouseInfo?.firstName || null,
        spouse_last_name: formData.spouseInfo?.lastName || null,
        // ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ - ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (API ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ nested create)
        education: (formData.education || []).map((e) => ({
          level: e.level,
          school: e.institution,
          major: e.major || null,
          endYear: e.year,
          gpa: e.gpa ? parseFloat(e.gpa) : null
        })),
        // ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (API ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ nested create)
        workExperience: (formData.workExperience || []).map((w) => ({
          position: w.position,
          company: w.company,
          startDate: w.startDate ? new Date(w.startDate) : null,
          endDate: w.endDate ? new Date(w.endDate) : null,
          salary: w.salary || null,
          description: w.reason || null,
          isCurrent: w.endDate === null || w.endDate === '' || w.endDate === '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
          district: w.district || null,
          province: w.province || null,
          phone: w.phone || null,
        })),
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ - ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (API ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ nested create)
        previousGovernmentService: (formData.previousGovernmentService || []).map((g) => {
          console.log('üîç Mapping previousGovernmentService:', g);
          return {
            position: g.position,
            department: g.department,
            reason: g.reason,
            date: g.date,
            type: g.type || 'civilServant',
          };
        }),
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
        staff_position: formData.staffInfo?.position || null,
        staff_department: formData.staffInfo?.department || null,
        staff_start_work: formData.staffInfo?.startWork || null,
        
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
        house_registration_house_number: formData.registeredAddress?.houseNumber || null,
        house_registration_village_number: formData.registeredAddress?.villageNumber || null,
        house_registration_alley: formData.registeredAddress?.alley || null,
        house_registration_road: formData.registeredAddress?.road || null,
        house_registration_sub_district: formData.registeredAddress?.subDistrict || null,
        house_registration_district: formData.registeredAddress?.district || null,
        house_registration_province: formData.registeredAddress?.province || null,
        house_registration_postal_code: formData.registeredAddress?.postalCode || null,
        house_registration_phone: formData.registeredAddress?.phone || null,
        house_registration_mobile: formData.registeredAddress?.mobile || null,
        
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
        current_address_house_number: formData.currentAddressDetail?.houseNumber || null,
        current_address_village_number: formData.currentAddressDetail?.villageNumber || null,
        current_address_alley: formData.currentAddressDetail?.alley || null,
        current_address_road: formData.currentAddressDetail?.road || null,
        current_address_sub_district: formData.currentAddressDetail?.subDistrict || null,
        current_address_district: formData.currentAddressDetail?.district || null,
        current_address_province: formData.currentAddressDetail?.province || null,
        current_address_postal_code: formData.currentAddressDetail?.postalCode || null,
        current_address_phone: formData.currentAddressDetail?.homePhone || null,
        current_address_mobile: formData.currentAddressDetail?.mobilePhone || null,
        
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô (‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
        addressAccordingToHouseRegistration: formData.addressAccordingToHouseRegistration || null,
        
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        emergency_address_house_number: formData.emergencyAddress?.houseNumber || null,
        emergency_address_village_number: formData.emergencyAddress?.villageNumber || null,
        emergency_address_alley: formData.emergencyAddress?.alley || null,
        emergency_address_road: formData.emergencyAddress?.road || null,
        emergency_address_sub_district: formData.emergencyAddress?.subDistrict || null,
        emergency_address_district: formData.emergencyAddress?.district || null,
        emergency_address_province: formData.emergencyAddress?.province || null,
        emergency_address_postal_code: formData.emergencyAddress?.postalCode || null,
        emergency_address_phone: formData.emergencyAddress?.phone || null,
        
        // ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        emergency_workplace_name: formData.emergencyWorkplace?.name || null,
        emergency_workplace_district: formData.emergencyWorkplace?.district || null,
        emergency_workplace_province: formData.emergencyWorkplace?.province || null,
        emergency_workplace_phone: formData.emergencyWorkplace?.phone || null,
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
        medical_rights_has_universal_healthcare: formData.medicalRights?.hasUniversalHealthcare || false,
        medical_rights_universal_healthcare_hospital: formData.medicalRights?.universalHealthcareHospital || null,
        medical_rights_has_social_security: formData.medicalRights?.hasSocialSecurity || false,
        medical_rights_social_security_hospital: formData.medicalRights?.socialSecurityHospital || null,
        medical_rights_dont_want_to_change_hospital: formData.medicalRights?.dontWantToChangeHospital || false,
        medical_rights_want_to_change_hospital: formData.medicalRights?.wantToChangeHospital || false,
        medical_rights_new_hospital: formData.medicalRights?.newHospital || null,
        medical_rights_has_civil_servant_rights: formData.medicalRights?.hasCivilServantRights || false,
        medical_rights_other_rights: formData.medicalRights?.otherRights || null,
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        applicantSignature: formData.applicantSignature || null,
        applicationDate: formData.applicationDate ? new Date(formData.applicationDate) : null,
        currentWork: formData.currentWork || false,
        multipleEmployers: formData.multipleEmployers ? JSON.stringify(formData.multipleEmployers) : null,
        
        // ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö - ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• documents ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÉ‡∏ô API
        // documents: formData.documents || null,
      };

      // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô profile-image/upload API)
      console.log('üîç handleSubmit PATCH - Sending JSON data only');
      console.log('üîç handleSubmit PATCH - formData.profileImage:', formData.profileImage);
      console.log('üîç handleSubmit PATCH - resumePayload.education:', resumePayload.education);
      console.log('üîç handleSubmit PATCH - resumePayload.education.length:', resumePayload.education?.length || 0);
      console.log('üîç handleSubmit PATCH - resumePayload.workExperience:', resumePayload.workExperience);
      console.log('üîç handleSubmit PATCH - resumePayload.workExperience.length:', resumePayload.workExperience?.length || 0);
      console.log('üîç handleSubmit PATCH - resumePayload.previousGovernmentService:', resumePayload.previousGovernmentService);
      console.log('üîç handleSubmit PATCH - resumePayload.previousGovernmentService.length:', resumePayload.previousGovernmentService?.length || 0);
      console.log('üîç handleSubmit PATCH - Village Number Data:', {
        villageNumber: resumePayload.house_registration_village_number,
        alley: resumePayload.house_registration_alley,
        road: resumePayload.house_registration_road
      });
      console.log('üîç handleSubmit PATCH - Emergency Workplace Data:', {
        name: resumePayload.emergency_workplace_name,
        district: resumePayload.emergency_workplace_district,
        province: resumePayload.emergency_workplace_province,
        phone: resumePayload.emergency_workplace_phone
      });

      const res = await fetch(`/api/resume-deposit/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(resumePayload)
      });

      const json = await res.json().catch(() => ({}));
      if (!res.ok) {
        console.error('‚ùå ResumeDeposit update failed:', res.status, json);
        throw new Error(json?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ');
      }

      const updatedResumeId = json?.data?.id;
      console.log('‚úÖ ResumeDeposit updated:', updatedResumeId);

      // 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (formData.profileImage && formData.profileImage instanceof File) {
          try {
            const imgFd = new FormData();
            imgFd.append('profileImage', formData.profileImage);
          imgFd.append('resumeId', updatedResumeId);

            const imgRes = await fetch('/api/profile-image/upload', {
              method: 'POST',
              body: imgFd
            });

            if (!imgRes.ok) {
              console.error('‚ùå Profile image upload failed');
            } else {
              console.log('‚úÖ Profile image uploaded');
            }
          } catch (err) {
            console.error('‚ùå Error uploading profile image:', err);
          }
        }

      // 3. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (formData.documents) {
          const docTypes = [
            'idCard',
            'houseRegistration',
          'educationCertificate',
            'militaryCertificate',
            'medicalCertificate',
            'drivingLicense',
          'otherDocuments'
          ];

          for (const docType of docTypes) {
            const doc = formData.documents[docType as keyof typeof formData.documents];
            if (doc && doc instanceof File) {
              try {
                const docFd = new FormData();
                docFd.append('file', doc);
              docFd.append('resumeId', updatedResumeId);
                docFd.append('documentType', docType);

              const docRes = await fetch('/api/documents', {
                  method: 'POST',
                  body: docFd
                });

                if (!docRes.ok) {
                console.error(`‚ùå Document ${docType} upload failed`);
                } else {
                console.log(`‚úÖ Document ${docType} uploaded`);
                }
              } catch (err) {
                console.error(`‚ùå Error uploading document ${docType}:`, err);
              }
            }
          }
        }

      console.log('‚úÖ ResumeDeposit updated successfully');
      
    } catch (error) {
      console.error('‚ùå Error updating ResumeDeposit:', error);
      throw error; // Re-throw error to be handled by handleSubmit
    }
  };
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà ResumeDeposit
  const saveToResumeDeposit = async () => {
    try {
      console.log('üìù Saving to ResumeDeposit...');
      console.log('üîç formData.education:', formData.education);
      console.log('üîç formData.education.length:', formData.education?.length || 0);
      console.log('üîç formData.workExperience:', formData.workExperience);
      console.log('üîç formData.workExperience.length:', formData.workExperience?.length || 0);
      console.log('üîç formData.previousGovernmentService:', formData.previousGovernmentService);
      console.log('üîç formData.previousGovernmentService.length:', formData.previousGovernmentService?.length || 0);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á ResumeDeposit payload
      const resumePayload = {
        // üîí Security: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å userId ‡πÅ‡∏•‡∏∞ lineId ‡∏à‡∏≤‡∏Å session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏£‡∏ì‡∏µ)
        userId: (session?.user as any)?.id || null,
        lineId: (session?.user as any)?.lineId || (session?.user as any)?.sub || (session as any)?.profile?.userId || null,
        // ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
        prefix: formData.prefix || null,
        firstName: formData.firstName,
        lastName: formData.lastName,
          idNumber: formData.idNumber || null,
          idCardIssuedAt: formData.idCardIssuedAt || null,
        idCardIssueDate: formData.idCardIssueDate ? new Date(formData.idCardIssueDate) : null,
        idCardExpiryDate: formData.idCardExpiryDate ? new Date(formData.idCardExpiryDate) : null,
        birthDate: formData.birthDate ? new Date(formData.birthDate) : null,
        age: formData.age ? Number(formData.age) : null,
          race: formData.race || null,
          placeOfBirth: formData.placeOfBirth || null,
          placeOfBirthProvince: formData.placeOfBirthProvince || null,
          gender: formData.gender || 'UNKNOWN',
        nationality: formData.nationality || null,
        religion: formData.religion || null,
          maritalStatus: formData.maritalStatus || 'UNKNOWN',
          // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        address: formData.currentAddress || formData.addressAccordingToHouseRegistration || null,
        phone: formData.phone || null,
        email: formData.email || null,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        emergencyContact: formData.emergencyContact || `${formData.emergencyContactFirstName || ''} ${formData.emergencyContactLastName || ''}`.trim(),
        emergencyContactFirstName: formData.emergencyContactFirstName || null,
        emergencyContactLastName: formData.emergencyContactLastName || null,
          emergencyPhone: formData.emergencyPhone || null,
          emergencyRelationship: formData.emergencyRelationship || null,
        emergency_address_house_number: formData.emergencyAddress?.houseNumber || null,
        emergency_address_village_number: formData.emergencyAddress?.villageNumber || null,
        emergency_address_alley: formData.emergencyAddress?.alley || null,
        emergency_address_road: formData.emergencyAddress?.road || null,
        emergency_address_sub_district: formData.emergencyAddress?.subDistrict || null,
        emergency_address_district: formData.emergencyAddress?.district || null,
        emergency_address_province: formData.emergencyAddress?.province || null,
        emergency_address_postal_code: formData.emergencyAddress?.postalCode || null,
        emergency_address_phone: formData.emergencyAddress?.phone || null,
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
          skills: formData.skills || null,
          languages: formData.languages || null,
          computerSkills: formData.computerSkills || null,
          certificates: formData.certificates || null,
          references: formData.references || null,
          // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
          expectedPosition: formData.appliedPosition || departmentName || null,
          expectedSalary: formData.expectedSalary || null,
          availableDate: formData.availableDate ? new Date(formData.availableDate) : null,
          department: departmentName || formData.department || null,
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™
          spouse_first_name: formData.spouseInfo?.firstName || null,
          spouse_last_name: formData.spouseInfo?.lastName || null,
          // ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ - ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (API ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ nested create)
          education: (formData.education || []).map((e) => ({
            level: e.level,
            school: e.institution,
            major: e.major || null,
            endYear: e.year,
            gpa: e.gpa ? parseFloat(e.gpa) : null
          })),
          // ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (API ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ nested create)
          workExperience: (formData.workExperience || []).map((w) => ({
            position: w.position,
            company: w.company,
            startDate: w.startDate ? new Date(w.startDate) : null,
            endDate: w.endDate ? new Date(w.endDate) : null,
            salary: w.salary || null,
            description: w.reason || null,
            isCurrent: w.endDate === null || w.endDate === '' || w.endDate === '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
            district: w.district || null,
            province: w.province || null,
            phone: w.phone || null,
          })),
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ - ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (API ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ nested create)
          previousGovernmentService: (formData.previousGovernmentService || []).map((g) => {
            console.log('üîç Mapping previousGovernmentService:', g);
            return {
              position: g.position,
              department: g.department,
              reason: g.reason,
              date: g.date,
              type: g.type || 'civilServant',
            };
          }),
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
        staff_position: formData.staffInfo?.position || null,
        staff_department: formData.staffInfo?.department || null,
        staff_start_work: formData.staffInfo?.startWork || null,
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
        house_registration_house_number: formData.registeredAddress?.houseNumber || null,
        house_registration_village_number: formData.registeredAddress?.villageNumber || null,
        house_registration_alley: formData.registeredAddress?.alley || null,
        house_registration_road: formData.registeredAddress?.road || null,
        house_registration_sub_district: formData.registeredAddress?.subDistrict || null,
        house_registration_district: formData.registeredAddress?.district || null,
        house_registration_province: formData.registeredAddress?.province || null,
        house_registration_postal_code: formData.registeredAddress?.postalCode || null,
        house_registration_phone: formData.registeredAddress?.phone || null,
        house_registration_mobile: formData.registeredAddress?.mobile || null,
        
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
        current_address_house_number: formData.currentAddressDetail?.houseNumber || null,
        current_address_village_number: formData.currentAddressDetail?.villageNumber || null,
        current_address_alley: formData.currentAddressDetail?.alley || null,
        current_address_road: formData.currentAddressDetail?.road || null,
        current_address_sub_district: formData.currentAddressDetail?.subDistrict || null,
        current_address_district: formData.currentAddressDetail?.district || null,
        current_address_province: formData.currentAddressDetail?.province || null,
        current_address_postal_code: formData.currentAddressDetail?.postalCode || null,
        current_address_phone: formData.currentAddressDetail?.homePhone || null,
        current_address_mobile: formData.currentAddressDetail?.mobilePhone || null,
        
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô (‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
        addressAccordingToHouseRegistration: formData.addressAccordingToHouseRegistration || null,
        
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        emergency_address_house_number: formData.emergencyAddress?.houseNumber || null,
        emergency_address_village_number: formData.emergencyAddress?.villageNumber || null,
        emergency_address_alley: formData.emergencyAddress?.alley || null,
        emergency_address_road: formData.emergencyAddress?.road || null,
        emergency_address_sub_district: formData.emergencyAddress?.subDistrict || null,
        emergency_address_district: formData.emergencyAddress?.district || null,
        emergency_address_province: formData.emergencyAddress?.province || null,
        emergency_address_postal_code: formData.emergencyAddress?.postalCode || null,
        emergency_address_phone: formData.emergencyAddress?.phone || null,
        
        // ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        emergency_workplace_name: formData.emergencyWorkplace?.name || null,
        emergency_workplace_district: formData.emergencyWorkplace?.district || null,
        emergency_workplace_province: formData.emergencyWorkplace?.province || null,
        emergency_workplace_phone: formData.emergencyWorkplace?.phone || null,
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
        medical_rights_has_universal_healthcare: formData.medicalRights?.hasUniversalHealthcare || false,
        medical_rights_universal_healthcare_hospital: formData.medicalRights?.universalHealthcareHospital || null,
        medical_rights_has_social_security: formData.medicalRights?.hasSocialSecurity || false,
        medical_rights_social_security_hospital: formData.medicalRights?.socialSecurityHospital || null,
        medical_rights_dont_want_to_change_hospital: formData.medicalRights?.dontWantToChangeHospital || false,
        medical_rights_want_to_change_hospital: formData.medicalRights?.wantToChangeHospital || false,
        medical_rights_new_hospital: formData.medicalRights?.newHospital || null,
        medical_rights_has_civil_servant_rights: formData.medicalRights?.hasCivilServantRights || false,
        medical_rights_other_rights: formData.medicalRights?.otherRights || null,
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        applicantSignature: formData.applicantSignature || null,
        applicationDate: formData.applicationDate ? new Date(formData.applicationDate) : null,
        currentWork: formData.currentWork || false,
        multipleEmployers: formData.multipleEmployers ? JSON.stringify(formData.multipleEmployers) : null,
        
        // ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö - ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• documents ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÉ‡∏ô API
        // documents: formData.documents || null,
      };

      // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô profile-image/upload API)
      console.log('üîç handleSubmit POST - Sending JSON data only');
      console.log('üîç handleSubmit POST - Session data:', { 
        userId: (session?.user as any)?.id, 
        lineId: (session?.user as any)?.lineId,
        email: (session?.user as any)?.email 
      });
      console.log('üîç handleSubmit POST - ResumePayload userId/lineId:', { 
        userId: resumePayload.userId, 
        lineId: resumePayload.lineId 
      });
      console.log('üîç handleSubmit POST - formData.profileImage:', formData.profileImage);
      console.log('üîç handleSubmit POST - resumePayload.education:', resumePayload.education);
      console.log('üîç handleSubmit POST - resumePayload.education.length:', resumePayload.education?.length || 0);
      console.log('üîç handleSubmit POST - resumePayload.workExperience:', resumePayload.workExperience);
      console.log('üîç handleSubmit POST - resumePayload.workExperience.length:', resumePayload.workExperience?.length || 0);
      console.log('üîç handleSubmit POST - resumePayload.previousGovernmentService:', resumePayload.previousGovernmentService);
      console.log('üîç handleSubmit POST - resumePayload.previousGovernmentService.length:', resumePayload.previousGovernmentService?.length || 0);
      console.log('üîç handleSubmit POST - Village Number Data:', {
        villageNumber: resumePayload.house_registration_village_number,
        alley: resumePayload.house_registration_alley,
        road: resumePayload.house_registration_road
      });
      console.log('üîç handleSubmit POST - Emergency Workplace Data:', {
        name: resumePayload.emergency_workplace_name,
        district: resumePayload.emergency_workplace_district,
        province: resumePayload.emergency_workplace_province,
        phone: resumePayload.emergency_workplace_phone
      });

      const res = await fetch('/api/resume-deposit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(resumePayload)
      });

      const json = await res.json().catch(() => ({}));
      if (!res.ok) {
        console.error('‚ùå ResumeDeposit create failed:', res.status, json);
        throw new Error(json?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ');
      }

      const resumeId = json?.data?.id;
      console.log('‚úÖ ResumeDeposit created:', resumeId);

      // 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (formData.profileImage && formData.profileImage instanceof File) {
        try {
          const imgFd = new FormData();
          imgFd.append('profileImage', formData.profileImage);
          imgFd.append('resumeId', resumeId);

          const imgRes = await fetch('/api/profile-image/upload', {
        method: 'POST',
            body: imgFd
          });

          if (!imgRes.ok) {
            console.error('‚ùå Profile image upload failed');
          } else {
            console.log('‚úÖ Profile image uploaded');
          }
        } catch (err) {
          console.error('‚ùå Error uploading profile image:', err);
        }
      }
      // 3. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (formData.documents) {
        const docTypes = [
          'idCard',
          'houseRegistration',
          'educationCertificate',
          'militaryCertificate',
          'medicalCertificate',
          'drivingLicense',
          'otherDocuments'
        ];

        for (const docType of docTypes) {
          const doc = formData.documents[docType as keyof typeof formData.documents];
          if (doc && doc instanceof File) {
            try {
              const docFd = new FormData();
              docFd.append('file', doc);
              docFd.append('resumeId', resumeId);
              docFd.append('documentType', docType);

              const docRes = await fetch('/api/documents', {
                    method: 'POST',
                body: docFd
              });

              if (!docRes.ok) {
                console.error(`‚ùå Document ${docType} upload failed`);
            } else {
                console.log(`‚úÖ Document ${docType} uploaded`);
              }
            } catch (err) {
              console.error(`‚ùå Error uploading document ${docType}:`, err);
            }
          }
        }
      }

      console.log('‚úÖ ResumeDeposit saved successfully');
      
      // Return the saved resume data
      return json.data;
      
    } catch (error) {
      console.error('‚ùå Error saving to ResumeDeposit:', error);
      throw error; // Re-throw error to be handled by handleSubmit
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á application_form
  const createApplicationForm = async (resumeId: string, departmentName: string, departmentId: string) => {
    try {
      console.log('üìù Creating ApplicationForm...');
      console.log('üîç resumeId:', resumeId);
      console.log('üîç departmentName:', departmentName);
      console.log('üîç departmentId:', departmentId);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö application_form
      const applicationPayload = {
        resumeId: resumeId,
        userId: (session?.user as any)?.id || null,
        lineId: (session?.user as any)?.lineId || (session?.user as any)?.sub || (session as any)?.profile?.userId || null,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
        prefix: formData.prefix || null,
        firstName: formData.firstName,
        lastName: formData.lastName,
        idNumber: formData.idNumber || null,
        idCardIssuedAt: formData.idCardIssuedAt || null,
        idCardIssueDate: formData.idCardIssueDate ? new Date(formData.idCardIssueDate) : null,
        idCardExpiryDate: formData.idCardExpiryDate ? new Date(formData.idCardExpiryDate) : null,
        birthDate: formData.birthDate ? new Date(formData.birthDate) : null,
        age: formData.age ? Number(formData.age) : null,
        race: formData.race || null,
        placeOfBirth: formData.placeOfBirth || null,
        placeOfBirthProvince: formData.placeOfBirthProvince || null,
        gender: formData.gender || 'UNKNOWN',
        nationality: formData.nationality || null,
        religion: formData.religion || null,
        maritalStatus: formData.maritalStatus || 'UNKNOWN',
        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        addressAccordingToHouseRegistration: formData.addressAccordingToHouseRegistration || null,
        currentAddress: formData.currentAddress || null,
        phone: formData.phone || null,
        email: formData.email || null,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        emergencyContact: formData.emergencyContact || null,
        emergencyPhone: formData.emergencyPhone || null,
        emergencyRelationship: formData.emergencyRelationship || null,
        emergencyAddress: formData.emergencyAddress || null,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô
        appliedPosition: formData.appliedPosition || departmentName,
        expectedSalary: formData.expectedSalary || null,
        availableDate: formData.availableDate ? new Date(formData.availableDate) : null,
        currentWork: formData.currentWork || false,
        department: departmentName,
        departmentId: departmentId,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        skills: formData.skills || null,
        languages: formData.languages || null,
        computerSkills: formData.computerSkills || null,
        certificates: formData.certificates || null,
        references: formData.references || null,
        applicantSignature: formData.applicantSignature || null,
        applicationDate: formData.applicationDate ? new Date(formData.applicationDate) : new Date(),
        status: 'PENDING',
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        education: (formData.education || []).map((e) => ({
          level: e.level,
          institution: e.institution,
          major: e.major || null,
          year: e.year || e.graduationYear || null,
          gpa: e.gpa ? parseFloat(e.gpa) : null
        })),
        // ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        workExperience: (formData.workExperience || []).map((work) => ({
          position: work.position || null,
          company: work.company || null,
          startDate: work.startDate ? new Date(work.startDate) : null,
          endDate: work.endDate ? new Date(work.endDate) : null,
          salary: work.salary || null,
          reason: work.reason || null,
          district: work.district || null,
          province: work.province || null,
          phone: work.phone || null
        }))
      };

      console.log('üîç ApplicationForm payload:', applicationPayload);

      const res = await fetch('/api/prisma/applications', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(applicationPayload)
      });
      const json = await res.json().catch(() => ({}));
      if (!res.ok) {
        console.error('‚ùå ApplicationForm create failed:', res.status, json);
        throw new Error(json?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      }

      console.log('‚úÖ ApplicationForm created successfully:', json.data?.id);
      return json.data;
    } catch (error) {
      console.error('‚ùå Error creating ApplicationForm:', error);
      throw error; // Re-throw error to be handled by handleSubmit
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• random
  const generateRandomData = () => {
    const prefixes = ['‡∏ô‡∏≤‡∏¢', '‡∏ô‡∏≤‡∏á', '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß'];
    const firstNames = ['‡∏™‡∏°‡∏ä‡∏≤‡∏¢', '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á', '‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå', '‡∏™‡∏°‡∏õ‡∏≠‡∏á', '‡∏™‡∏°‡∏û‡∏£', '‡∏™‡∏°‡∏Ñ‡∏¥‡∏î', '‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥', '‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå', '‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢', '‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå', '‡∏™‡∏°‡∏õ‡∏≠‡∏á', '‡∏™‡∏°‡∏û‡∏£', '‡∏™‡∏°‡∏Ñ‡∏¥‡∏î', '‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥', '‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå', '‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢', '‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå', '‡∏™‡∏°‡∏õ‡∏≠‡∏á', '‡∏™‡∏°‡∏û‡∏£', '‡∏™‡∏°‡∏Ñ‡∏¥‡∏î'];
    const lastNames = ['‡πÉ‡∏à‡∏î‡∏µ', '‡∏£‡∏±‡∏Å‡∏î‡∏µ', '‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏µ', '‡∏î‡∏µ‡πÉ‡∏à', '‡∏ú‡∏•‡∏¥‡∏ï‡∏î‡∏µ', '‡∏Ñ‡∏¥‡∏î‡∏î‡∏µ', '‡∏ö‡∏¥‡∏ô‡∏î‡∏µ', '‡∏™‡πà‡∏á‡∏î‡∏µ', '‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏î‡∏µ', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏µ', '‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏î‡∏µ', '‡πÉ‡∏à‡∏î‡∏µ', '‡∏£‡∏±‡∏Å‡∏î‡∏µ', '‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏µ', '‡∏î‡∏µ‡πÉ‡∏à', '‡∏ú‡∏•‡∏¥‡∏ï‡∏î‡∏µ', '‡∏Ñ‡∏¥‡∏î‡∏î‡∏µ', '‡∏ö‡∏¥‡∏ô‡∏î‡∏µ', '‡∏™‡πà‡∏á‡∏î‡∏µ', '‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏î‡∏µ'];
    const positions = ['‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå', '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö', '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö', '‡∏ô‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î', '‡∏ô‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏∑‡πà‡∏≠', '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏ú‡∏•‡∏¥‡∏ï', '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û', '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏¥‡∏ï', '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢', '‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå', '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡∏ô‡∏±‡∏Å‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ', '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠', '‡∏ô‡∏±‡∏Å‡πÄ‡∏à‡∏£‡∏à‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á'];
    const departments = ['‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ú‡∏•‡∏¥‡∏ï', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£'];
    const districts = ['‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏ô‡∏≤', '‡πÄ‡∏Ç‡∏ï‡∏™‡∏≤‡∏ó‡∏£', '‡πÄ‡∏Ç‡∏ï‡∏ß‡∏±‡∏í‡∏ô‡∏≤', '‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢', '‡πÄ‡∏Ç‡∏ï‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£', '‡πÄ‡∏Ç‡∏ï‡∏î‡∏∏‡∏™‡∏¥‡∏ï', '‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏Å‡∏∞‡∏õ‡∏¥', '‡πÄ‡∏Ç‡∏ï‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á', '‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å', '‡πÄ‡∏Ç‡∏ï‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á'];
    const provinces = ['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ', '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ', '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ'];
    const universities = ['‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏•', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏™‡∏á‡∏Ç‡∏•‡∏≤‡∏ô‡∏Ñ‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏û‡∏£‡∏∞‡∏à‡∏≠‡∏°‡πÄ‡∏Å‡∏•‡πâ‡∏≤‡∏ò‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏û‡∏£‡∏∞‡∏à‡∏≠‡∏°‡πÄ‡∏Å‡∏•‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏£‡∏ô‡∏≤‡∏£‡∏µ'];
    const majors = ['‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®', '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î', '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£', '‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏ô‡∏¥‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå'];
    const companies = ['‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏≠ ‡∏ö‡∏µ ‡∏ã‡∏µ ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ú‡∏•‡∏¥‡∏ï ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏® ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏£‡∏∞‡∏ö‡∏ö ‡∏à‡∏≥‡∏Å‡∏±‡∏î'];
    
    const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    const randomPosition = positions[Math.floor(Math.random() * positions.length)];
    // const randomDepartment = departments[Math.floor(Math.random() * departments.length)]; // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Dashboard
    const randomDistrict = districts[Math.floor(Math.random() * districts.length)];
    const randomProvince = provinces[Math.floor(Math.random() * provinces.length)];
    const randomUniversity = universities[Math.floor(Math.random() * universities.length)];
    const randomMajor = majors[Math.floor(Math.random() * majors.length)];
    const randomCompany = companies[Math.floor(Math.random() * companies.length)];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô random
    const randomIdNumber = Math.floor(Math.random() * 9000000000000) + 1000000000000;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ random (10 ‡∏´‡∏•‡∏±‡∏Å)
    const randomPhone = '0' + (Math.floor(Math.random() * 900000000) + 100000000).toString().slice(0, 9);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô random
    const randomSalary = Math.floor(Math.random() * 50000) + 15000;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà random
    const randomYear = Math.floor(Math.random() * 10) + 2560;
    const randomMonth = Math.floor(Math.random() * 12) + 1;
    const randomDay = Math.floor(Math.random() * 28) + 1;

    return {
      profileImage: undefined,
      prefix: randomPrefix,
      firstName: randomFirstName,
      lastName: randomLastName,
      idNumber: randomIdNumber.toString(),
      idCardIssuedAt: randomDistrict,
      idCardIssueDate: `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear}`,
      idCardExpiryDate: `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear + 10}`,
      birthDate: `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear - 30}`,
      age: (randomYear - 2530).toString(),
      race: '‡πÑ‡∏ó‡∏¢',
      placeOfBirth: randomProvince,
      placeOfBirthProvince: randomProvince,
      gender: randomPrefix === '‡∏ô‡∏≤‡∏¢' ? '‡∏ä‡∏≤‡∏¢' : '‡∏´‡∏ç‡∏¥‡∏á',
      nationality: '‡πÑ‡∏ó‡∏¢',
      religion: '‡∏û‡∏∏‡∏ó‡∏ò',
      maritalStatus: Math.random() > 0.5 ? '‡∏™‡∏°‡∏£‡∏™' : '‡πÇ‡∏™‡∏î',
      addressAccordingToHouseRegistration: `123/4 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ï‡∏≥‡∏ö‡∏•${randomDistrict} ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠${randomDistrict} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î${randomProvince} ${Math.floor(Math.random() * 90000) + 10000}`,
      currentAddress: `123/4 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ï‡∏≥‡∏ö‡∏•${randomDistrict} ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠${randomDistrict} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î${randomProvince} ${Math.floor(Math.random() * 90000) + 10000}`,
      phone: randomPhone,
      email: `${randomFirstName.toLowerCase()}${randomLastName.toLowerCase()}@example.com`,
      emergencyContact: `${randomPrefix === '‡∏ô‡∏≤‡∏¢' ? '‡∏ô‡∏≤‡∏á' : '‡∏ô‡∏≤‡∏¢'}${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]} (${Math.random() > 0.5 ? '‡∏†‡∏£‡∏£‡∏¢‡∏≤' : '‡∏™‡∏≤‡∏°‡∏µ'})`,
      emergencyContactFirstName: firstNames[Math.floor(Math.random() * firstNames.length)],
      emergencyContactLastName: lastNames[Math.floor(Math.random() * lastNames.length)],
      emergencyPhone: '0' + (Math.floor(Math.random() * 900000000) + 100000000).toString().slice(0, 9),
      emergencyRelationship: Math.random() > 0.5 ? '‡∏†‡∏£‡∏£‡∏¢‡∏≤' : '‡∏™‡∏≤‡∏°‡∏µ',
      emergencyAddress: {
        houseNumber: (Math.floor(Math.random() * 900) + 100).toString(),
        villageNumber: (Math.floor(Math.random() * 20) + 1).toString(),
        alley: `‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ${Math.floor(Math.random() * 100) + 1}`,
        road: '‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó',
        subDistrict: `‡∏ï‡∏≥‡∏ö‡∏•${randomDistrict}`,
        district: randomDistrict,
        province: randomProvince,
        postalCode: (Math.floor(Math.random() * 90000) + 10000).toString(),
        phone: '0' + (Math.floor(Math.random() * 900000000) + 100000000).toString().slice(0, 9)
      },
      emergencyWorkplace: {
        name: `${randomCompany} (‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà) - ‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•`,
        district: randomDistrict,
        province: randomProvince,
        phone: '0' + (Math.floor(Math.random() * 900000000) + 100000000).toString().slice(0, 9),
      },
      education: [
        {
          level: '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ',
          institution: randomUniversity,
          major: randomMajor,
          year: (randomYear - 10).toString(),
          gpa: (Math.random() * 2 + 2).toFixed(2)
        },
        {
          level: '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢',
          institution: `‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô${randomDistrict}`,
          major: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå-‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
          year: (randomYear - 14).toString(),
          gpa: (Math.random() * 2 + 2).toFixed(2)
        }
      ],
      workExperience: [
        {
          position: randomPosition,
          company: randomCompany,
          startDate: `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear - 8}`,
          endDate: `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear - 2}`,
          salary: randomSalary.toString(),
          reason: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'
        },
        {
          position: positions[Math.floor(Math.random() * positions.length)],
          company: companies[Math.floor(Math.random() * companies.length)],
          startDate: `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear - 12}`,
          endDate: `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear - 8}`,
          salary: (randomSalary - 5000).toString(),
          reason: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏¥‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£'
        }
      ],
      skills: `‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢ JavaScript, React, Node.js, Python, Java, ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö, ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå, ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°, ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤, ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà`,
      languages: Math.random() > 0.5 ? '‡πÑ‡∏ó‡∏¢ (‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏°‡πà), ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á), ‡∏à‡∏µ‡∏ô (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)' : '‡πÑ‡∏ó‡∏¢ (‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏°‡πà), ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á), ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)',
      computerSkills: `Microsoft Office (Word, Excel, PowerPoint, Access), Adobe Photoshop, ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï, ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°, ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°`,
      certificates: `‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° ${randomMajor}, ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° Database Design, ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° Agile Development`,
      references: `‡∏ô‡∏≤‡∏¢${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]} - ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡πà‡∏≤‡∏¢ IT (${randomPhone}), ‡∏ô‡∏≤‡∏á${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]} - ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (${randomPhone})`,
      appliedPosition: randomPosition,
      expectedSalary: `${randomSalary}-${randomSalary + 10000}`,
      availableDate: `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear + 1}`,
      currentWork: false,
      department: '', // ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ù‡πà‡∏≤‡∏¢/‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô - ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Dashboard
      applicantSignature: `${randomFirstName} ${randomLastName}`,
      applicationDate: `${randomDay.toString().padStart(2, '0')}/${randomMonth.toString().padStart(2, '0')}/${randomYear}`,
      documents: {
        idCard: undefined,
        houseRegistration: undefined,
        militaryCertificate: undefined, // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö - ‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏ö‡πÑ‡∏î‡πâ
        educationCertificate: undefined,
        medicalCertificate: undefined, // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö - ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        drivingLicense: undefined, // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡πá‡∏î‡∏µ
        nameChangeCertificate: undefined,
        otherDocuments: [],
      },
      multipleEmployers: ['‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î'],
      spouseInfo: {
        firstName: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
        lastName: '‡πÉ‡∏à‡∏î‡∏µ',
      },
      registeredAddress: {
        houseNumber: '123',
        villageNumber: '4',
        alley: '‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó 42',
        road: '‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó',
        subDistrict: '‡∏ö‡∏≤‡∏á‡∏ô‡∏≤‡πÉ‡∏ï‡πâ',
        district: '‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏ô‡∏≤',
        province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
        postalCode: '10260',
        phone: '02-123-4567',
        mobile: '081-234-5678',
      },
      currentAddressDetail: {
        houseNumber: '123',
        villageNumber: '4',
        alley: '‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó 42',
        road: '‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó',
        subDistrict: '‡∏ö‡∏≤‡∏á‡∏ô‡∏≤‡πÉ‡∏ï‡πâ',
        district: '‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏ô‡∏≤',
        province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
        postalCode: '10260',
        homePhone: '021234567',
        mobilePhone: '0812345678',
      },
      staffInfo: {
        position: '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™',
        department: '‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® (IT Department)',
        startWork: '01/02/2567',
      },
      previousGovernmentService: []
    };

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Random)" ‡πÅ‡∏ó‡∏ô
  };
  return (
    <div className="min-h-screen bg-white">
      {/* Header like official-documents */}
      <div className="bg-white  ">
        <div className="max-w-7xl mx-auto px-2 sm:px-4 py-4 sm:py-6">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
            <div className="flex items-center gap-2 sm:gap-3">
              <div className="p-2 sm:p-3 bg-blue-600 rounded-xl">
                <DocumentTextIcon className="w-6 h-6 sm:w-8 sm:h-8 text-white" />
              </div>
              <div>
                <h1 className="text-xl sm:text-2xl md:text-3xl font-bold text-gray-800">‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô</h1>
                <p className="text-sm sm:text-base text-gray-600">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>
                {departmentName && (
                <div className="mt-2 p-4 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
                    <span className="text-sm font-medium text-green-800">
                        ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏ù‡πà‡∏≤‡∏¢: <span className="font-bold">{departmentName}</span>
                    </span>
          </div>
                    {/* {departmentId && (
                    <div className="text-xs text-green-700">
                        <span className="font-medium">‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ú‡∏ô‡∏Å:</span> {departmentId}
                    </div>
                  )} */}
                </div>
              )}
              </div>
            </div>
            <div className="flex items-center gap-2 sm:gap-4">
              <Button
                color="primary"
                variant="flat"
                startContent={<ChevronLeftIcon className="w-3 h-3 sm:w-4 sm:h-4" />}
                onClick={() => router.push('/dashboard')}
                className="bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:shadow-lg transition-all duration-200 text-xs sm:text-sm"
              >
                ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
              </Button>
            </div>
          </div>
        </div>
        </div>

      {/* Navigation like official-documents */}
      {/* <div className="bg-white shadow-sm border-b sticky top-0 z-20">
        <div className="max-w-7xl mx-auto px-2 sm:px-4 py-2 sm:py-4">
          <div className="flex items-center gap-1 sm:gap-2 overflow-x-auto">
            <Button color="primary" variant="ghost" onClick={() => router.back()} className="hover:bg-blue-50 text-xs sm:text-sm whitespace-nowrap">
              ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            </Button>
            <Button color="primary" variant="ghost" startContent={<ChevronLeftIcon className="w-3 h-3 sm:w-5 sm:h-5" />} onClick={() => scrollTo('profile')} className="hover:bg-blue-50 text-xs sm:text-sm whitespace-nowrap">‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</Button>
            <Button color="primary" variant="ghost" onClick={() => scrollTo('work')} className="hover:bg-blue-50 text-xs sm:text-sm whitespace-nowrap">‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå</Button>
            <Button color="primary" variant="ghost" onClick={() => scrollTo('education')} className="hover:bg-blue-50 text-xs sm:text-sm whitespace-nowrap">‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</Button>
            <Button color="primary" variant="ghost" onClick={() => scrollTo('extra')} className="hover:bg-blue-50 text-xs sm:text-sm whitespace-nowrap">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</Button>
            <Button color="primary" variant="ghost" endContent={<ChevronRightIcon className="w-3 h-3 sm:w-5 sm:h-5" />} onClick={() => scrollTo('documents')} className="hover:bg-blue-50 text-xs sm:text-sm whitespace-nowrap">‡πÅ‡∏ô‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</Button>
          </div>
        </div>
      </div> */}
      
      <div className="max-w-7xl mx-auto px-2 sm:px-4 py-4 sm:py-8">
        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö validation ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á */}
         {/*<div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold text-blue-800 mb-2">‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
              <p className="text-sm text-blue-600">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö</p>
            </div>
            <div className="flex gap-3">
              <Button
                color="warning"
                variant="bordered"
                onClick={() => {
                  const randomData = generateRandomData();
                  setFormData(randomData);
                  setErrors({});
                  console.log('üé≤ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö Random ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ');
                }}
                className="bg-orange-50 border-orange-300 text-orange-700 hover:bg-orange-100"
              >
                üé≤ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Random)
              </Button>
              <Button
                color="warning"
                variant="bordered"
                onClick={() => {
                  if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà?')) {
                    setFormData({
                      profileImage: undefined,
                      prefix: '',
                      firstName: '',
                      lastName: '',
                      idNumber: '',
                      idCardIssuedAt: '',
                      idCardIssueDate: '',
                      idCardExpiryDate: '',
                      birthDate: '',
                      age: '',
                      race: '',
                      placeOfBirth: '',
                      placeOfBirthProvince: '',
                      gender: '',
                      nationality: '',
                      religion: '',
                      maritalStatus: '',
                      addressAccordingToHouseRegistration: '',
                      currentAddress: '',
                      phone: '',
                      email: '',
                      emergencyContact: '',
                      emergencyContactFirstName: '',
                      emergencyContactLastName: '',
                      emergencyPhone: '',
                      emergencyRelationship: '',
                      emergencyAddress: {
                        houseNumber: '',
                        villageNumber: '',
                        alley: '',
                        road: '',
                        subDistrict: '',
                        district: '',
                        province: '',
                        postalCode: '',
                        phone: '',
                      },
                      emergencyWorkplace: {
                        name: '',
                        district: '',
                        province: '',
                        phone: '',
                      },
                      education: [],
                      workExperience: [],
                      previousGovernmentService: [],
                      skills: '',
                      languages: '',
                      computerSkills: '',
                      certificates: '',
                      references: '',
                      appliedPosition: '',
                      expectedSalary: '',
                      availableDate: '',
                      currentWork: false,
                      department: '',
                      applicantSignature: '',
                      applicationDate: '',
                      documents: {},
                      multipleEmployers: [],
                      spouseInfo: {
                        firstName: '',
                        lastName: '',
                      },
                      registeredAddress: {
                        houseNumber: '',
                        villageNumber: '',
                        alley: '',
                        road: '',
                        subDistrict: '',
                        district: '',
                        province: '',
                        postalCode: '',
                        phone: '',
                        mobile: '',
                      },
                      currentAddressDetail: {
                        houseNumber: '',
                        villageNumber: '',
                        alley: '',
                        road: '',
                        subDistrict: '',
                        district: '',
                        province: '',
                        postalCode: '',
                        homePhone: '',
                        mobilePhone: '',
                      },
                      medicalRights: {
                        hasUniversalHealthcare: false,
                        universalHealthcareHospital: '',
                        hasSocialSecurity: false,
                        socialSecurityHospital: '',
                        dontWantToChangeHospital: false,
                        wantToChangeHospital: false,
                        newHospital: '',
                        hasCivilServantRights: false,
                        otherRights: '',
                      },
                      staffInfo: {
                        position: '',
                        department: '',
                        startWork: '',
                      }
                    });
                    setErrors({});
                    console.log('üîÑ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
                  }
                }}
                className="bg-yellow-50 border-yellow-300 text-yellow-700 hover:bg-yellow-100"
              >
                üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </Button>
              <Button
                color="success"
                variant="bordered"
                onClick={fillRandomData}
                className="bg-green-50 border-green-300 text-green-700 hover:bg-green-100"
              >
                üé≤ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
              </Button>
              <Button
                color="primary"
                variant="bordered"
                onClick={() => {
                  const errors = validateForm();
                  
                  // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
                  console.log('üîç Document Status Debug:');
                  console.log('‚Ä¢ formData.documents:', formData.documents);
                  console.log('‚Ä¢ uploadedDocuments:', uploadedDocuments);
                  console.log('‚Ä¢ hasIdCard:', formData.documents?.idCard || uploadedDocuments.some(doc => doc.documentType === 'idCard'));
                  console.log('‚Ä¢ hasHouseRegistration:', formData.documents?.houseRegistration || uploadedDocuments.some(doc => doc.documentType === 'houseRegistration'));
                  console.log('‚Ä¢ hasEducationCertificate:', formData.documents?.educationCertificate || uploadedDocuments.some(doc => doc.documentType === 'educationCertificate'));
                  console.log('‚Ä¢ hasMilitaryCertificate:', formData.documents?.militaryCertificate || uploadedDocuments.some(doc => doc.documentType === 'militaryCertificate'));
                  
                  if (Object.keys(errors).length === 0) {
                    console.log('‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ');
                  } else {
                    console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n\n‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${Object.keys(errors).length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n\n${Object.keys(errors).map(key => `‚Ä¢ ${errors[key]}`).join('\n')}`);
                  }
                }}
              >
                ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Validation
              </Button>
            </div>
          </div>
        </div>*/}
        
        {/* Hidden file input for profile image upload */}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          className="hidden"
          onChange={async (e) => {
            const file = e.target.files?.[0]
            if (!file) return
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ resume ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!savedResume?.id) {
              // ‡∏™‡∏£‡πâ‡∏≤‡∏á resume ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
              console.log('üîç ‡πÑ‡∏°‡πà‡∏°‡∏µ resume ID - ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
              const tempId = `temp_${Date.now()}`;
              
              // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ savedResume ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
              setSavedResume({
                id: tempId,
                firstName: formData.firstName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                lastName: formData.lastName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                email: formData.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏@example.com',
                profileImageUrl: null
              });
              
              // ‡πÉ‡∏ä‡πâ tempId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
              const form = new FormData()
              form.append('file', file)
              form.append('applicationId', tempId)
              
              setIsUploading(true);
              setUploadProgress(0);
              
              // ‡πÉ‡∏ä‡πâ XMLHttpRequest ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° progress
              const xhr = new XMLHttpRequest();
              
              xhr.upload.addEventListener('progress', (e) => {
                if (e.lengthComputable) {
                  const percentComplete = Math.round((e.loaded / e.total) * 100);
                  setUploadProgress(percentComplete);
                }
              });
              
              xhr.addEventListener('load', () => {
                setIsUploading(false);
                setUploadProgress(0);
                
                if (xhr.status === 200) {
                  try {
                    const data = JSON.parse(xhr.responseText);
                    if (data.profileImage) {
                  console.log('‚úÖ Profile image upload success with temp ID:', data.profileImage);
                  setProfileImage(`/api/image?file=${data.profileImage}`)
                  setFormData((prev: any) => ({ ...prev, profileImage: file }))
                  
                  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï savedResume ‡∏î‡πâ‡∏ß‡∏¢
                  setSavedResume((prev: any) => prev ? {
                    ...prev,
                    profileImageUrl: data.profileImage
                  } : {
                    profileImageUrl: data.profileImage
                  });
                  
                  console.log('üîç Updated formData.profileImage:', file);
                  console.log('üîç Updated savedResume.profileImageUrl:', data.profileImage);
                  console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß)')
                } else {
                  console.error('‚ùå Profile image upload failed:', data);
                  console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                }
              } catch (err) {
                    console.error('‚ùå Error parsing response:', err);
                  }
                } else {
                  console.error('‚ùå Upload failed with status:', xhr.status);
                }
                
                if (fileInputRef.current) fileInputRef.current.value = '';
              });
              
              xhr.addEventListener('error', () => {
                setIsUploading(false);
                setUploadProgress(0);
                console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
                if (fileInputRef.current) fileInputRef.current.value = '';
              });
              
              xhr.open('POST', '/api/profile-image/upload');
              xhr.send(form);
                return;
            }
            
            const form = new FormData()
            form.append('file', file)
            form.append('applicationId', savedResume.id) // ‡πÉ‡∏ä‡πâ resume ID ‡∏à‡∏£‡∏¥‡∏á
            
            setIsUploading(true);
            setUploadProgress(0);
            
            // ‡πÉ‡∏ä‡πâ XMLHttpRequest ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° progress
            const xhr = new XMLHttpRequest();
            
            xhr.upload.addEventListener('progress', (e) => {
              if (e.lengthComputable) {
                const percentComplete = Math.round((e.loaded / e.total) * 100);
                setUploadProgress(percentComplete);
              }
            });
            
            xhr.addEventListener('load', () => {
              setIsUploading(false);
              setUploadProgress(0);
              
              if (xhr.status === 200) {
                try {
                  const data = JSON.parse(xhr.responseText);
                  if (data.profileImage) {
                console.log('‚úÖ Profile image upload success:', data.profileImage);
                setProfileImage(`/api/image?file=${data.profileImage}`)
                setFormData((prev: any) => ({ ...prev, profileImage: file }))
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï savedResume ‡∏î‡πâ‡∏ß‡∏¢
                setSavedResume((prev: any) => prev ? {
                  ...prev,
                  profileImageUrl: data.profileImage
                } : {
                  profileImageUrl: data.profileImage
                });
                
                console.log('üîç Updated formData.profileImage:', file);
                console.log('üîç Updated savedResume.profileImageUrl:', data.profileImage);
                console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
              } else {
                console.error('‚ùå Profile image upload failed:', data);
                console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
              }
            } catch (err) {
                  console.error('‚ùå Error parsing response:', err);
                }
              } else {
                console.error('‚ùå Upload failed with status:', xhr.status);
              }
              
              if (fileInputRef.current) fileInputRef.current.value = '';
            });
            
            xhr.addEventListener('error', () => {
              setIsUploading(false);
              setUploadProgress(0);
              console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
              if (fileInputRef.current) fileInputRef.current.value = '';
            });
            
            xhr.open('POST', '/api/profile-image/upload');
            xhr.send(form);
          }}
        />
        {/* Profile Image Section */}
        <Card className="mb-8  bg-white/80 backdrop-blur-sm">
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
                <h2 className="text-2xl font-bold text-gray-900">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</h2>
              </div>
              
            </div>
          </CardHeader>
          <CardBody>
            <div className="flex flex-col items-center">
              {(() => {
                console.log('üîç Current profileImage state:', profileImage);
                console.log('üîç isProfileLoaded state:', isProfileLoaded);
                console.log('üîç profileData state:', profileData);
                console.log('üîç savedResume state:', savedResume);
                console.log('üîç formData.profileImage state:', formData.profileImage);
                console.log('üîç savedResume.profileImageUrl:', savedResume?.profileImageUrl);
                console.log('üîç profileData.profileImageUrl:', profileData?.profileImageUrl);
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (!profileImage && savedResume?.profileImageUrl) {
                  console.log('üîç ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å savedResume.profileImageUrl:', savedResume.profileImageUrl);
                  const imagePath = `/api/image?file=${savedResume.profileImageUrl}`;
                  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ profileImage state:', imagePath);
                  setProfileImage(imagePath);
                } else if (!profileImage && profileData?.profileImageUrl) {
                  console.log('üîç ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å profileData.profileImageUrl:', profileData.profileImageUrl);
                  const imagePath = `/api/image?file=${profileData.profileImageUrl}`;
                  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ profileImage state:', imagePath);
                  setProfileImage(imagePath);
                }
                
                return null;
              })()}
              {profileImage ? (
                <>
                  <div className="relative">
                    <img
                      src={profileImage}
                      alt="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                      className="w-40 h-40 rounded-full object-cover border-4 border-white shadow-lg"
                      onLoad={() => {
                        console.log('‚úÖ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', profileImage);
                      }}
                      onError={(e) => {
                        console.log('‚ùå ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', profileImage);
                        console.log('‚ùå Error details:', e);
                        setProfileImage(null);
                      }}
                    />
                    <div className="absolute -top-2 -right-2 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                      R
                    </div>
                    {/* ‡∏õ‡∏∏‡πà‡∏° Preview ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
                    <button
                      onClick={() => {
                        if (profileImage) {
                          // ‡∏™‡∏£‡πâ‡∏≤‡∏á File object ‡∏à‡∏≤‡∏Å URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview
                          fetch(profileImage)
                            .then(response => response.blob())
                            .then(blob => {
                              const file = new File([blob], 'profile-image.jpg', { type: blob.type });
                              handlePreviewFile(file, '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
                            })
                            .catch(error => {
                              console.error('Error creating file for preview:', error);
                            });
                        }
                      }}
                      className="absolute -bottom-2 -right-2 w-10 h-10 bg-gray-400 hover:bg-gray-500 text-white rounded-full flex items-center justify-center shadow-lg transition-colors duration-200 opacity-70 hover:opacity-100"
                      title="‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                    </button>
                  </div>
                  <p className="text-sm text-blue-600 mt-3 font-medium">
                    {savedResume?.profileImageUrl ? '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß' : profileData?.profileImageUrl ? '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå' : '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà'}
                  </p>
                  <div className="mt-4 flex gap-3 justify-center">
                    <button
                      type="button"
                      onClick={() => fileInputRef.current?.click()}
                      disabled={isUploading}
                      className="px-4 py-2 text-sm rounded-lg bg-blue-600 text-white hover:bg-blue-700 shadow-md transition-colors duration-200 flex items-center gap-2 hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden"
                    >
                      {isUploading && (
                        <div 
                          className="absolute inset-0 bg-blue-400 transition-all duration-300"
                          style={{ width: `${uploadProgress}%` }}
                        />
                      )}
                      <svg className="w-4 h-4 relative z-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <span className="relative z-10">
                        {isUploading ? `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ${uploadProgress}%` : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà'}
                      </span>
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        console.log('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...');
                        setProfileImage(null);
                        setFormData(prev => ({ ...prev, profileImage: undefined }));
                        // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å savedResume ‡∏î‡πâ‡∏ß‡∏¢
                        if (savedResume) {
                          setSavedResume(prev => prev ? { ...prev, profileImageUrl: null } : null);
                        }
                        // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å profileData ‡∏î‡πâ‡∏ß‡∏¢
                        if (profileData) {
                          setProfileData(prev => prev ? { ...prev, profileImageUrl: null } : null);
                        }
                        console.log('‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                      }}
                      className="px-4 py-2 text-sm rounded-lg bg-red-600 text-white hover:bg-red-700 shadow-md transition-colors duration-200 flex items-center gap-2 hover:shadow-lg"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                      ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                    </button>
                  </div>
                </>
              ) : (
                <>
                  <div className="w-40 h-40 rounded-full bg-gradient-to-r from-gray-200 to-gray-300 flex items-center justify-center border-4 border-white shadow-lg">
                    <svg className="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                  <p className="text-sm text-gray-500 mt-3">
                    ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
                  </p>
                  
                  {savedResume?.profileImageUrl && (
                    <p className="text-xs text-gray-400 mt-1">
                      ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ: {savedResume.profileImageUrl}
                    </p>
                  )}
                  
                  <div className="mt-4 flex flex-col gap-2">
                    <button
                      type="button"
                      onClick={() => fileInputRef.current?.click()}
                      disabled={isUploading}
                      className="px-4 py-2 text-sm rounded-lg bg-blue-600 text-white hover:bg-blue-700 shadow-md transition-colors duration-200 flex items-center gap-2 mx-auto hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden"
                    >
                      {isUploading && (
                        <div 
                          className="absolute inset-0 bg-blue-400 transition-all duration-300"
                          style={{ width: `${uploadProgress}%` }}
                        />
                      )}
                      <svg className="w-4 h-4 relative z-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <span className="relative z-10">
                        {isUploading ? `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ${uploadProgress}%` : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'}
                      </span>
                    </button>
                    
                    
                    
              </div>
                 
                </>
              )}
            </div>
          </CardBody>
        </Card>
        {/* Tab Navigation */}
        <div className="mb-8">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <div className="flex overflow-x-auto">
              {/* {savedResume && (
                <div className="flex items-center gap-3 px-4 py-3 bg-green-50 border-b border-green-200 w-full">
                  <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" /></svg>
                  <div className="text-sm text-green-700">
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {savedResume.firstName} {savedResume.lastName} ‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {savedResume.status || 'PENDING'}
                  </div>
                </div>
              )} */}
              <button
                type="button"
                onClick={() => setActiveTab('personal')}
                className={`px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-colors duration-200 ${
                  activeTab === 'personal'
                    ? 'border-blue-500 text-blue-600 bg-blue-50'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
              </button>
              <button
                type="button"
                onClick={() => setActiveTab('education')}
                className={`px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-colors duration-200 ${
                  activeTab === 'education'
                    ? 'border-blue-500 text-blue-600 bg-blue-50'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
              </button>
              <button
                type="button"
                onClick={() => setActiveTab('work')}
                className={`px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-colors duration-200 ${
                  activeTab === 'work'
                    ? 'border-blue-500 text-blue-600 bg-blue-50'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
              </button>
              <button
                type="button"
                onClick={() => setActiveTab('skills')}
                className={`px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-colors duration-200 ${
                  activeTab === 'skills'
                    ? 'border-blue-500 text-blue-600 bg-blue-50'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ
              </button>
              <button
                type="button"
                onClick={() => setActiveTab('position')}
                className={`px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-colors duration-200 ${
                  activeTab === 'position'
                    ? 'border-blue-500 text-blue-600 bg-blue-50'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
              </button>
              {/* <button
                type="button"
                onClick={() => setActiveTab('special')}
                className={`px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-colors duration-200 ${
                  activeTab === 'special'
                    ? 'border-blue-500 text-blue-600 bg-blue-50'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
              </button> */}
              <button
                type="button"
                onClick={() => setActiveTab('documents')}
                className={`px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-colors duration-200 ${
                  activeTab === 'documents'
                    ? 'border-blue-500 text-blue-600 bg-blue-50'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
              </button>
            </div>
          </div>
        </div>

        {/* Saved snapshot summary */}
        {/* {savedResume && showPreview && (
          <Card className="mb-6 shadow-md border-0 bg-green-50">
            <CardBody className="p-4">
              <div className="flex items-start justify-between">
                <div>
                  <div className="text-sm text-green-700 font-semibold mb-1">
                    {savedResume?.id ? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'}
                  </div>
                  <div className="text-sm text-green-800">
                    <span className="font-medium">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</span> {savedResume.firstName} {savedResume.lastName}
                  </div>
                  <div className="text-sm text-green-800">
                    <span className="font-medium">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à:</span> {savedResume.expectedPosition || '-'}
                  </div>
                  {resumeId && (
                    <div className="text-xs text-blue-600 mt-1">
                      üìÑ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Resume ID: {resumeId}
                    </div>
                  )}
                  <div className="text-sm text-green-800">
                    <span className="font-medium">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span> {savedResume.status || 'PENDING'}
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="text-xs text-green-700">
                    ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: {(savedResume.education?.length ?? 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå: {(savedResume.workExperience?.length ?? 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                  </div>
                  <Button size="sm" variant="light" className="text-green-700" onClick={() => setShowPreview(false)}>‡∏ã‡πà‡∏≠‡∏ô</Button>
                </div>
            </div>
          </CardBody>
        </Card>
        )} */}
        <form onSubmit={handleSubmit} className="space-y-8">
          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */}
          {activeTab === 'personal' && (
          <Card className="shadow-xl border-0">
            <div ref={sectionRefs.profile} />
            <CardHeader className="bg-gradient-to-r from-blue-500 via-indigo-500 to-blue-600 text-white relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 to-indigo-400/20"></div>
              <div className="relative flex items-center gap-3">
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <UserIcon className="w-6 h-6" />
                </div>
                <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
              </div>
            </CardHeader>
            <CardBody className="p-8">
              {/* ‡πë. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */}
              <div className="mb-8">
                <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
                  ‡πë. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                </h3>
                
                {/* ‡πë.‡πë ‡∏ä‡∏∑‡πà‡∏≠ (‡∏ô‡∏≤‡∏¢/‡∏ô‡∏≤‡∏á/‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß) */}
                <div className="mb-6">
                  <h4 className="text-md font-semibold text-gray-700 mb-4 text-left">
                    ‡πë.‡πë ‡∏ä‡∏∑‡πà‡∏≠ (‡∏ô‡∏≤‡∏¢/‡∏ô‡∏≤‡∏á/‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß)
                  </h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤<span className="text-red-500">*</span></label>
                  <select
                    name="prefix"
                         data-error-key="prefix"
                    value={formData.prefix}
                         onChange={(e) => handleInputChange('prefix', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('prefix') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</option>
                    <option value="‡∏ô‡∏≤‡∏¢">‡∏ô‡∏≤‡∏¢</option>
                    <option value="‡∏ô‡∏≤‡∏á">‡∏ô‡∏≤‡∏á</option>
                    <option value="‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß">‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß</option>
                    <option value="‡∏î‡∏£.">‡∏î‡∏£.</option>
                    <option value="‡∏ú‡∏®.">‡∏ú‡∏®.</option>
                    <option value="‡∏£‡∏®.">‡∏£‡∏®.</option>
                    <option value="‡∏®.">‡∏®.</option>
                  </select>
                       {hasError('prefix') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('prefix')}</p>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠<span className="text-red-500">*</span></label>
                  <input
                    type="text"
                    name="firstName"
                         data-error-key="firstName"
                    value={formData.firstName}
                         onChange={(e) => handleTextOnlyChange('firstName', e.target.value)}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('firstName') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                       {hasError('firstName') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('firstName')}</p>
                  )}
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•<span className="text-red-500">*</span></label>
                  <input
                    type="text"
                    name="lastName"
                         data-error-key="lastName"
                    value={formData.lastName}
                         onChange={(e) => handleTextOnlyChange('lastName', e.target.value)}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('lastName') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                       {hasError('lastName') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('lastName')}</p>
                  )}
                </div>
                
                <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î<span className="text-red-500">*</span></label>
                  <ThaiDatePicker
                    value={formData.birthDate}
                    onChange={(date) => {
                      handleInputChange('birthDate', date);
                      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
                      if (date) {
                        const birthDate = new Date(date);
                        const today = new Date();
                        let age = today.getFullYear() - birthDate.getFullYear();
                        const monthDiff = today.getMonth() - birthDate.getMonth();
                        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                          age--;
                        }
                        handleInputChange('age', age.toString());
                      }
                         }}
                         placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                            hasError('birthDate') 
                        ? 'border-red-500 focus:ring-red-500' 
                              : 'border-gray-500 focus:ring-blue-500'
                    }`}
                  />
                       {hasError('birthDate') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('birthDate')}</p>
                       )}
                </div>
                <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≤‡∏¢‡∏∏<span className="text-red-500">*</span></label>
                  <input
                         type="text"
                         name="age"
                         data-error-key="age"
                         value={formData.age}
                          onChange={(e) => handleNumberOnlyChange('age', e.target.value)}
                         placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('age') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                       {hasError('age') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('age')}</p>
                  )}
                       
                </div>

                <div className="space-y-2">
                                               <label className="text-sm font-medium text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î ‡∏≠‡∏≥‡∏†‡πÄ‡∏≠/‡πÄ‡∏Ç‡∏ï<span className="text-red-500">*</span></label>
                  <input
                         type="text"
                         name="placeOfBirth"
                         data-error-key="placeOfBirth"
                         value={formData.placeOfBirth || ''}
                         onChange={(e) => handleTextOnlyChange('placeOfBirth', e.target.value)}
                         placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('placeOfBirth') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                       {hasError('placeOfBirth') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('placeOfBirth')}</p>
                  )}
                </div>
                <div className="space-y-2">
                       <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î<span className="text-red-500">*</span></label>
                  <input
                         type="text"
                         name="placeOfBirthProvince"
                         data-error-key="placeOfBirthProvince"
                         value={formData.placeOfBirthProvince || ''}
                         onChange={(e) => handleTextOnlyChange('placeOfBirthProvince', e.target.value)}
                         placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('placeOfBirthProvince') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                       {hasError('placeOfBirthProvince') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('placeOfBirthProvince')}</p>
                  )}
                </div>
                <div className="space-y-2">
                                               <label className="text-sm font-medium text-gray-700">‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥<span className="text-red-500">*</span></label>
                  <input
                    type="text"
                         name="race"
                         data-error-key="race"
                         value={formData.race || ''}
                         onChange={(e) => handleTextOnlyChange('race', e.target.value)}
                         placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('race') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                       />
                       {hasError('race') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('race')}</p>
                  )}
                </div>
                <div className="space-y-2">
                                               <label className="text-sm font-medium text-gray-700">‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥<span className="text-red-500">*</span></label>
                  <input
                    type="text"
                    name="nationality"
                         data-error-key="nationality"
                    value={formData.nationality}
                         onChange={(e) => handleTextOnlyChange('nationality', e.target.value)}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('nationality') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                       {hasError('nationality') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('nationality')}</p>
                  )}
                </div>
                <div className="space-y-2">
                                               <label className="text-sm font-medium text-gray-700">‡∏®‡∏≤‡∏™‡∏ô‡∏≤<span className="text-red-500">*</span></label>
                  <input
                    type="text"
                    name="religion"
                         data-error-key="religion"
                    value={formData.religion}
                         onChange={(e) => handleTextOnlyChange('religion', e.target.value)}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏®‡∏≤‡∏™‡∏ô‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('religion') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                       />
                       {hasError('religion') && (
                         <p className="text-red-500 text-xs mt-1">{getErrorMessage('religion')}</p>
                       )}
                     </div>
                {/* ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå<span className="text-red-500">*</span></label>
                  <input
                    type="tel"
                    name="phone"
                    data-error-key="phone"
                    value={formData.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå ‡πÄ‡∏ä‡πà‡∏ô 0812345678"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                      hasError('phone') ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                  {hasError('phone') && (
                    <p className="text-red-500 text-xs mt-1">{getErrorMessage('phone')}</p>
                  )}
                </div>
                {/* ‡∏≠‡∏µ‡πÄ‡∏°‡∏• */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">‡∏≠‡∏µ‡πÄ‡∏°‡∏•<span className="text-red-500">*</span></label>
                  <input
                    type="email"
                    name="email"
                    data-error-key="email"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡πÄ‡∏ä‡πà‡∏ô example@email.com"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                      hasError('email') ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                  {hasError('email') && (
                    <p className="text-red-500 text-xs mt-1">{getErrorMessage('email')}</p>
                  )}
                </div>
                    <div>
                                             <span className="text-sm text-gray-600">‡πÄ‡∏û‡∏®<span className="text-red-500">*</span></span>
                      <div className="flex gap-4 mt-2">
                        <label className="flex items-center gap-2">
                          <input 
                            type="radio" 
                            name="gender" 
                            value="‡∏ä‡∏≤‡∏¢"
                            checked={formData.gender === '‡∏ä‡∏≤‡∏¢'}
                            onChange={(e) => handleInputChange('gender', e.target.value)}
                            className="w-4 h-4" 
                          />
                          <span>‡∏ä‡∏≤‡∏¢</span>
                        </label>
                        <label className="flex items-center gap-2">
                          <input 
                            type="radio" 
                            name="gender" 
                            value="‡∏´‡∏ç‡∏¥‡∏á"
                            checked={formData.gender === '‡∏´‡∏ç‡∏¥‡∏á'}
                            onChange={(e) => handleInputChange('gender', e.target.value)}
                            className="w-4 h-4" 
                          />
                          <span>‡∏´‡∏ç‡∏¥‡∏á</span>
                        </label>
                      </div>
                  {errors.gender && (
                    <p className="text-red-500 text-xs mt-1">{errors.gender}</p>
                  )}
                    </div>
                  </div>
                </div>

                {/* ‡πë.‡πí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß */}
                <div className="mb-6">
                  <h4 className="text-md font-semibold text-gray-800 mb-3 text-left">‡πë.‡πí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß<span className="text-red-500">*</span></h4>
                  <div className="space-y-3">
                    <div className="flex gap-6">
                      <label className="flex items-center gap-2">
                        <input 
                          type="radio" 
                          name="maritalStatus" 
                          value="‡πÇ‡∏™‡∏î"
                          checked={formData.maritalStatus === '‡πÇ‡∏™‡∏î'}
                          onChange={(e) => handleInputChange('maritalStatus', e.target.value)}
                          className="w-4 h-4" 
                        />
                        <span>‡πÇ‡∏™‡∏î</span>
                      </label>
                      <label className="flex items-center gap-2">
                        <input 
                          type="radio" 
                          name="maritalStatus" 
                          value="‡∏™‡∏°‡∏£‡∏™"
                          checked={formData.maritalStatus === '‡∏™‡∏°‡∏£‡∏™'}
                          onChange={(e) => handleInputChange('maritalStatus', e.target.value)}
                          className="w-4 h-4" 
                        />
                        <span>‡∏™‡∏°‡∏£‡∏™</span>
                      </label>
                      <label className="flex items-center gap-2">
                        <input 
                          type="radio" 
                          name="maritalStatus" 
                          value="‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á"
                          checked={formData.maritalStatus === '‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á'}
                          onChange={(e) => handleInputChange('maritalStatus', e.target.value)}
                          className="w-4 h-4" 
                        />
                        <span>‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á</span>
                      </label>
                      <label className="flex items-center gap-2">
                        <input 
                          type="radio" 
                          name="maritalStatus" 
                          value="‡∏´‡∏°‡πâ‡∏≤‡∏¢"
                          checked={formData.maritalStatus === '‡∏´‡∏°‡πâ‡∏≤‡∏¢'}
                          onChange={(e) => handleInputChange('maritalStatus', e.target.value)}
                          className="w-4 h-4" 
                        />
                        <span>‡∏´‡∏°‡πâ‡∏≤‡∏¢</span>
                      </label>
                    </div>
                    {errors.maritalStatus && (
                      <p className="text-red-500 text-xs mt-1">{errors.maritalStatus}</p>
                    )}
                    
                    {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™ */}
                    {formData.maritalStatus === '‡∏™‡∏°‡∏£‡∏™' && (
                      <div className="mt-4 p-4 border border-gray-200 rounded-lg bg-white">
                        <h5 className="font-medium text-gray-800 mb-3">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™</h5>
                        <div className="space-y-4">
                <div className="space-y-2">
                            <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                    value={`${formData.spouseInfo?.firstName || ''} ${formData.spouseInfo?.lastName || ''}`.trim()}
                    onChange={(e) => {
                      const fullName = e.target.value;
                      // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å
                      const filteredName = fullName.replace(/\d/g, '');
                      const nameParts = filteredName.split(' ');
                      const firstName = nameParts[0] || '';
                      const lastName = nameParts.slice(1).join(' ') || '';
                      setFormData(prev => ({
                        ...prev,
                        spouseInfo: {
                          firstName: firstName,
                          lastName: lastName
                        }
                      }));
                    }}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                      hasError('spouseInfoFirstName') || hasError('spouseInfoLastName')
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                            {(hasError('spouseInfoFirstName') || hasError('spouseInfoLastName')) && (
                              <p className="text-red-500 text-xs mt-1">
                                {getErrorMessage('spouseInfoFirstName') || getErrorMessage('spouseInfoLastName')}
                              </p>
                  )}
                          </div>
                        </div>
                      </div>
                  )}
                  </div>
                </div>

                {/* ‡πë.‡πì ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô */}
                <div className="mb-6">
                  <h4 className="text-md font-semibold text-gray-700 mb-3 text-left">‡πë.‡πì ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô<span className="text-red-500">*</span></h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                                               <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô<span className="text-red-500">*</span></label>
                       <input
                         type="text"
                         name="idNumber"
                         data-error-key="idNumber"
                         value={formData.idNumber}
                          onChange={(e) => handleIdNumberChange(e.target.value)}
                         placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (13 ‡∏´‡∏•‡∏±‡∏Å)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('idNumber') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                    />
                      <div className="flex justify-between items-center">
                       {hasError('idNumber') && (
                          <p className="text-red-500 text-xs">{getErrorMessage('idNumber')}</p>
                  )}
                        <p className="text-xs text-gray-500 ml-auto">
                          {formData.idNumber.length}/13 ‡∏´‡∏•‡∏±‡∏Å
                        </p>
                      </div>
                </div>
                  <div className="space-y-2">
                                             <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ ‡∏ì ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                        name="idCardIssuedAt"
                        data-error-key="idCardIssuedAt"
                        value={formData.idCardIssuedAt}
                        onChange={(e) => handleTextOnlyChange('idCardIssuedAt', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('idCardIssuedAt') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                      {hasError('idCardIssuedAt') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('idCardIssuedAt')}</p>
                  )}
                  </div>
                <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£<span className="text-red-500">*</span></label>
                      <ThaiDatePicker
                        value={formData.idCardIssueDate}
                        onChange={(date) => handleInputChange('idCardIssueDate', date)}
                        placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£"
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('idCardIssueDate') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                       />
                      {hasError('idCardIssueDate') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('idCardIssueDate')}</p>
                )}
              </div>
                <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ï‡∏£<span className="text-red-500">*</span></label>
                    <ThaiDatePicker
                        value={formData.idCardExpiryDate}
                        onChange={(date) => handleInputChange('idCardExpiryDate', date)}
                        placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ï‡∏£"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                           hasError('idCardExpiryDate') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                      {hasError('idCardExpiryDate') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('idCardExpiryDate')}</p>
                  )}
                </div>
                  </div>
                </div>
                {/* ‡πë.‡πî ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà */}
                <div className="mb-6">
                  <h4 className="text-md font-semibold text-gray-700 mb-3 text-left">‡πë.‡πî ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà<span className="text-red-500">*</span></h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                        value={formData.registeredAddress?.houseNumber || ''}
                         onChange={(e) => handleNumberOnlyChange('registeredAddress.houseNumber', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressHouseNumber') 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                      {hasError('registeredAddressHouseNumber') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('registeredAddressHouseNumber')}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                        value={formData.registeredAddress?.villageNumber || ''}
                         onChange={(e) => handleVillageNumberChange('registeredAddress.villageNumber', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠ -)"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressVillageNumber') 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                      {hasError('registeredAddressVillageNumber') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('registeredAddressVillageNumber')}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                        value={formData.registeredAddress?.alley || ''}
                        onChange={(e) => handleVillageNumberChange('registeredAddress.alley', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ -"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressAlley') 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                      {hasError('registeredAddressAlley') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('registeredAddressAlley')}</p>
                )}
              </div>
                <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ñ‡∏ô‡∏ô<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                        value={formData.registeredAddress?.road || ''}
                        onChange={(e) => handleVillageNumberChange('registeredAddress.road', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ -"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressRoad') 
                        ? 'border-red-500 focus:ring-red-500' 
                        : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  />
                      {hasError('registeredAddressRoad') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('registeredAddressRoad')}</p>
                  )}
                </div>
                  <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                        value={formData.registeredAddress?.subDistrict || ''}
                        onChange={(e) => handleTextOnlyChange('registeredAddress.subDistrict', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressSubDistrict') 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                      {hasError('registeredAddressSubDistrict') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('registeredAddressSubDistrict')}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                        value={formData.registeredAddress?.district || ''}
                        onChange={(e) => handleTextOnlyChange('registeredAddress.district', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressDistrict') 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                      {hasError('registeredAddressDistrict') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('registeredAddressDistrict')}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                        value={formData.registeredAddress?.province || ''}
                        onChange={(e) => handleTextOnlyChange('registeredAddress.province', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressProvince') 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                      {hasError('registeredAddressProvince') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('registeredAddressProvince')}</p>
                    )}
                </div>
                  <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                        value={formData.registeredAddress?.postalCode || ''}
                         onChange={(e) => handlePostalCodeChange('registeredAddress.postalCode', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå (5 ‡∏´‡∏•‡∏±‡∏Å)"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressPostalCode') 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                      <div className="flex justify-between items-center">
                      {hasError('registeredAddressPostalCode') && (
                          <p className="text-red-500 text-xs">{getErrorMessage('registeredAddressPostalCode')}</p>
                    )}
                        <p className="text-xs text-gray-500 ml-auto">
                          {formData.registeredAddress?.postalCode?.length || 0}/5 ‡∏´‡∏•‡∏±‡∏Å
                        </p>
                      </div>
                  </div>
                  <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô</label>
                    <input
                      type="text"
                        value={formData.registeredAddress?.phone || ''}
                         onChange={(e) => handleInputChange('registeredAddress.phone', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressPhone') 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                      {hasError('registeredAddressPhone') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('registeredAddressPhone')}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠<span className="text-red-500">*</span></label>
                    <input
                        type="text"
                        value={formData.registeredAddress?.mobile || ''}
                         onChange={(e) => handleInputChange('registeredAddress.mobile', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('registeredAddressMobile') 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                      {hasError('registeredAddressMobile') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('registeredAddressMobile')}</p>
                    )}
                </div>
              </div>
                  </div>
                 {/* ‡πë.‡πï ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà */}
                 <div className="mb-6">
                   <div className="flex items-center justify-between mb-3">
                     <h4 className="text-md font-semibold text-gray-700 text-left">‡πë.‡πï ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà</h4>
                     <label className="flex items-center space-x-2 text-sm text-gray-600 cursor-pointer">
                       <input
                         type="checkbox"
                        checked={copyFromRegisteredAddress}
                        onChange={(e) => handleCopyFromRegisteredAddress(e.target.checked)}
                        className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                      />
                      <span>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô</span>
                     </label>
                   </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        value={formData.currentAddressDetail?.houseNumber || ''}
                         onChange={(e) => handleNumberOnlyChange('currentAddressDetail.houseNumber', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('currentAddressHouseNumber') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                      {hasError('currentAddressHouseNumber') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('currentAddressHouseNumber')}</p>
                      )}
                </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        value={formData.currentAddressDetail?.villageNumber || ''}
                         onChange={(e) => handleVillageNumberChange('currentAddressDetail.villageNumber', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠ -)"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('currentAddressVillageNumber') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                      {hasError('currentAddressVillageNumber') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('currentAddressVillageNumber')}</p>
                    )}
                  </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        value={formData.currentAddressDetail?.alley || ''}
                        onChange={(e) => handleVillageNumberChange('currentAddressDetail.alley', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ -"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('currentAddressAlley') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                      {hasError('currentAddressAlley') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('currentAddressAlley')}</p>
                    )}
                  </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ñ‡∏ô‡∏ô<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        value={formData.currentAddressDetail?.road || ''}
                        onChange={(e) => handleVillageNumberChange('currentAddressDetail.road', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ -"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('currentAddressRoad') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                      {hasError('currentAddressRoad') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('currentAddressRoad')}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        value={formData.currentAddressDetail?.subDistrict || ''}
                        onChange={(e) => handleTextOnlyChange('currentAddressDetail.subDistrict', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('currentAddressSubDistrict') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                      {hasError('currentAddressSubDistrict') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('currentAddressSubDistrict')}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        value={formData.currentAddressDetail?.district || ''}
                        onChange={(e) => handleTextOnlyChange('currentAddressDetail.district', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('currentAddressDistrict') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                      {hasError('currentAddressDistrict') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('currentAddressDistrict')}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        value={formData.currentAddressDetail?.province || ''}
                        onChange={(e) => handleTextOnlyChange('currentAddressDetail.province', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('currentAddressProvince') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                      {hasError('currentAddressProvince') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('currentAddressProvince')}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        value={formData.currentAddressDetail?.postalCode || ''}
                        onChange={(e) => handlePostalCodeChange('currentAddressDetail.postalCode', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå (5 ‡∏´‡∏•‡∏±‡∏Å)"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('currentAddressPostalCode') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                      <div className="flex justify-between items-center">
                      {hasError('currentAddressPostalCode') && (
                          <p className="text-red-500 text-xs">{getErrorMessage('currentAddressPostalCode')}</p>
                      )}
                        <p className="text-xs text-gray-500 ml-auto">
                          {formData.currentAddressDetail?.postalCode?.length || 0}/5 ‡∏´‡∏•‡∏±‡∏Å
                        </p>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô</label>
                      <input
                        type="tel"
                        value={formData.currentAddressDetail?.homePhone || ''}
                        onChange={(e) => handleNumberOnlyChange('currentAddressDetail.homePhone', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡πâ‡∏≤‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠<span className="text-red-500">*</span></label>
                      <input
                        type="tel"
                        value={formData.currentAddressDetail?.mobilePhone || ''}
                         onChange={(e) => handleNumberOnlyChange('currentAddressDetail.mobilePhone', e.target.value)}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"
                        disabled={copyFromRegisteredAddress}
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                          hasError('currentAddressMobilePhone') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : copyFromRegisteredAddress
                            ? 'border-gray-200 bg-gray-100 text-gray-500'
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                      {hasError('currentAddressMobilePhone') && (
                        <p className="text-red-500 text-xs mt-1">{getErrorMessage('currentAddressMobilePhone')}</p>
                      )}
                    </div>
                  
                  </div>
                </div>

                {/* ‡πë.‡πñ ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ */}
                <div className="mb-6">
                  <h4 className="text-md font-semibold text-gray-700 mb-3 text-left">‡πë.‡πñ ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</h4>
                  <div className="space-y-4">
                    {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠ ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô<span className="text-red-500">*</span></label>
                        <input
                          type="text"
                          value={formData.emergencyContactFirstName || ''}
                          onChange={(e) => handleTextOnlyChange('emergencyContactFirstName', e.target.value)}
                          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                          className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyContactFirstName') ? 'border-red-500' : 'border-gray-300'}`}
                        />
                        {hasError('emergencyContactFirstName') && (
                          <div className="text-xs text-red-600">
                            {getErrorMessage('emergencyContactFirstName')}
                  </div>
                        )}
                </div>

                      <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-700">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô<span className="text-red-500">*</span></label>
                        <input
                          type="text"
                          value={formData.emergencyContactLastName || ''}
                          onChange={(e) => handleTextOnlyChange('emergencyContactLastName', e.target.value)}
                          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                          className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyContactLastName') ? 'border-red-500' : 'border-gray-300'}`}
                        />
                        {hasError('emergencyContactLastName') && (
                          <div className="text-xs text-red-600">
                            {getErrorMessage('emergencyContactLastName')}
              </div>
                        )}
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå<span className="text-red-500">*</span></label>
                        <input
                          type="text"
                          value={formData.emergencyRelationship || ''}
                          onChange={(e) => handleTextOnlyChange('emergencyRelationship', e.target.value)}
                          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                          className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyRelationship') ? 'border-red-500' : 'border-gray-300'}`}
                        />
                        {hasError('emergencyRelationship') && (
                          <div className="text-xs text-red-600">
                            {getErrorMessage('emergencyRelationship')}
                          </div>
                        )}
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-700">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô<span className="text-red-500">*</span></label>
                        <input
                          type="text"
                          value={formData.emergencyPhone}
                          onChange={(e) => handleNumberOnlyChange('emergencyPhone', e.target.value)}
                          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"
                          className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyPhone') ? 'border-red-500' : 'border-gray-300'}`}
                        />
                        {hasError('emergencyPhone') && (
                          <div className="text-xs text-red-600">
                            {getErrorMessage('emergencyPhone')}
                          </div>
                        )}
                      </div>
                  </div>
                  
                    {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô */}
                    <div className="border-t pt-4">
                      <h5 className="text-sm font-medium text-gray-700 mb-3">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô</h5>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                            value={formData.emergencyAddress?.houseNumber || ''}
                            onChange={(e) => handleInputChange('emergencyAddress.houseNumber', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyAddressHouseNumber') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyAddressHouseNumber') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyAddressHouseNumber')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyAddress?.villageNumber || ''}
                            onChange={(e) => handleVillageNumberChange('emergencyAddress.villageNumber', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠ -)"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyAddressVillageNumber') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyAddressVillageNumber') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyAddressVillageNumber')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyAddress?.alley || ''}
                            onChange={(e) => handleVillageNumberChange('emergencyAddress.alley', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏£‡∏≠‡∏Å/‡∏ã‡∏≠‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ -"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyAddressAlley') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyAddressAlley') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyAddressAlley')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ñ‡∏ô‡∏ô<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyAddress?.road || ''}
                            onChange={(e) => handleVillageNumberChange('emergencyAddress.road', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏ô‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ -"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyAddressRoad') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyAddressRoad') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyAddressRoad')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyAddress?.subDistrict || ''}
                            onChange={(e) => handleTextOnlyChange('emergencyAddress.subDistrict', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyAddressSubDistrict') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyAddressSubDistrict') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyAddressSubDistrict')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyAddress?.district || ''}
                            onChange={(e) => handleTextOnlyChange('emergencyAddress.district', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyAddressDistrict') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyAddressDistrict') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyAddressDistrict')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyAddress?.province || ''}
                            onChange={(e) => handleTextOnlyChange('emergencyAddress.province', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyAddressProvince') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyAddressProvince') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyAddressProvince')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyAddress?.postalCode || ''}
                            onChange={(e) => handlePostalCodeChange('emergencyAddress.postalCode', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå (5 ‡∏´‡∏•‡∏±‡∏Å)"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyAddressPostalCode') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          <div className="flex justify-between items-center">
                          {hasError('emergencyAddressPostalCode') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyAddressPostalCode')}
                            </div>
                          )}
                            <p className="text-xs text-gray-500 ml-auto">
                              {formData.emergencyAddress?.postalCode?.length || 0}/5 ‡∏´‡∏•‡∏±‡∏Å
                            </p>
                          </div>
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                          <input
                            type="text"
                            value={formData.emergencyAddress?.phone || ''}
                            onChange={(e) => handleInputChange('emergencyAddress.phone', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyAddressPhone') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyAddressPhone') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyAddressPhone')}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô */}
                    <div className="border-t pt-4">
                      <h3 className="text-sm font-medium text-gray-700 mb-3">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyWorkplace?.name || ''}
                            onChange={(e) => handleInputChange('emergencyWorkplace.name', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyWorkplaceName') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyWorkplaceName') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyWorkplaceName')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyWorkplace?.district || ''}
                            onChange={(e) => handleTextOnlyChange('emergencyWorkplace.district', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyWorkplaceDistrict') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyWorkplaceDistrict') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyWorkplaceDistrict')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyWorkplace?.province || ''}
                            onChange={(e) => handleTextOnlyChange('emergencyWorkplace.province', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyWorkplaceProvince') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyWorkplaceProvince') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyWorkplaceProvince')}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={formData.emergencyWorkplace?.phone || ''}
                            onChange={(e) => handleInputChange('emergencyWorkplace.phone', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError('emergencyWorkplacePhone') ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError('emergencyWorkplacePhone') && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage('emergencyWorkplacePhone')}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    
                  </div>
                </div>




                {/* ‡πë.‡πë‡πê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï) */}
                {/* <div className="mb-6">
                  <h4 className="text-md font-semibold text-gray-700 mb-3 text-center">‡πë.‡πë‡πê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß</h4>
                  <div className="space-y-3">
                    <div className="flex gap-6">
                      <label className="flex items-center gap-2">
                        <input 
                          type="radio" 
                          name="maritalStatus" 
                          value="‡πÇ‡∏™‡∏î"
                          checked={formData.maritalStatus === '‡πÇ‡∏™‡∏î'}
                          onChange={(e) => handleInputChange('maritalStatus', e.target.value)}
                          className="w-4 h-4" 
                        />
                        <span>‡πÇ‡∏™‡∏î</span>
                      </label>
                      <label className="flex items-center gap-2">
                        <input 
                          type="radio" 
                          name="maritalStatus" 
                          value="‡∏™‡∏°‡∏£‡∏™‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
                          checked={formData.maritalStatus === '‡∏™‡∏°‡∏£‡∏™‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô'}
                          onChange={(e) => handleInputChange('maritalStatus', e.target.value)}
                          className="w-4 h-4" 
                        />
                        <span>‡∏™‡∏°‡∏£‡∏™‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</span>
                      </label>
                      <label className="flex items-center gap-2">
                        <input 
                          type="radio" 
                          name="maritalStatus" 
                          value="‡∏´‡∏°‡πâ‡∏≤‡∏¢"
                          checked={formData.maritalStatus === '‡∏´‡∏°‡πâ‡∏≤‡∏¢'}
                          onChange={(e) => handleInputChange('maritalStatus', e.target.value)}
                          className="w-4 h-4" 
                        />
                        <span>‡∏´‡∏°‡πâ‡∏≤‡∏¢</span>
                      </label>
                      <label className="flex items-center gap-2">
                        <input 
                          type="radio" 
                          name="maritalStatus" 
                          value="‡∏´‡∏¢‡πà‡∏≤"
                          checked={formData.maritalStatus === '‡∏´‡∏¢‡πà‡∏≤'}
                          onChange={(e) => handleInputChange('maritalStatus', e.target.value)}
                          className="w-4 h-4" 
                        />
                        <span>‡∏´‡∏¢‡πà‡∏≤</span>
                      </label>
                      <label className="flex items-center gap-2">
                        <input 
                          type="radio" 
                          name="maritalStatus" 
                          value="‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà"
                          checked={formData.maritalStatus === '‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà'}
                          onChange={(e) => handleInputChange('maritalStatus', e.target.value)}
                          className="w-4 h-4" 
                        />
                        <span>‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà</span>
                      </label>
                    </div>
                  </div>
                </div> */}
              </div>
            </CardBody>
          </Card>
          )}
          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© */}
          {activeTab === 'skills' && (
          <Card className="shadow-xl border-0">
            <div ref={sectionRefs.extra} />
            <CardHeader className="bg-gradient-to-r from-purple-500 via-pink-500 to-purple-600 text-white relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-400/20 to-pink-400/20"></div>
              <div className="relative flex items-center gap-3">
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <AcademicCapIcon className="w-6 h-6" />
                </div>
                <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©</h2>
              </div>
            </CardHeader>
            <CardBody className="p-8">
              {/* ‡πí. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ/‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© */}
              <div className="mb-6">
                <h3 className="text-lg font-bold text-gray-800 mb-6 border-b-2 border-dotted border-gray-400 pb-2">
                  ‡πí. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ/‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
                </h3>
                <div className="space-y-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©<span className="text-red-500">*</span></label>
                    <textarea
                      value={formData.skills}
                      onChange={(e) => handleInputChange('skills', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent resize-none ${
                        hasError('skills') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      rows={3}
                      />
                    {hasError('skills') && (
                      <p className="text-red-500 text-xs mt-1">{getErrorMessage('skills')}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                      value={formData.languages}
                      onChange={(e) => handleInputChange('languages', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                        hasError('languages') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                      />
                    {hasError('languages') && (
                      <p className="text-red-500 text-xs mt-1">{getErrorMessage('languages')}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå<span className="text-red-500">*</span></label>
                      <input
                        type="text"
                      value={formData.computerSkills}
                      onChange={(e) => handleInputChange('computerSkills', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå"
                        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                        hasError('computerSkills') 
                            ? 'border-red-500 focus:ring-red-500' 
                            : 'border-gray-300 focus:ring-blue-500'
                        }`}
                    />
                    {hasError('computerSkills') && (
                      <p className="text-red-500 text-xs mt-1">{getErrorMessage('computerSkills')}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á/‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£</label>
                    <input
                      type="text"
                      value={formData.certificates}
                      onChange={(e) => handleInputChange('certificates', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á/‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á</label>
                    <input
                      type="text"
                      value={formData.references}
                      onChange={(e) => handleInputChange('references', e.target.value)}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>
              </div>
            </CardBody>
          </Card>
          )}
          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
          {activeTab === 'documents' && (
          <Card className="shadow-xl border-0">
            <div ref={sectionRefs.documents} />
            <CardHeader className="bg-gradient-to-r from-gray-500 via-slate-500 to-gray-600 text-white relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-gray-400/20 to-slate-400/20"></div>
              <div className="relative flex items-center gap-3">
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <DocumentTextIcon className="w-6 h-6" />
                </div>
                <h2 className="text-xl font-semibold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h2>
              </div>
            </CardHeader>
            <CardBody className="p-8">
              {/* ‡πî. ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö */}
              <div className="mb-6">
                <div className="flex justify-between items-center mb-6 border-b-2 border-dotted border-gray-400 pb-2">
                  <h3 className="text-lg font-bold text-gray-800">
                  ‡πî. ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
                </h3>
                  <Button
                    color="danger"
                    variant="bordered"
                    size="sm"
                    className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300"
                    onClick={() => {
                      if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                        setFormData(prev => ({
                          ...prev,
                          documents: {
                            idCard: undefined,
                            houseRegistration: undefined,
                            educationCertificate: undefined,
                            militaryCertificate: undefined,
                            medicalCertificate: undefined,
                            drivingLicense: undefined,
                            otherDocuments: []
                          }
                        }));
                        setUploadedDocuments([]);
                        console.log('‚úÖ ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                      }
                    }}
                  >
                    ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                  </Button>
                </div>
                {!savedResume?.id && (
                  <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <p className="text-sm text-yellow-800">
                      <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
                    </p>
                  </div>
                )}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {/* ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                    <div className="mb-2">
                      <span className="inline-block px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full">
                        ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                      </span>
                    </div>
                    <h4 className="font-semibold text-gray-700 mb-2">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</h4>
                    <p className="text-sm text-gray-500 mb-3">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</p>
                    <input
                      type="file"
                      id="idCard"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={async (e) => {
                        const file = e.target.files?.[0];
                        if (file) {
                          handleInputChange('documents.idCard', file);
                          
                          // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                          await handleDocumentUpload(file, 'idCard');
                        }
                      }}
                      className="hidden"
                    />
                    <div className="space-y-2">
                      <Button
                        color="primary"
                        variant="solid"
                        size="sm"
                        className="w-full bg-blue-500 hover:bg-blue-600 text-white rounded-lg shadow-md transition-all duration-200"
                        onClick={() => document.getElementById('idCard')?.click()}
                      >
                        {formData.documents?.idCard ? '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'}
                      </Button>
                      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                      {uploadedDocuments.filter(doc => doc.documentType === 'idCard').map((doc, index) => (
                        <div key={index} className="p-3 bg-green-50 border border-green-200 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <DocumentTextIcon className="w-5 h-5 text-green-600" />
                              <div className="flex flex-col">
                                <span className="text-sm text-green-700 font-medium">
                                  {doc.fileName}
                                </span>
                                <span className="text-xs text-green-600">
                                  ‡∏Ç‡∏ô‡∏≤‡∏î: {(doc.fileSize / 1024 / 1024).toFixed(2)} MB
                                </span>
                              </div>
                            </div>
                            <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                              ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                            </span>
                          </div>
                            <div className="flex gap-2">
                            <Button
                              color="secondary"
                              variant="bordered"
                              size="sm"
                                className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                              onClick={() => {
                                window.open(doc.filePath, '_blank');
                              }}
                            >
                              ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                            </Button>
                              <Button
                                color="danger"
                                variant="bordered"
                                size="sm"
                                className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                                onClick={() => handleDeleteDocument(doc.id, 'idCard')}
                                disabled={isUploading}
                              >
                                <TrashIcon className="w-4 h-4" />
                            </Button>
                            </div>
                        </div>
                      ))}
                      
                      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
                      {formData.documents?.idCard && !uploadedDocuments.some(doc => doc.documentType === 'idCard') && (
                        <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <DocumentTextIcon className="w-5 h-5 text-blue-600" />
                              <div className="flex flex-col">
                                <span className="text-sm text-blue-700 font-medium">
                                  {typeof formData.documents.idCard === 'object' && 'name' in formData.documents.idCard 
                                    ? formData.documents.idCard.name 
                                    : (formData.documents.idCard as File).name}
                                </span>
                                {formData.documents.idCard instanceof File && (
                                  <span className="text-xs text-blue-600">
                                    ‡∏Ç‡∏ô‡∏≤‡∏î: {(formData.documents.idCard.size / 1024 / 1024).toFixed(2)} MB
                                  </span>
                      )}
                    </div>
                            </div>
                            <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                              ‡∏£‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                            </span>
                          </div>
                          <div className="flex gap-2">
                          <Button
                            color="secondary"
                            variant="bordered"
                            size="sm"
                              className="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                            onClick={() => {
                              if (formData.documents!.idCard instanceof File) {
                                handlePreviewFile(formData.documents!.idCard, '‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô');
                              }
                            }}
                            disabled={isUploading}
                          >
                            {isUploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'}
                          </Button>
                            <Button
                              color="danger"
                              variant="bordered"
                              size="sm"
                              className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                              onClick={() => handleDeleteNewDocument('idCard')}
                              disabled={isUploading}
                            >
                              <TrashIcon className="w-4 h-4" />
                          </Button>
                          </div>
                      </div>
                    )}
                    </div>
                    {errors.documentsIdCard && (
                      <div className="mt-2 text-xs text-red-600">
                        {errors.documentsIdCard}
                      </div>
                    )}
                  </div>

                  {/* ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                    <div className="mb-2">
                      <span className="inline-block px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full">
                        ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                      </span>
                    </div>
                    <h4 className="font-semibold text-gray-700 mb-2">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô</h4>
                    <p className="text-sm text-gray-500 mb-3">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô</p>
                    <input
                      type="file"
                      id="houseRegistration"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={async (e) => {
                        const file = e.target.files?.[0];
                        if (file) {
                          handleInputChange('documents.houseRegistration', file);
                          
                          // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                          await handleDocumentUpload(file, 'houseRegistration');
                        }
                      }}
                      className="hidden"
                    />
                    <div className="space-y-2">
                      <Button
                        color="primary"
                        variant="solid"
                        size="sm"
                        className="w-full bg-blue-500 hover:bg-blue-600 text-white rounded-lg shadow-md transition-all duration-200"
                        onClick={() => document.getElementById('houseRegistration')?.click()}
                      >
                        {formData.documents?.houseRegistration ? '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'}
                      </Button>
                      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                      {uploadedDocuments.filter(doc => doc.documentType === 'houseRegistration').map((doc, index) => (
                        <div key={index} className="p-3 bg-green-50 border border-green-200 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <DocumentTextIcon className="w-5 h-5 text-green-600" />
                              <div className="flex flex-col">
                                <span className="text-sm text-green-700 font-medium">
                                  {doc.fileName}
                                </span>
                                <span className="text-xs text-green-600">
                                  ‡∏Ç‡∏ô‡∏≤‡∏î: {(doc.fileSize / 1024 / 1024).toFixed(2)} MB
                                </span>
                              </div>
                            </div>
                            <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                              ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                            </span>
                          </div>
                            <div className="flex gap-2">
                            <Button
                              color="secondary"
                              variant="bordered"
                              size="sm"
                                className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                              onClick={() => {
                                window.open(doc.filePath, '_blank');
                              }}
                            >
                              ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                            </Button>
                              <Button
                                color="danger"
                                variant="bordered"
                                size="sm"
                                className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                                onClick={() => handleDeleteDocument(doc.id, 'houseRegistration')}
                                disabled={isUploading}
                              >
                                <TrashIcon className="w-4 h-4" />
                            </Button>
                            </div>
                        </div>
                      ))}
                      
                      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
                      {formData.documents?.houseRegistration && !uploadedDocuments.some(doc => doc.documentType === 'houseRegistration') && (
                        <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <DocumentTextIcon className="w-5 h-5 text-blue-600" />
                              <div className="flex flex-col">
                                <span className="text-sm text-blue-700 font-medium">
                                  {typeof formData.documents.houseRegistration === 'object' && 'name' in formData.documents.houseRegistration 
                                    ? formData.documents.houseRegistration.name 
                                    : (formData.documents.houseRegistration as File).name}
                                </span>
                                {formData.documents.houseRegistration instanceof File && (
                                  <span className="text-xs text-blue-600">
                                    ‡∏Ç‡∏ô‡∏≤‡∏î: {(formData.documents.houseRegistration.size / 1024 / 1024).toFixed(2)} MB
                                  </span>
                      )}
                    </div>
                            </div>
                            <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                              ‡∏£‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                            </span>
                          </div>
                          <div className="flex gap-2">
                          <Button
                            color="secondary"
                            variant="bordered"
                            size="sm"
                              className="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                            onClick={() => {
                              if (formData.documents!.houseRegistration instanceof File) {
                                handlePreviewFile(formData.documents!.houseRegistration, '‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô');
                              }
                            }}
                            disabled={isUploading}
                          >
                            {isUploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'}
                          </Button>
                            <Button
                              color="danger"
                              variant="bordered"
                              size="sm"
                              className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                              onClick={() => handleDeleteNewDocument('houseRegistration')}
                              disabled={isUploading}
                            >
                              <TrashIcon className="w-4 h-4" />
                          </Button>
                          </div>
                      </div>
                    )}
                    </div>
                    {errors.documentsHouseRegistration && (
                      <div className="mt-2 text-xs text-red-600">
                        {errors.documentsHouseRegistration}
                      </div>
                    )}
                  </div>


                  {/* ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                    <div className="mb-2">
                      <span className="inline-block px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full">
                        ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                      </span>
                    </div>
                    <h4 className="font-semibold text-gray-700 mb-2">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h4>
                    <p className="text-sm text-gray-500 mb-3">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</p>
                    <input
                      type="file"
                      id="educationCertificate"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={async (e) => {
                        const file = e.target.files?.[0];
                        if (file) {
                          handleInputChange('documents.educationCertificate', file);
                          
                          // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                          await handleDocumentUpload(file, 'educationCertificate');
                        }
                      }}
                      className="hidden"
                    />
                    <div className="space-y-2">
                      <Button
                        color="primary"
                        variant="solid"
                        size="sm"
                        className="w-full bg-blue-500 hover:bg-blue-600 text-white rounded-lg shadow-md transition-all duration-200"
                        onClick={() => document.getElementById('educationCertificate')?.click()}
                      >
                        {formData.documents?.educationCertificate ? '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'}
                      </Button>
                      
                      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                      {uploadedDocuments.filter(doc => doc.documentType === 'educationCertificate').map((doc, index) => (
                        <div key={index} className="p-3 bg-green-50 border border-green-200 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <DocumentTextIcon className="w-5 h-5 text-green-600" />
                              <div className="flex flex-col">
                                <span className="text-sm text-green-700 font-medium">
                                  {doc.fileName}
                                </span>
                                <span className="text-xs text-green-600">
                                  ‡∏Ç‡∏ô‡∏≤‡∏î: {(doc.fileSize / 1024 / 1024).toFixed(2)} MB
                                </span>
                              </div>
                            </div>
                            <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                              ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                            </span>
                          </div>
                            <div className="flex gap-2">
                            <Button
                              color="secondary"
                              variant="bordered"
                              size="sm"
                                className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                              onClick={() => {
                                window.open(doc.filePath, '_blank');
                              }}
                            >
                              ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                            </Button>
                              <Button
                                color="danger"
                                variant="bordered"
                                size="sm"
                                className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                                onClick={() => handleDeleteDocument(doc.id, 'educationCertificate')}
                                disabled={isUploading}
                              >
                                <TrashIcon className="w-4 h-4" />
                            </Button>
                            </div>
                        </div>
                      ))}
                      
                      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
                      {formData.documents?.educationCertificate && !uploadedDocuments.some(doc => doc.documentType === 'educationCertificate') && (
                        <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <DocumentTextIcon className="w-5 h-5 text-blue-600" />
                              <div className="flex flex-col">
                                <span className="text-sm text-blue-700 font-medium">
                                  {typeof formData.documents.educationCertificate === 'object' && 'name' in formData.documents.educationCertificate 
                                    ? formData.documents.educationCertificate.name 
                                    : (formData.documents.educationCertificate as File).name}
                                </span>
                                {formData.documents.educationCertificate instanceof File && (
                                  <span className="text-xs text-blue-600">
                                    ‡∏Ç‡∏ô‡∏≤‡∏î: {(formData.documents.educationCertificate.size / 1024 / 1024).toFixed(2)} MB
                                  </span>
                      )}
                    </div>
                            </div>
                            <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                              ‡∏£‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                            </span>
                          </div>
                          <div className="flex gap-2">
                          <Button
                            color="secondary"
                            variant="bordered"
                            size="sm"
                              className="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                            onClick={() => {
                              if (formData.documents!.educationCertificate instanceof File) {
                                handlePreviewFile(formData.documents!.educationCertificate, '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤');
                              }
                            }}
                            disabled={isUploading}
                          >
                            {isUploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'}
                          </Button>
                            <Button
                              color="danger"
                              variant="bordered"
                              size="sm"
                              className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                              onClick={() => handleDeleteNewDocument('educationCertificate')}
                              disabled={isUploading}
                            >
                              <TrashIcon className="w-4 h-4" />
                          </Button>
                          </div>
                      </div>
                    )}
                    </div>
                    {errors.documentsEducationCertificate && (
                      <div className="mt-2 text-xs text-red-600">
                        {errors.documentsEducationCertificate}
                      </div>
                      )}
                    </div>
                  {/* ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£ */}
                  <div className={`border-2 border-dashed rounded-lg p-4 text-center ${formData.gender === '‡∏´‡∏ç‡∏¥‡∏á' ? 'border-gray-200 bg-gray-50' : 'border-gray-300'}`}>
                    <div className="mb-2">
                      <span className={`inline-block px-2 py-1 text-xs font-medium rounded-full ${formData.gender === '‡∏´‡∏ç‡∏¥‡∏á' ? 'bg-gray-100 text-gray-500' : 'bg-blue-100 text-blue-800'}`}>
                        ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢
                      </span>
                    </div>
                    <h4 className={`font-semibold mb-2 ${formData.gender === '‡∏´‡∏ç‡∏¥‡∏á' ? 'text-gray-400' : 'text-gray-700'}`}>‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£</h4>
                    <p className={`text-sm mb-3 ${formData.gender === '‡∏´‡∏ç‡∏¥‡∏á' ? 'text-gray-400' : 'text-gray-500'}`}>‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£</p>
                      <input
                      type="file"
                      id="militaryCertificate"
                      accept=".pdf,.jpg,.jpeg,.png"
                      disabled={formData.gender === '‡∏´‡∏ç‡∏¥‡∏á'}
                      onChange={async (e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            handleInputChange('documents.militaryCertificate', file);
                            
                            // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                            await handleDocumentUpload(file, 'militaryCertificate');
                          }
                        }}
                      className="hidden"
                    />
                    <div className="space-y-2">
                      <Button
                        color="primary"
                        variant="solid"
                        size="sm"
                        className="w-full bg-blue-500 hover:bg-blue-600 text-white rounded-lg shadow-md transition-all duration-200 disabled:bg-gray-400 disabled:cursor-not-allowed"
                        disabled={formData.gender === '‡∏´‡∏ç‡∏¥‡∏á'}
                        onClick={() => document.getElementById('militaryCertificate')?.click()}
                      >
                        {formData.documents?.militaryCertificate ? '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'}
                      </Button>
                      {formData.documents?.militaryCertificate && (
                        <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <DocumentTextIcon className="w-5 h-5 text-green-600" />
                              <div className="flex flex-col">
                                <span className="text-sm text-green-700 font-medium">
                                  {typeof formData.documents.militaryCertificate === 'object' && 'name' in formData.documents.militaryCertificate 
                                    ? formData.documents.militaryCertificate.name 
                                    : (formData.documents.militaryCertificate as File).name}
                                </span>
                                {formData.documents.militaryCertificate instanceof File && (
                                  <span className="text-xs text-green-600">
                                    ‡∏Ç‡∏ô‡∏≤‡∏î: {(formData.documents.militaryCertificate.size / 1024 / 1024).toFixed(2)} MB
                                  </span>
                                )}
                              </div>
                            </div>
                            {typeof formData.documents.militaryCertificate === 'object' && 'uploaded' in formData.documents.militaryCertificate && formData.documents.militaryCertificate.uploaded && (
                              <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                                ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                              </span>
                            )}
                          </div>
                        <div className="flex gap-2">
                        <Button
                          color="secondary"
                          variant="bordered"
                          size="sm"
                            className="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-300 rounded-lg shadow-sm transition-all duration-200"
                            onClick={() => {
                              if (formData.documents!.militaryCertificate instanceof File) {
                                handlePreviewFile(formData.documents!.militaryCertificate, '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£');
                              }
                            }}
                            disabled={isUploading}
                        >
                          {isUploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á'}
                        </Button>
                          <Button
                            color="danger"
                            variant="bordered"
                            size="sm"
                            className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                            onClick={() => handleDeleteNewDocument('militaryCertificate')}
                            disabled={isUploading}
                          >
                            <TrashIcon className="w-4 h-4" />
                        </Button>
                        </div>
                        </div>
                      )}
                    </div>
                    {formData.gender === '‡∏´‡∏ç‡∏¥‡∏á' && (
                      <div className="mt-2 text-xs text-gray-500">
                        ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á
                      </div>
                    )}
                    {errors.documentsMilitaryCertificate && (
                      <div className="mt-2 text-xs text-red-600">
                        {errors.documentsMilitaryCertificate}
                      </div>
                    )}
                  </div>
                  {/* ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                    <div className="mb-2">
                      <span className="inline-block px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">
                        ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                      </span>
                    </div>
                    <h4 className="font-semibold text-gray-700 mb-2">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå</h4>
                    <p className="text-sm text-gray-500 mb-3">‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå</p>
                    <input
                      type="file"
                      id="medicalCertificate"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={async (e) => {
                        const file = e.target.files?.[0];
                        if (file) {
                          handleInputChange('documents.medicalCertificate', file);
                          
                          // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                          await handleDocumentUpload(file, 'medicalCertificate');
                        }
                      }}
                      className="hidden"
                    />
                    <div className="space-y-2">
                      <Button
                        color="primary"
                        variant="solid"
                        size="sm"
                        className="w-full bg-blue-500 hover:bg-blue-600 text-white rounded-lg shadow-md transition-all duration-200"
                        onClick={() => document.getElementById('medicalCertificate')?.click()}
                      >
                        {formData.documents?.medicalCertificate ? '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'}
                      </Button>
                      {formData.documents?.medicalCertificate && (
                        <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <DocumentTextIcon className="w-5 h-5 text-green-600" />
                              <div className="flex flex-col">
                                <span className="text-sm text-green-700 font-medium">
                                  {typeof formData.documents.medicalCertificate === 'object' && 'name' in formData.documents.medicalCertificate 
                                    ? formData.documents.medicalCertificate.name 
                                    : (formData.documents.medicalCertificate as File).name}
                                </span>
                                {formData.documents.medicalCertificate instanceof File && (
                                  <span className="text-xs text-green-600">
                                    ‡∏Ç‡∏ô‡∏≤‡∏î: {(formData.documents.medicalCertificate.size / 1024 / 1024).toFixed(2)} MB
                                  </span>
                                )}
                              </div>
                            </div>
                            {typeof formData.documents.medicalCertificate === 'object' && 'uploaded' in formData.documents.medicalCertificate && formData.documents.medicalCertificate.uploaded && (
                              <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                                ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                              </span>
                            )}
                          </div>
                        <div className="flex gap-2">
                        <Button
                          color="secondary"
                          variant="bordered"
                          size="sm"
                            className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                        onClick={() => {
                              if (formData.documents!.medicalCertificate instanceof File) {
                                handlePreviewFile(formData.documents!.medicalCertificate, '‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå');
                            } else {
                                console.log('‚ÑπÔ∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
                              }
                            }}
                        >
                          ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        </Button>
                          <Button
                            color="danger"
                            variant="bordered"
                            size="sm"
                            className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                            onClick={() => handleDeleteNewDocument('medicalCertificate')}
                            disabled={isUploading}
                          >
                            <TrashIcon className="w-4 h-4" />
                        </Button>
                        </div>
                      </div>
                    )}
                    </div>
                    {errors.documentsMedicalCertificate && (
                      <div className="mt-2 text-xs text-red-600">
                        {errors.documentsMedicalCertificate}
                      </div>
                    )}
                  </div>
                  {/* ‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                    <div className="mb-2">
                      <span className="inline-block px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                        ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö
                      </span>
                    </div>
                    <h4 className="font-semibold text-gray-700 mb-2">‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà</h4>
                    <p className="text-sm text-gray-500 mb-3">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</p>
                    <input
                      type="file"
                      id="drivingLicense"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={async (e) => {
                        const file = e.target.files?.[0];
                        if (file) {
                          handleInputChange('documents.drivingLicense', file);
                          
                          // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                          await handleDocumentUpload(file, 'drivingLicense');
                        }
                      }}
                      className="hidden"
                    />
                    <div className="space-y-2">
                      <Button
                        color="primary"
                        variant="solid"
                        size="sm"
                        className="w-full bg-blue-500 hover:bg-blue-600 text-white rounded-lg shadow-md transition-all duration-200"
                        onClick={() => document.getElementById('drivingLicense')?.click()}
                      >
                        {formData.documents?.drivingLicense ? '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'}
                      </Button>
                      {formData.documents?.drivingLicense && (
                        <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <DocumentTextIcon className="w-5 h-5 text-green-600" />
                              <div className="flex flex-col">
                                <span className="text-sm text-green-700 font-medium">
                                  {typeof formData.documents.drivingLicense === 'object' && 'name' in formData.documents.drivingLicense 
                                    ? formData.documents.drivingLicense.name 
                                    : (formData.documents.drivingLicense as File).name}
                                </span>
                                {formData.documents.drivingLicense instanceof File && (
                                  <span className="text-xs text-green-600">
                                    ‡∏Ç‡∏ô‡∏≤‡∏î: {(formData.documents.drivingLicense.size / 1024 / 1024).toFixed(2)} MB
                                  </span>
                                )}
                              </div>
                            </div>
                            {typeof formData.documents.drivingLicense === 'object' && 'uploaded' in formData.documents.drivingLicense && formData.documents.drivingLicense.uploaded && (
                              <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                                ‚úì ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                              </span>
                            )}
                          </div>
                        <div className="flex gap-2">
                        <Button
                          color="secondary"
                          variant="bordered"
                          size="sm"
                            className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200"
                            onClick={() => {
                              if (formData.documents!.drivingLicense instanceof File) {
                                handlePreviewFile(formData.documents!.drivingLicense, '‡πÉ‡∏ö‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà');
                              } else {
                                console.log('‚ÑπÔ∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
                              }
                            }}
                        >
                          ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        </Button>
                          <Button
                            color="danger"
                            variant="bordered"
                            size="sm"
                            className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                            onClick={() => handleDeleteNewDocument('drivingLicense')}
                            disabled={isUploading}
                          >
                            <TrashIcon className="w-4 h-4" />
                        </Button>
                        </div>
                      </div>
                    )}
                    </div>
                    {errors.documentsDrivingLicense && (
                      <div className="mt-2 text-xs text-red-600">
                        {errors.documentsDrivingLicense}
                      </div>
                    )}
                  </div>

                  

                  {/* ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                    <div className="mb-2">
                      <span className="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
                        ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                      </span>
                    </div>
                    <h4 className="text-sm font-medium text-gray-700 mb-2">‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ</h4>
                    <p className="text-sm text-gray-500 mb-3">‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</p>
                    <input
                      type="file"
                      id="otherDocuments"
                      accept=".pdf,.jpg,.jpeg,.png"
                      multiple
                      onChange={(e) => {
                        const files = Array.from(e.target.files || []);
                        if (files.length > 0) {
                          handleInputChange('documents.otherDocuments', files);
                        }
                      }}
                      className="hidden"
                    />
                    <div className="space-y-2">
                      <Button
                        color="primary"
                        variant="solid"
                        size="sm"
                        className="w-full bg-blue-500 hover:bg-blue-600 text-white rounded-lg shadow-md transition-all duration-200"
                        onClick={() => document.getElementById('otherDocuments')?.click()}
                      >
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                      </Button>
                      {formData.documents?.otherDocuments && Array.isArray(formData.documents.otherDocuments) && formData.documents.otherDocuments.length > 0 && (
                        <div className="space-y-1">
                          {formData.documents.otherDocuments.map((file, index) => (
                            <div key={index} className="flex gap-2">
                            <Button
                              color="secondary"
                              variant="bordered"
                              size="sm"
                                className="flex-1 bg-green-50 hover:bg-green-100 text-green-700 border-green-300 rounded-lg shadow-sm transition-all duration-200 text-xs"
                              onClick={() => {
                                if (file instanceof File) {
                                  handlePreviewFile(file, `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ ${index + 1}`);
                                } else if (typeof file === 'object' && 'file' in file && file.file) {
                                  handlePreviewFile(file.file, `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ ${index + 1}`);
                          } else {
                                  console.log('‚ÑπÔ∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
                                }
                              }}
                            >
                              ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á {index + 1}
                            </Button>
                              <Button
                                color="danger"
                                variant="bordered"
                                size="sm"
                                className="bg-red-50 hover:bg-red-100 text-red-700 border-red-300 rounded-lg shadow-sm transition-all duration-200"
                                onClick={() => {
                                  const newFiles = formData.documents?.otherDocuments?.filter((_, i) => i !== index);
                                  setFormData(prev => ({
                                    ...prev,
                                    documents: {
                                      ...prev.documents,
                                      otherDocuments: newFiles || []
                                    }
                                  } as FormData));
                                }}
                                disabled={isUploading}
                              >
                                <TrashIcon className="w-4 h-4" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                    {formData.documents?.otherDocuments && (
                      <div className="mt-2 text-xs text-green-600">
                        ‚úì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {Array.isArray(formData.documents.otherDocuments) ? formData.documents.otherDocuments.length : 1} ‡πÑ‡∏ü‡∏•‡πå
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </CardBody>
          </Card>
          )}
          {/* ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ */}
          {activeTab === 'education' && (
          <Card className="shadow-xl border-0">
            <CardHeader className="bg-gradient-to-r from-green-500 via-emerald-500 to-green-600 text-white relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-green-400/20 to-emerald-400/20"></div>
              <div className="relative flex items-center gap-3">
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <AcademicCapIcon className="w-6 h-6" />
                </div>
                <h2 className="text-xl font-semibold">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h2>
              </div>
            </CardHeader>
            <CardBody className="p-8">
              {/* ‡πë.‡πó ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-gray-700 mb-4">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h3>
                <div className="space-y-4">
                  {formData.education.map((edu, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4 bg-white">
                      <div className="flex justify-between items-center mb-3">
                        <h5 className="text-sm font-medium text-gray-700">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà {index + 1}</h5>
                        {formData.education.length > 1 && (
                          <button
                            type="button"
                            onClick={() => removeEducation(index)}
                            className="text-red-500 hover:text-red-700 text-sm"
                          >
                            <TrashIcon className="w-4 h-4" />
                          </button>
                        )}
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ß‡∏∏‡∏í‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤<span className="text-red-500">*</span></label>
                          <select
                            value={edu.level}
                            onChange={(e) => handleEducationChange(index, 'level', e.target.value)}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`education${index}Level`) ? 'border-red-500' : 'border-gray-300'}`}
                          >
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏∏‡∏í‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
                            <option value="‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤">‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
                            <option value="‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏ï‡πâ‡∏ô">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏ï‡πâ‡∏ô</option>
                            <option value="‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢</option>
                            <option value="‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û (‡∏õ‡∏ß‡∏ä.)">‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û (‡∏õ‡∏ß‡∏ä.)</option>
                            <option value="‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (‡∏õ‡∏ß‡∏™.)">‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (‡∏õ‡∏ß‡∏™.)</option>
                            <option value="‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ">‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ</option>
                            <option value="‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó">‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó</option>
                            <option value="‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å">‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å</option>
                          </select>
                          {hasError(`education${index}Level`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`education${index}Level`)}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏™‡∏≤‡∏Ç‡∏≤/‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å<span className="text-red-500">*</span></label>
                        <input
                            type="text"
                            value={edu.major}
                            onChange={(e) => handleEducationChange(index, 'major', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤/‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏≠‡∏Å"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`education${index}Major`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`education${index}Major`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`education${index}Major`)}
                      </div>
                          )}
                    </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={edu.institution}
                            onChange={(e) => handleEducationChange(index, 'institution', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`education${index}Institution`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`education${index}Institution`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`education${index}Institution`)}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={edu.year}
                            onChange={(e) => handleEducationChange(index, 'year', handleYearChange(e.target.value))}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö (4 ‡∏´‡∏•‡∏±‡∏Å)"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`education${index}Year`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          <div className="flex justify-between items-center">
                          {hasError(`education${index}Year`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`education${index}Year`)}
                            </div>
                          )}
                            <p className="text-xs text-gray-500 ml-auto">
                              {edu.year.length}/4 ‡∏´‡∏•‡∏±‡∏Å
                            </p>
                          </div>
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={edu.gpa}
                            onChange={(e) => handleEducationChange(index, 'gpa', handleGpaChange(e.target.value))}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`education${index}Gpa`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`education${index}Gpa`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`education${index}Gpa`)}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                  {hasError('education') && (
                    <div className="text-xs text-red-600 mb-2">
                      {getErrorMessage('education')}
                    </div>
                  )}
                  <button
                    type="button"
                    onClick={addEducation}
                    className="w-full py-2 px-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-blue-500 hover:text-blue-500 transition-colors duration-200 flex items-center justify-center gap-2"
                  >
                    <PlusIcon className="w-4 h-4" />
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
                  </button>
                </div>
              </div>
            </CardBody>
          </Card>
          )}
          {/* ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
          {activeTab === 'work' && (
          <Card className="shadow-xl border-0">
            <CardHeader className="bg-gradient-to-r from-orange-500 via-amber-500 to-orange-600 text-white relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-orange-400/20 to-amber-400/20"></div>
              <div className="relative flex items-center gap-3">
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <BriefcaseIcon className="w-6 h-6" />
                </div>
                <h2 className="text-xl font-semibold">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</h2>
              </div>
            </CardHeader>
            <CardBody className="p-8">
              {/* ‡πë.‡πò ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á */}
              <div className="mb-8">
                <h3 className="text-lg font-semibold text-gray-700 mb-4">‡πë.‡πò ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</h3>
                <div className="space-y-4">
                  {formData.workExperience.map((work, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4 bg-white">
                      <div className="flex justify-between items-center mb-3">
                        <h5 className="text-sm font-medium text-gray-700">‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà {index + 1}</h5>
                        {formData.workExperience.length > 1 && (
                          <button
                            type="button"
                            onClick={() => removeWorkExperience(index)}
                            className="text-red-500 hover:text-red-700 text-sm"
                          >
                            <TrashIcon className="w-4 h-4" />
                          </button>
                        )}
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={work.company}
                            onChange={(e) => handleWorkExperienceChange(index, 'company', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`workExperience${index}Company`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`workExperience${index}Company`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`workExperience${index}Company`)}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={work.position}
                            onChange={(e) => handleWorkExperienceChange(index, 'position', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`workExperience${index}Position`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`workExperience${index}Position`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`workExperience${index}Position`)}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</label>
                          <input
                            type="text"
                            value={work.district}
                            onChange={(e) => handleWorkExperienceChange(index, 'district', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          />
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                          <input
                            type="text"
                            value={work.province}
                            onChange={(e) => handleWorkExperienceChange(index, 'province', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          />
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                          <input
                            type="text"
                            value={work.phone}
                            onChange={(e) => handleWorkExperienceChange(index, 'phone', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          />
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô<span className="text-red-500">*</span></label>
                          <ThaiDatePicker
                            value={work.startDate}
                            onChange={(date) => handleWorkExperienceChange(index, 'startDate', date)}
                            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`workExperience${index}StartDate`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`workExperience${index}StartDate`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`workExperience${index}StartDate`)}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏á‡∏≤‡∏ô<span className="text-red-500">*</span></label>
                          <ThaiDatePicker
                            value={work.endDate}
                            onChange={(date) => handleWorkExperienceChange(index, 'endDate', date)}
                            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏á‡∏≤‡∏ô"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`workExperience${index}EndDate`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`workExperience${index}EndDate`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`workExperience${index}EndDate`)}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                        value={work.salary}
                            onChange={(e) => handleWorkExperienceChange(index, 'salary', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`workExperience${index}Salary`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`workExperience${index}Salary`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`workExperience${index}Salary`)}
                    </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={work.reason}
                            onChange={(e) => handleWorkExperienceChange(index, 'reason', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`workExperience${index}Reason`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`workExperience${index}Reason`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`workExperience${index}Reason`)}
                            </div>
                          )}
                    </div>
                  </div>
                </div>
              ))}
                  {hasError('workExperience') && (
                    <div className="text-xs text-red-600 mb-2">
                      {getErrorMessage('workExperience')}
                    </div>
                  )}
                  <button
                    type="button"
                    onClick={addWorkExperience}
                    className="w-full py-2 px-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-blue-500 hover:text-blue-500 transition-colors duration-200 flex items-center justify-center gap-2"
                  >
                    <PlusIcon className="w-4 h-4" />
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                  </button>
                </div>
              </div>

              {/* ‡πë.‡πô ‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á */}
              <div className="mb-8">
                <h3 className="text-lg font-semibold text-gray-700 mb-4">‡πë.‡πô ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á</h3>
                
                {/* Radio Button ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á */}
                

                {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ */}
                <div className="space-y-4">
                  {formData.previousGovernmentService.map((service, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4 bg-white">
                      
                      <div className="flex justify-between items-center mb-3">
                        <div>
                          <h5 className="text-sm font-medium text-gray-700">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {index + 1}</h5>
                          {service.type && (
                            <p className="text-xs text-blue-600 mt-1">
                              ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {service.type === 'civilServant' ? '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£' : '‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á'}
                            </p>
                          )}
                        </div>
                        {formData.previousGovernmentService.length > 1 && (
                          <button
                            type="button"
                            onClick={() => removePreviousGovernmentService(index)}
                            className="text-red-500 hover:text-red-700 text-sm"
                          >
                            <TrashIcon className="w-4 h-4" />
                          </button>
                        )}
                      </div>
                      <div className="flex items-center space-x-4">
                    <label className="text-sm font-medium text-gray-700">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</label>
                    <div className="flex items-center space-x-4">
                      <label className="flex items-center">
                        <input
                          type="radio"
                          name="governmentServiceType"
                          value="civilServant"
                          checked={formData.previousGovernmentService.some(service => service.type === 'civilServant')}
                          onChange={(e) => {
                            if (e.target.value === 'civilServant') {
                              setFormData(prev => ({
                                ...prev,
                                previousGovernmentService: prev.previousGovernmentService.map(service => ({
                                  ...service,
                                  type: 'civilServant'
                                }))
                              }));
                            }
                          }}
                          className="mr-2"
                        />
                        <span className="text-sm text-gray-700">‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£</span>
                      </label>
                      <label className="flex items-center">
                        <input
                          type="radio"
                          name="governmentServiceType"
                          value="employee"
                          checked={formData.previousGovernmentService.some(service => service.type === 'employee')}
                          onChange={(e) => {
                            if (e.target.value === 'employee') {
                              setFormData(prev => ({
                                ...prev,
                                previousGovernmentService: prev.previousGovernmentService.map(service => ({
                                  ...service,
                                  type: 'employee'
                                }))
                              }));
                            }
                          }}
                          className="mr-2"
                        />
                        <span className="text-sm text-gray-700">‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á</span>
                      </label>
                    </div>
                  </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={service.position}
                            onChange={(e) => handlePreviousGovernmentServiceChange(index, 'position', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`previousGovernmentService${index}Position`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`previousGovernmentService${index}Position`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`previousGovernmentService${index}Position`)}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={service.department}
                            onChange={(e) => handlePreviousGovernmentServiceChange(index, 'department', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`previousGovernmentService${index}Department`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`previousGovernmentService${index}Department`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`previousGovernmentService${index}Department`)}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏£‡∏≤‡∏∞<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={service.reason}
                            onChange={(e) => handlePreviousGovernmentServiceChange(index, 'reason', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`previousGovernmentService${index}Reason`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`previousGovernmentService${index}Reason`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`previousGovernmentService${index}Reason`)}
                            </div>
                          )}
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà<span className="text-red-500">*</span></label>
                          <input
                            type="text"
                            value={service.date}
                            onChange={(e) => handlePreviousGovernmentServiceChange(index, 'date', e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${hasError(`previousGovernmentService${index}Date`) ? 'border-red-500' : 'border-gray-300'}`}
                          />
                          {hasError(`previousGovernmentService${index}Date`) && (
                            <div className="text-xs text-red-600">
                              {getErrorMessage(`previousGovernmentService${index}Date`)}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                  <button
                    type="button"
                    onClick={addPreviousGovernmentService}
                    className="w-full py-2 px-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-blue-500 hover:text-blue-500 transition-colors duration-200 flex items-center justify-center gap-2"
                  >
                    <PlusIcon className="w-4 h-4" />
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
                  </button>
                </div>
              </div>
            </CardBody>
          </Card>
          )}
          {/* ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à */}
          {activeTab === 'position' && (
          <Card className="shadow-xl border-0">
            <CardHeader className="bg-gradient-to-r from-indigo-500 via-blue-500 to-indigo-600 text-white relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-indigo-400/20 to-blue-400/20"></div>
              <div className="relative flex items-center gap-3">
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <DocumentTextIcon className="w-6 h-6" />
                </div>
                <h2 className="text-xl font-semibold">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à</h2>
              </div>
            </CardHeader>
            <CardBody className="p-8">
              {/* ‡πë.‡πë‡πê ‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏Ø‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-gray-700 mb-4">‡πë.‡πë‡πê ‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏Ø‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£<span className="text-red-500">*</span></label>
                    <input
                      type="text"
                      value={formData.appliedPosition}
                      onChange={(e) => {
                        console.log('üîç appliedPosition input changed:', e.target.value);
                        handleTextOnlyChange('appliedPosition', e.target.value);
                      }}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                        errors.appliedPosition 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                   
                    
                    {errors.appliedPosition && (
                      <p className="text-red-500 text-xs mt-1">{errors.appliedPosition}</p>
                    )}
                    </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô<span className="text-red-500">*</span></label>
                    <ThaiDatePicker
                      value={formData.availableDate}
                      onChange={(date) => handleInputChange('availableDate', date)}
                      placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:border-transparent ${
                        errors.availableDate 
                          ? 'border-red-500 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-blue-500'
                      }`}
                    />
                    {errors.availableDate && (
                      <p className="text-red-500 text-xs mt-1">{errors.availableDate}</p>
                    )}
                    </div>
                  
                  </div>
                </div>
            </CardBody>
          </Card>
          )}

          {/* ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© */}
          {activeTab === 'special' && (
            <Card className="shadow-xl border-0">
              <CardHeader className="bg-gradient-to-r from-pink-500 via-rose-500 to-pink-600 text-white relative overflow-hidden">
                <div className="absolute inset-0 bg-gradient-to-r from-pink-400/20 to-rose-400/20"></div>
                <div className="relative flex items-center gap-3">
                  <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                    <UserIcon className="w-6 h-6" />
                  </div>
                  <h2 className="text-xl font-semibold">‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©</h2>
                </div>
              </CardHeader>
              <CardBody className="p-8">
                <div className="text-center py-8">
                  <UserIcon className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-gray-600 mb-2">‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©</h3>
                  <p className="text-gray-500">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
                </div>
              </CardBody>
            </Card>
          )}

        

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
            <div className="flex justify-center">
            <Button
                type="button"
              color="primary"
              size="lg"
                className="bg-blue-600 hover:bg-blue-700 text-white px-12 py-6 text-lg font-semibold shadow-xl hover:shadow-2xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg"
                startContent={isSaving ? <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div> : <CheckIcon className="w-6 h-6" />}
                onClick={() => saveCurrentTab()}
                disabled={isSaving}
              >
                {isSaving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...' : (savedResume?.id ? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}
                
            </Button>
          </div>
        </form>
      </div>
      {/* Preview Modal */}
      {showPreviewModal && previewFile && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-2">
          <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[95vh] flex flex-col">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold text-gray-800">
                ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå: {previewFile!.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}
              </h3>
              <button
                onClick={closePreviewModal}
                className="text-gray-500 hover:text-gray-700 text-2xl font-bold"
              >
                √ó
              </button>
            </div>
            <div className="flex-1 p-4 overflow-hidden min-h-[80vh]">
              {previewFile!.type.startsWith('image/') ? (
                <img
                  src={URL.createObjectURL(previewFile!.file)}
                  alt={previewFile!.name || 'Preview'}
                  className="max-w-full max-h-full object-contain mx-auto"
                />
              ) : previewFile!.type === 'application/pdf' ? (
                <iframe
                  src={URL.createObjectURL(previewFile!.file)}
                  className="w-full h-full border-0"
                  title={previewFile!.name || 'PDF Preview'}
                  style={{ 
                    minHeight: '90vh',
                    width: '100%',
                    height: '100%'
                  }}
                />
              ) : (
                <div className="flex items-center justify-center h-full">
                  <div className="text-center">
                    <DocumentTextIcon className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600 mb-2">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ</p>
                    <p className="text-sm text-gray-500">‡πÑ‡∏ü‡∏•‡πå: {previewFile!.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}</p>
                    <p className="text-sm text-gray-500">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {previewFile!.type || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'}</p>
                  </div>
                </div>
              )}
            </div>
            <div className="flex justify-end p-4 border-t">
              <Button
                onClick={closePreviewModal}
                color="primary"
                variant="solid"
                className="bg-blue-500 hover:bg-blue-600 text-white"
              >
                ‡∏õ‡∏¥‡∏î
              </Button>
            </div>
          </div>
        </div>
        
      )}
    </div>
  );
} 
