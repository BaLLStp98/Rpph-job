const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πâ‡∏á 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û
const missionGroups = [
  {
    id: 'mg_admin_001',
    name: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û',
    code: 'ADMIN',
    description: 'Administrative Mission Group, Service Support, and Quality System',
    order: 1,
    status: 'ACTIVE'
  },
  {
    id: 'mg_primary_001',
    name: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏ê‡∏°‡∏†‡∏π‡∏°‡∏¥',
    code: 'PRIMARY',
    description: 'Primary Care Service Mission Group',
    order: 2,
    status: 'ACTIVE'
  },
  {
    id: 'mg_tertiary_001',
    name: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏ï‡∏¥‡∏¢‡∏†‡∏π‡∏°‡∏¥',
    code: 'TERTIARY',
    description: 'Tertiary Care Service Mission Group',
    order: 3,
    status: 'ACTIVE'
  },
  {
    id: 'mg_nursing_001',
    name: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
    code: 'NURSING',
    description: 'Nursing Mission Group',
    order: 4,
    status: 'ACTIVE'
  }
];

async function seedMissionGroups() {
  console.log('üè• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πâ‡∏á 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°...\n');
  
  try {
    for (const group of missionGroups) {
      console.log(`üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ${group.name}`);
      
      const result = await prisma.$executeRawUnsafe(`
        INSERT INTO mission_groups (id, name, code, description, \`order\`, status, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, NOW(), NOW())
        ON DUPLICATE KEY UPDATE
        name = VALUES(name),
        code = VALUES(code),
        description = VALUES(description),
        \`order\` = VALUES(\`order\`),
        status = VALUES(status),
        updated_at = NOW()
      `, group.id, group.name, group.code, group.description, group.order, group.status);
      
      console.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${group.name} (‡∏£‡∏´‡∏±‡∏™: ${group.code})`);
      console.log(`   - ID: ${group.id}`);
      console.log(`   - ‡∏•‡∏≥‡∏î‡∏±‡∏ö: ${group.order}`);
      console.log(`   - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${group.status}\n`);
    }
    
    console.log('üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    const totalGroups = await prisma.$queryRawUnsafe('SELECT COUNT(*) as count FROM mission_groups');
    const activeGroups = await prisma.$queryRawUnsafe('SELECT COUNT(*) as count FROM mission_groups WHERE status = "ACTIVE"');
    
    console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à:');
    console.log(`   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalGroups[0].count} ‡∏Å‡∏•‡∏∏‡πà‡∏°`);
    console.log(`   - ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${activeGroups[0].count} ‡∏Å‡∏•‡∏∏‡πà‡∏°`);
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
seedMissionGroups();
