const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addMissionGroupId() {
  console.log('üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå mission_group_id ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á departments...\n');
  
  try {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå mission_group_id
    await prisma.$executeRawUnsafe(`
      ALTER TABLE departments 
      ADD COLUMN mission_group_id VARCHAR(50) NULL
    `);
    
    console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå mission_group_id ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Foreign Key
    await prisma.$executeRawUnsafe(`
      ALTER TABLE departments 
      ADD CONSTRAINT departments_mission_group_id_fkey 
      FOREIGN KEY (mission_group_id) REFERENCES mission_groups(id) 
      ON DELETE SET NULL ON UPDATE CASCADE
    `);
    
    console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Foreign Key ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
  } catch (error) {
    if (error.message.includes('Duplicate column name')) {
      console.log('‚ö†Ô∏è  ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå mission_group_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
    } else if (error.message.includes('Duplicate key name')) {
      console.log('‚ö†Ô∏è  Foreign Key ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    }
  } finally {
    await prisma.$disconnect();
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
addMissionGroupId();
